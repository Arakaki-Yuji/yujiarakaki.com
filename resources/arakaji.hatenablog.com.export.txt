AUTHOR: arakaji-yuu
TITLE: tmuxのプレフィックスキーを変更する
BASENAME: 2020/09/21/080437
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 09/21/2020 08:04:37
-----
BODY:
<p>tmuxは <a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%EC%A5%D5%A5%A3%A5%C3%A5%AF%A5%B9">プレフィックス</a>キー + 任意のキー の組み合わせでショートカットキーが作られており、そのショートカットを使って操作をする。</p>

<p>デフォルトだと Ctrl + b が<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%EC%A5%D5%A5%A3%A5%C3%A5%AF%A5%B9">プレフィックス</a>キーに割り当てられているが、個人的には使いにくいので別のキーをPrefixに割り当てたい。</p>

<p>~/.tmux.confに以下のように設定すると、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%EC%A5%D5%A5%A3%A5%C3%A5%AF%A5%B9">プレフィックス</a>キーを Ctrl + t に変更できる。</p>

<pre class="code ~/.tmux.conf" data-lang="~/.tmux.conf" data-unlink>set -g prefix C-t
</pre>


-----
--------
AUTHOR: arakaji-yuu
TITLE: cliモードで動かすEmacsで、選択した範囲のテキストをmacosのクリップボードに持ってくる
BASENAME: 2020/08/28/060616
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 08/28/2020 06:06:16
-----
BODY:
<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Emacs">Emacs</a>を使うときに自分は<a class="keyword" href="http://d.hatena.ne.jp/keyword/cli">cli</a>モードで動かすのですが、そのままだと<a class="keyword" href="http://d.hatena.ne.jp/keyword/Emacs">Emacs</a>上のコマンドでテキストを範囲選択 + コピーしても、そのテキストを<a class="keyword" href="http://d.hatena.ne.jp/keyword/macos">macos</a>の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AF%A5%EA%A5%C3%A5%D7%A5%DC%A1%BC%A5%C9">クリップボード</a>には反映されません。
<a class="keyword" href="http://d.hatena.ne.jp/keyword/Emacs">Emacs</a>上でコピーしたテキストは<a class="keyword" href="http://d.hatena.ne.jp/keyword/Emacs">Emacs</a>上だけでそのテキストをペーストできます。</p>

<p>ただ<a class="keyword" href="http://d.hatena.ne.jp/keyword/Emacs">Emacs</a>で見ているテキストを他のアプリ(ブラウザ)などに持っていきたいときは<a class="keyword" href="http://d.hatena.ne.jp/keyword/macos">macos</a>の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AF%A5%EA%A5%C3%A5%D7%A5%DC%A1%BC%A5%C9">クリップボード</a>に保存しておきたいので、その時は以下のコマンドを実行します。</p>

<p><code>M-| + pbcopy RET</code></p>

<p><a href="https://gyazo.com/da2496b03b36cf4e9497e6b931e3cfff"><video alt="Video from Gyazo" width="1000" autoplay muted loop playsinline controls><source src="https://i.gyazo.com/da2496b03b36cf4e9497e6b931e3cfff.mp4" type="video/mp4" /></video></a></p>

<p>前はEmasc上でテキストコピーしたときに自動で<a class="keyword" href="http://d.hatena.ne.jp/keyword/macos">macos</a>の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AF%A5%EA%A5%C3%A5%D7%A5%DC%A1%BC%A5%C9">クリップボード</a>にも持っていくようにする設定を入れていたが、その設定が壊れたのでこの手法に変更。</p>

<p>参考</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Femacs.stackexchange.com%2Fquestions%2F10900%2Fcopy-text-from-emacs-to-os-x-clipboard" title="Copy text from Emacs to OS X clipboard" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://emacs.stackexchange.com/questions/10900/copy-text-from-emacs-to-os-x-clipboard">emacs.stackexchange.com</a></cite></p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: 新しい技術を学ぶときには雑にドキュメントや本を全部読む
BASENAME: 2020/08/26/080609
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 08/26/2020 08:06:09
-----
BODY:
<p>新しい技術を学ぶときには、とりあえず公式ドキュメントとその技術に関する本を買って一旦雑に全部読む。</p>

<p>Getting-Startedだけを読んである程度自分の要件にあう使い方がわかったらすぐ使ってあとはわからなくなったらググりながらやるっていう風に進めることもたまにあるけど、そうすると大体「わかっていないことがわかっていない」状態になって後半になって苦しむことがある。</p>

<p>完全に全てを理解し覚えるのは無理だけど、とりあえず</p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: 社内ドキュメントをひたすら読む
BASENAME: 2020/08/17/070302
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 08/17/2020 07:03:02
-----
BODY:
<p>転職してから2週間、研修や<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%B5%A5%A4">アサイ</a>ンされたタスクの他に自分で意識して取り組んでいたのが「社内ドキュメントをひたすら読む」ということ。</p>

<p>社内ドキュメントが指すのは、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Google%20Drive">Google Drive</a>の共有ドライブに保存されている各種資料や開発チームで利用している<a class="keyword" href="http://d.hatena.ne.jp/keyword/WIKI">WIKI</a>、タスク管理のツールのチケットなど。</p>

<p>この作業に取り組んでいる理由は以下である。</p>

<ul>
<li>誰がどんな情報を持っているのかを把握する</li>
<li>ドキュメントになっている情報と人から取るしかない情報を把握する</li>
<li>会社の文化、現状の課題を把握する</li>
</ul>


<h1>誰がどんな情報を持っているのかを把握する</h1>

<p>会社に入社したばかりだと、誰がどんなことをできる人でどんな情報を持っている人なのかわからない。</p>

<p>そこで社内ドキュメントをひたすら多読(タイトルと目次だけ見て、興味があるのだけ本文も読む)していると、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3">アーキテクチャ</a>について詳しい人、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby</a>について詳しい人、フロントエンドに詳しい人、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3">ドメイン</a>知識について詳しい人などがだいたい把握できてくる。</p>

<p>誰が何について詳しいかを知れば、困ったときにその人に質問すれば良いと分かるので仕事を進める上でスムーズなコミュニケーションができる。</p>

<h1>ドキュメントになっている情報と人から取るしかない情報を把握する</h1>

<p>いまコロナの影響もあって完全なリモートワークで自分は仕事をしているのですが、そこで課題となるのが必要な情報をどうスムーズに得るかということ。</p>

<p>そこで社内ドキュメントツールやGoogleDriveの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8">ディレクト</a>リ構成を把握し、そこにあるドキュメントをタイトルだけでも軽く見ておくと、いまの時点でどんな情報がドキュメント化されていてどんな情報はされていないかの大体の予測がつくようになる。また予測がつかなくても大体この検索ワードとこの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8">ディレクト</a>リを見てなければ人に聞くしかないと判断することもできる。</p>

<h1>会社の文化、現状の課題を把握する</h1>

<p>急成長中のスタートアップというのは、文化と課題のカタマリだと僕は理解している。</p>

<p>いままで行ったプロジェクトや会社にどんな課題があるかなどを、議事録や全体会でこれまで共有された資料などから把握することができ、そこでどんな議論と意思決定がされたのか読むことで会社の中でどんな文化が育っているのかを把握することができる。</p>

<p>現状の課題を理解することで、自分がどんなことをどのようなスピード感でやらないといけないか考えることができる。</p>

<p>文化というのは本来一緒に仕事を進める上で段々と染み込んでいくものだが、リモートワークであることでリアルでの接点が少なくどうしても文化を染み込ませるスピードが遅くなるという危機感があったので、まずドキュメントという接点に多く触れることでそこから文化を理解しようと努めていた。</p>

<p>今の会社では、週一で各部署の進捗報告を行う全社会、4半期ごとの振り返りを行う全社会があり、その資料や録画の映像がGoogleDriveに残っていたおかげで3ヶ月前や半年前の状況がだいたい把握できて「じゃあこれから自分は何をすべきなのか」を考えることがやりやすくなった。</p>

<h1>最終的には人</h1>

<p>ほんとに重要な情報というのはどんなドキュメントを整備しても、最終的には人が持っている事が多い。</p>

<p>今回「ドキュメントをひたすら読む」を行ったのは、すべてをドキュメントから読み取ろうとするのではなく、人から情報を得るための足がかりをまず得るというのが大きな目的で行っていた。</p>

<p>一旦ドキュメントをひらすら読むことによって会社に対する解像度も上がってきたので、これを元により多くの人とコミュニケーションをとって価値ある仕事でできるようにしていきたい。</p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: 社内の開発者用ドキュメントを雑に全部読む
BASENAME: 2020/08/12/062456
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 08/12/2020 06:24:56
-----
BODY:
<p>CBcloudに転職して1週間、研修が入ったり最初のタスクが<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%B5%A5%A4">アサイ</a>ンされてそのタスクを進める傍ら、会社の現状をキャッチアップするという意味で「社内の開発者用ドキュメントを雑に全部読む」というのを個人的好奇心でやっていました。</p>

<p>CBcloudの開発チームは<a class="keyword" href="http://d.hatena.ne.jp/keyword/esa">esa</a>というドキュメントツールを使って情報共有がされていますがまだ導入から数ヶ月程度しかたっていないのでコンテンツ量が200ページ程度でした。その程度あれば1週間あれば隙間時間で全部雑に読むくらいは出来そうだな〜と思ったのが最初のきっかけですが、実行する目的となったのは</p>

<h1></h1>

-----
--------
AUTHOR: arakaji-yuu
TITLE: 2020年8月1日をもって、PaykeからCBcloudに転職しました
BASENAME: 2020/08/04/092753
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 08/04/2020 09:27:53
-----
BODY:
<p>2020年8月1日をもって、約３年半ほど在籍していましたPaykeから、CBcloud(シービー<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%A6%A5%C9">クラウド</a>)に転職しました。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%CE%B0%B5%E5">琉球</a><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A5%E9%A5%AF%A5%C6%A5%A3%A5%D6">インタラクティブ</a>→Payke→CBcloudとキャリアとしてはこれで３社目になります。</p>

<h1>CBcloudとはどういう会社？</h1>

<p>東京に本社を持つ、物流業界の課題解決を目指したスタートアップです。</p>

<p>サービスは、荷物を運んでほしい人と運んでくれる運送ドライバーをマッチングするプラットフォームである「PickGo」、宅配業者の業務を効率化するシステム「SmaRyu Post」、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B1%BF%C1%F7%B6%C8">運送業</a>者向けの業務支援システム「SmaRyu Truck」、運送ドライバーさんにアプリで買い物代行を依頼できる「PickGo 買い物代行」など様々なサービスを提供しています。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fcb-cloud.com" title="CBcloud株式会社" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://cb-cloud.com">cb-cloud.com</a></cite></p>

<h1>なぜCBcloudに転職したの？</h1>

<p>転職を決めた理由はいくつかありますが、大きな点は以下の3つになります。</p>

<ul>
<li>CBcloudが沖縄支社を立ち上げた</li>
<li>物流というニーズが大きくかつ課題も深い産業</li>
<li>強そうな人たちがいっぱいいる</li>
</ul>


<h2>CBcloudが沖縄支社を立ち上げた</h2>

<p>2020年4月1日に沖縄支社を設立しました。</p>

<p><a href="https://cb-cloud.com/news/Xo3I-hUAAIP3C3gb">https://cb-cloud.com/news/Xo3I-hUAAIP3C3gb</a></p>

<p>僕も妻も沖縄で生まれ育ち両親も沖縄もいるため、生活の拠点として子育てする上で一番沖縄がいいと考えています。
しかし僕はソフトウェアエンジニアとして「つよつよになりたい！」ですし、より変化と成長が早い環境が好きだと思っています。
なので、キャリアの選択として常に「沖縄がソフトウェアエンジニアにとって、そして変化や成長の早い環境が好きな人にとって最高の場所になることに貢献できるか？」を考えています。</p>

<p>CBcloudを通して物流というすべての人のためのインフラの大きな課題解決に貢献し、沖縄支社をその課題解決のための重要な拠点として成長させることに貢献できれば、結果的に「沖縄でソフトウェアエンジニアにとって、そして変化や成長の早い環境が好きな人にとって最高の場所」の一つを作れることができると考えました。</p>

<p>CBcloudは社長が沖縄出身であり、かつプログラミングもできるエンジニアでもあるので、面談の時にも「沖縄にいる優秀なエンジニアが東京に行かなくてもやりがいがある仕事ができるようにしたい」という話をしてくれて、沖縄に対する想いは同じようなモノを持っていると感じました。</p>

<h2>物流というニーズが大きくかつ課題も深い産業</h2>

<p>日本の物流というのは、社会のインフラであり、これからも非常に早いペースでニーズが増えているにも関わらず、深刻なドライバー不足という大きな課題を抱えています。</p>

<p>ドライバー不足の原因は、収入の不安定さや労働環境の過酷さなど多数あります。</p>

<p>CBcloudは「ドライバーファースト」の理念を掲げ、ドライバーと荷主をマッチングするプラットフォームによる「仕事の選びやすさ」や「仕事の安定的な供給」を提供、SmaRyu PostやSmaRyu Truckなどでドライバーの複雑な仕事を誰でも簡単に行えるようにするシステムを提供することで「効率化」や「ドライバー業務の参加しやすさ」を作り出し、ドライバーという仕事をより価値の高いものにしようとしていて、非常にやりがいのある仕事だと思いました。</p>

<p>また、最近の僕のエンジニアとしての理想像として「特定の業界への深い理解 x ソフトウェアエンジニアリングの高い技術力」というものをイメージしています。
業界への知識が浅くてよく、技術力だけ解決可能な課題というのはGAFAMが最終的には持っていける市場だと考えていますが、業界に深い知識を持ちかつ深く入り込んで地道にネットワーク作ることによってやっと解決できるような課題はGAFAMでもなかなか取れません。</p>

<p>その点CBcloudは<a class="keyword" href="http://d.hatena.ne.jp/keyword/ANA">ANA</a> Cargoが提供する空港間配送との連携をPickGoに取り入れることによって、ドライバーさんとのマッチングだけでは達成できなかった長距離配送の低価格と配送スピードを実現しており、見ていて「すごいかっこいいな！」と思いました。</p>

<p>僕自身もまずはソフトウェアエンジニアとしての価値を出しつつも、ゆくゆくは物流という業界への深い理解とネットワークを作って、技術だけでは解決できないような課題さえ解決できるようになりたいと考えたのも理由の一つです。</p>

<h2>強そうな人がいっぱいいる</h2>

<p>面談を通して出会った方々、そしてCBcloudに関わってそうな人を<a class="keyword" href="http://d.hatena.ne.jp/keyword/SNS">SNS</a>などで探して観察してみても、エンジニアもそうでない人も非常に優秀そうな方々ばかりでした。</p>

<p>自分の成長というのは周りにどんな人がいるか決まると思っているので、自分よりもはるかに優秀な人がいる、そしてそんな人たちが集まってくるような環境に常に身を置きたいと考えていて、その環境がCBcloudには確実にあると感じたのも決め手の一つです。</p>

<h1>CBcloudでなにをやるの？</h1>

<p>今の所、まずはサーバーサイドの開発と<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%A6%A5%C9">クラウド</a>インフラの設計・改善・運用あたりをしていくことになるだろうと思っています。
Paykeでは<a class="keyword" href="http://d.hatena.ne.jp/keyword/PHP">PHP</a> + Azureでしたが、CBcloudではメインが<a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby</a> + <a class="keyword" href="http://d.hatena.ne.jp/keyword/AWS">AWS</a>になりそうです。
Azureは好きなのでいま開発している個人プロダクトはAzureを使ってキャッチアップはそれを通して続けつつ、もしAzureの方が最適な<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E6%A1%BC%A5%B9%A5%B1%A1%BC%A5%B9">ユースケース</a>があればCBcloudでも採用できるようにしておきたいなーと個人的には思っています。</p>

<p>また沖縄支社の最初のエンジニアということもありますので、エンジニア組織を作るための採用活動なども積極的に行って行きたいと思います。
興味のある方がいらっしゃいましたらお気軽にお声がけください！</p>

<p>個人的な野望として、沖縄から日本、そして世界に使われるようなCBcloudの新たなプロダクトを生み出し育てたいとも思っているので、そのチャンスは常に探って行きたいと思っています。</p>

<h1>さいごに</h1>

<p>CBcloudのオンラインミートアップがあります！</p>

<p>沖縄支社ではカスタマーサポートとエンジニアの採用を行っていますので、もし少しでも興味のある方は以下の<a class="keyword" href="http://d.hatena.ne.jp/keyword/Wantedly">Wantedly</a>の記事からお気軽にご参加くださーい！</p>

<p>エンジニア向けはこちら</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.wantedly.com%2Fprojects%2F493212" title="沖縄/東京エンジニアMeetup！興味ある方めんそーれ！ by CBcloud株式会社" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.wantedly.com/projects/493212">www.wantedly.com</a></cite></p>

<p>カスタマーサポート向けはこちら</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.wantedly.com%2Fprojects%2F490652" title="東京・大阪・沖縄｜拡大するCBcloudの裏側をお伝えするMeetup! by CBcloud株式会社" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.wantedly.com/projects/490652">www.wantedly.com</a></cite></p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: Clojure/leiningenでユニットテストを実行する
BASENAME: 2020/07/10/162545
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 07/10/2020 16:25:45
-----
BODY:
<p>leiningenを使っているプロジェクトで、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E6%A5%CB%A5%C3%A5%C8%A5%C6%A5%B9%A5%C8">ユニットテスト</a>を実行する方法について整理します。</p>

<h1><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E6%A5%CB%A5%C3%A5%C8%A5%C6%A5%B9%A5%C8">ユニットテスト</a>を実行する</h1>

<pre class="code :bash" data-lang=":bash" data-unlink>$ lein test
</pre>


<h1>特定のnamespaceの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E6%A5%CB%A5%C3%A5%C8%A5%C6%A5%B9%A5%C8">ユニットテスト</a>だけ実行する</h1>

<pre class="code :bash" data-lang=":bash" data-unlink>$ lein test sample-app.core-test</pre>


<h1>テストをメタキーワードでグルーピングして、そのグループのテストだけを実行する</h1>

<p>project.cljにtest-selectorsを追加する</p>

<pre class="code :project.clj" data-lang=":project.clj" data-unlink> .
 .
 :test-selectors {:api :api
                  :model :model
                  :core :core)}
 .</pre>


<p>テストコードにキーワードを指定する</p>

<pre class="code :test/sample_app/core_test.clj" data-lang=":test/sample_app/core_test.clj" data-unlink> (ns ^:core sample-app.core-test
    (require [clojure.test :refer :all]
        [sample-app.core :refer :all]))
 
 (deftest ^:api a-test
    (testing &#34;TEST A&#34; 
        (is (= 1 (+ 1 1)))))
        
  (deftest ^:model b-test
    (testing &#34;TEST B&#34; 
        (is (= 1 (- 2 1)))))</pre>


<p>キーワードを指定して  lein testを実行する</p>

<pre class="code :bash" data-lang=":bash" data-unlink># :modelメタキーワードが設定されたb-testだけ実行
$ lein test :model 
 
# :apiメタキーワードが設定されたa-testだけ実行
$ lein test :api
 
# :coreメタキーワードが設定されたsample-app.core-testに含まれるa-testとb-testが実行される
$ lein test :core
</pre>


<h1>特定の関数だけテストする</h1>

<pre class="code" data-lang="" data-unlink>$ lein test :only sample-app.core-test/a-test</pre>


-----
--------
AUTHOR: arakaji-yuu
TITLE: フロントエンド開発における課題を問い直す〜2020年6月版〜
BASENAME: 2020/06/25/152128
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 06/25/2020 15:21:28
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/a/arakaji-yuu/20200625/20200625152514.png
-----
BODY:
<p>2020年6月21日(日)「チャリティカンファレンス沖縄2020 Vol.1 Frontend編」というイベントで、「フロントエンド開発における課題を問い直す」というタイトルで登壇させていただきました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fre-build.connpass.com%2Fevent%2F179268%2F" title="チャリティカンファレンス沖縄2020 Vol.1 Frontend編(オンライン) (2020/06/21 11:00〜)" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://re-build.connpass.com/event/179268/">re-build.connpass.com</a></cite></p>

<p><figure class="figure-image figure-image-fotolife" title="フロントエンド開発における課題を問い直す"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/a/arakaji-yuu/20200625/20200625152514.png" alt="f:id:arakaji-yuu:20200625152514p:plain" title="f:id:arakaji-yuu:20200625152514p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>フロントエンド開発における課題を問い直す</figcaption></figure></p>

<p>今回発表資料の準備をするにあたって、まず話したいことをテキストでひたすら書いていき、全て書ききったらそれをもとに<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D1%A5%EF%A5%DD">パワポ</a>のスライドに情報を圧縮するというアプローチで作っていたのですが、せっかく書いたテキストをそのまま捨てるのはもったいないので多少加筆修正した上でこちらのブログにて公開することにしました。</p>

<p>このイベントに参加出来なかった人にも登壇内容が届いて、なにかの参考になれば幸いです。</p>

<hr />

<h1>フロントエンド開発における課題を問い直す〜2020年6月版〜</h1>

<p><iframe id="talk_frame_646560" src="//speakerdeck.com/player/7a7ffa3a9567417ba2e44f2d7ae02afa" width="710" height="399" style="border:0; padding:0; margin:0; background:transparent;" frameborder="0" allowtransparency="true" allowfullscreen="allowfullscreen" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe> <cite class="hatena-citation"><a href="https://speakerdeck.com/ug/issues-about-frontend-development">speakerdeck.com</a></cite></p>

<h1>なぜこのテーマを選んだか？</h1>

<p>登壇すること自体は1ヶ月以上前から決まっていたのですが、登壇テーマがなかなか決まらずグズグズしていると当日のスケジュールが発表されました。
それを見てみると自分がトップバッターの一人になっていて、かつKey noteという立て付けになっているので、これはやばいぞと思いました笑</p>

<p>せっかくKey noteという立場をいただけたので、僕の方では特定の技術トピックについてお話するのではなく、現在のフロントエンド開発の全体像が見えるようなお話をして、それから他のセッションを聞いて深堀りをできるような形にしていきたいと思います。</p>

<p>では全体像をどういう視点で見ていくかという話なんですが、現在のフロントエンド開発は様々な技術が出てきており、それらはすべて開発における課題を解決するために生まれています。</p>

<p>僕もエンジニアとして技術を学ぶときに「この技術がおもしろそう！！→この技術はこの課題を解決するために生まれたのか〜」というテク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%CE%A5%ED">ノロ</a><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B8%A1%BC">ジー</a>ファーストなきっかけで学ぶ事が多いのですが、本質的にはまず課題があり、その課題に対して技術でどう解決するかという、イシューファーストなアプローチを取るべきです。</p>

<p>そのため本セッションでは、まずフロントエンド開発における課題を改めて問い直して整理し、その課題に対していまどういう技術が解として存在するのかという話をしていきたいと思います。</p>

<h1>課題の定義</h1>

<p>ではフロントエンド開発における課題はこれです！という話をする前に、まず課題というのがどこから生まれるのかという話をさらっとしておきたいです。</p>

<p>国語辞典で「課題」と調べると以下のようにでます。</p>

<pre><code>１ 与える、または、与えられる題目や主題。
２ 解決しなければならない問題。果たすべき仕事。
</code></pre>

<p>「解決しなければならない問題」というのはわかりやすい定義ですね。じゃあフロントエンド開発における解決しなければならない問題っていうのはなぜ解決しないといけないのか？</p>

<p>これを僕は、
「進みたい方向に進みたい速度で進みたいが、それが出来ない障害があるので、解決しないといけない」と考えています。</p>

<p>そう考えるとまず課題を知るにはそもそもの進みたい方向というのを知る必要があることがわかります。</p>

<h1>フロントエンド開発の目的はユーザーにより良いUXを届けること</h1>

<p>進みたい方向というのは、フロントエンド開発における目的になります。
フロントエンドというのは、システムとユーザーが接する部分のUIであり、その目的は良いUXを提供することになります。
じゃあ良いUXってなにか？という話になるんですが、UXの品質評価方法のひとつとして、UX<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%CF%A5%CB%A5%AB%A5%E0">ハニカム</a>という手法があります。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fblog.btrax.com%2Fjp%2Fux-evaluation%2F" title="UXハニカム - UXデザインの正しい品質評価方法 -" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://blog.btrax.com/jp/ux-evaluation/">blog.btrax.com</a></cite></p>

<p><img src="https://paper-attachments.dropbox.com/s_873BB0FCD01D0D5093C40773CB16C9E1C557C683E45C0452DC14CBC868624231_1592609245332_UX.png" alt="" /></p>

<p>これはプロダクトやサービスが提供するUXの評価軸を、useful、desirable、accessible、credible、findable、usableの6つの項目に分け、それぞれの項目を5段階評価をし、その総合点でUXを評価するという手法です。</p>

<p>各項目は以下の様に定義されています。</p>

<p><strong>1. Useful – 役に立つ</strong>
提供されるプロダクトやサービスがユーザーの役に立っているか。彼らのニーズを満たしているか。もしそれがユーザーの目的を達成していなければ、ユーザー体験としてはレベルが低い。</p>

<p><strong>2. Desirable – 好ましい</strong>
プロダクトの見た目や雰囲気がユーザーにとって好ましいかどうか。ここに評価軸においては”デザイン要素”はなるべく少ない方が優れているとされる。</p>

<p><strong>3. Accessible – アクセスしやすい</strong>
体の不自由な方や、異なる制限のあるユーザーにとっても使いやすい体験がデザインされているかどうか。<a class="keyword" href="http://d.hatena.ne.jp/keyword/%BF%A7%CC%D5">色盲</a>の方でも認識しやすいサインなどもその例の一つ。</p>

<p><strong>4. Credible – 信頼できる</strong>
企業やプロダクトが信頼できるものであるかどうか。例えば無名な企業よりも、著名なブランドの製品であれば、最初からユーザーの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%BF%B4%CD%FD%C5%AA">心理的</a>ハードルが下がり、自ずと利用体験がよくなりがち。</p>

<p><strong>5. Findable – 探しやすい</strong>
情報やコンテンツが見つけやすい。短期間でユーザーが求める情報にたどり着ければ、利用している際のストレスが下がる。サイトであればページの構造、駅や公共の建物であれば、目的の場所に辿り着きやすいなど。</p>

<p><strong>6. Usable – 使いやすい</strong>
そして<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E6%A1%BC%A5%B6%A5%D3%A5%EA%A5%C6%A5%A3">ユーザビリティ</a>の高さ。利用していて必要以上に複雑で使いにくい場合はユーザー体験の価値が下がってしまう。例えば家電製品であれば、説明書を読まなければ使い方がわからない時点で減点対象になるであろう。</p>

<p>つまり、UXを最大化させることがUI/フロントエンド開発における目的であるならば、これら6つを高めようとすると発生する課題がフロントエンド開発における課題となります。</p>

<p>では、やっと本題です。フロントエンド開発をすると発生する課題とはなんでしょうか？</p>

<h1>正解がわからない</h1>

<p>最も大きな課題の一つはUXの6つの指標を高めるためにどうすれば良いという正解が誰にもわからないことです。自分たちがリリースしたプロダクトが本当にユーザーの役に立つのか、使いやすいのか、ユーザーに好んでもらえるのかということは、実際にリリースして反応を見てみるまでわかりません。</p>

<h1>マルチデ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%B9">バイス</a>への対応</h1>

<p>ソフトウェアのUIは、10数年前まではPCでの利用のみを対象にしていればよかったのですが、現代ではPCだけでなく、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%DE%A1%BC%A5%C8%A5%D5%A5%A9%A5%F3">スマートフォン</a>、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%BF%A5%D6%A5%EC%A5%C3%A5%C8">タブレット</a>の利用まで対象にしないといけません。そしてそれぞれのデ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%B9">バイス</a>のOSの違いや、スペックの違い、利用シーンでのネットワーク環境の違いなど様々な状況を考慮に入れた開発をしていく必要があります。</p>

<h1>ユーザーの期待値の増加</h1>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%DE%A1%BC%A5%C8%A5%D5%A5%A9%A5%F3">スマートフォン</a>の普及によって、一般の人もアプリという形でソフトウェアを日常で使うことが普通なことになってきました。そしてみんなが使っているものといえば、<a class="keyword" href="http://d.hatena.ne.jp/keyword/instagram">instagram</a>、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Tiktok">Tiktok</a>、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Netflix">Netflix</a>など世界No1を取ったものばかりです。その世界トッ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%EC%A5%D9">プレベ</a>ルに洗練されたプロダクトを日常で使い目が肥えたユーザーに、それよりも劣るUXを提供してしまってはなかなか使ってもらう、使い続けてもらうに至るのは難しいでしょう。
つまりUXにおいては、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%BB%F1%CB%DC%CE%CF">資本力</a>においてはるかに劣っていながらも、必然的に世界トッ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%EC%A5%D9">プレベ</a>ルのサービスの基準と戦うことが宿命付けられています。
また<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%DE%A5%DB">スマホ</a>アプリと接する時間が増えることで、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%DE%A5%DB">スマホ</a>でWebアプリを使う時に関しても<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%DE%A5%DB">スマホ</a>アプリと同等のUXが求められるようになってきました。</p>

<h1>正解がわからないという課題に立ち向かう手段</h1>

<p>正解がわからないという課題に対して立ち向かうには基本的には「早く小さくリリースして、フィードバックを得て、そのフィードバックをもとにまた早く小さくリリースする」を繰り返すしかありません。これがいま良く言われている<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%B8%A5%E3%A5%A4%A5%EB">アジャイル</a>開発で行われていることでもあります。
では、みんなが<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%B8%A5%E3%A5%A4%A5%EB">アジャイル</a>開発をしている時代においてチーム力、開発力として差がでるところは以下の点になります。</p>

<ul>
<li>単位時間あたりの試行回数を増やせるか？</li>
<li>データドリブンな意思決定を行う</li>
</ul>


<h2>単位時間あたりの試行回数を増やす</h2>

<ul>
<li>限られた人数での開発効率を上げる</li>
<li>コード量が増えても開発効率を落とさないようにする</li>
<li>人数が増えても開発効率を落とさないようにする</li>
</ul>


<h2>データドリブンな意思決定を行う</h2>

<ul>
<li>ユーザーの利用動向に関するデータ収集</li>
<li>データの可視化</li>
</ul>


<p>では、上記を行うためにいまどのような技術がソリューションとして存在するのか？</p>

<h1>Firebaseはフロントエンドエンジニアの必修項目のひとつ</h1>

<p>「単位時間あたりの試行回数を増やす」、「データドリブンな意思決定を行う」のための手段を総合的に、かつ非常に低価格、そして簡単な方法で提供しているサービスは僕の知る限りFirebaseにおいてありません。</p>

<p>Firebaseのすべての機能を必ず使う必要はありませんが、Firebaseで何が出来て何ができないのかを把握して戦略を持って利用することができれば大きな武器になる、というよりもむしろ戦略を持って利用できないために不要なコストを書けて開発しなくてもよいものに開発リソースをかけてしまい競合に遅れを取るということにことになりかねません。</p>

<h2>単位時間あたりの試行回数を増やすことにどう貢献するのか？</h2>

<p>「単位時間あたりの試行回数を増やす」ために、限られた人数での開発効率をあげる、コード量が増えても開発効率を落とさない、人数が増えても開発効率を落とさない、という3つの点が重要です。</p>

<p>この3つの課題を同時に解消するための手段は、「自分たちで作らない部分を増やすこと」です。</p>

<p>Firebase AuthenticationというFirebaseが提供する認証サービスを例に考えてみましょう。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Ffirebase.google.com%2Fproducts%2Fauth%3Fhl%3Dja" title="Firebase Authentication | シンプルな無料のマルチプラットフォーム ログイン" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://firebase.google.com/products/auth?hl=ja">firebase.google.com</a></cite></p>

<p>ユーザー認証の部分を自分たちでス<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%C3%A5%C1">クラッチ</a>で作らずにFirebase Authenticationを使うという戦略を取れば、その開発コストが大幅に減少し、その分他のアプリ固有の価値を生む機能や改善に開発リソースを使うことができ、それによって開発効率が向上します。</p>

<p>認証機能を自分たちで全て書くよりもFirebase Authenticationを使う方がコード量ははるかに小さくなるため、開発効率を落とさないで済むことができます。</p>

<p>人数が増えると仕様のキャッチアップをするためのコミュケーションコスト増加によって開発効率が落ちていくのですが、自前で作らずFirebase Authenticationを使う選択をしたことで仕様のキャッチアップはFirebase自体のドキュメントを読むだけで完了します。</p>

<p>もちろん外部サービスを利用する場合はそのサービスで出来ないことは出来ないこと、そしてそのサービスの提供が終了してしまうリスクなども考慮した上で利用を検討するべきですが、自前で作らずに既存のサービスを利用することで作らないモノを増やすことは開発効率を上げるための強力な手段になります。</p>

<p>Firebase Authenticationは認証というアプリ必要な単機能を提供してくれるものですが、もっと大胆に「作らない部分を増やす」ことに貢献するFirebaseのサービスがCloud Firestoreです。</p>

<p>Cloud Firestoreは<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%A6%A5%C9">クラウド</a>上で<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DB%A5%B9%A5%C6%A5%A3%A5%F3%A5%B0">ホスティング</a>されたNoSQLデータベースですが、<a class="keyword" href="http://d.hatena.ne.jp/keyword/iOS">iOS</a>アプリ、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Android">Android</a>アプリ、Webのフロントエンドなどのクライアントから<a class="keyword" href="http://d.hatena.ne.jp/keyword/SDK">SDK</a>経由で直接アクセスできるという特徴があります。</p>

<p>さらにリアルタイムアップデートという機能によって各デ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%B9">バイス</a>から更新されたデータがリアルタイムで各デ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%B9">バイス</a>に共有される機能、オフラインサポート、スケーラビリティの高さという特徴もかねそ兼ね備えています。</p>

<p>コレをうまく活用すれば、いままで単純なデータの読み書きだけのために行っていたサーバーサイドの<a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a>開発やデータ同期のためのプログラム、そしてスケーラビリティ確保のためのインフラ運用などの大部分を省く事が可能になります。</p>

<p>こちらも利用することによる<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A5%EC%A1%BC%A5%C9%A5%AA%A5%D5">トレードオフ</a>を見越した上で戦略を立てるべきですので、開発効率を上げるための自分の手札として何が出来て何ができないのかをしっかりとキャッチアップしておくべきでしょう。</p>

<h2>データドリブンな意思決定を行うことにいかに貢献するのか？</h2>

<p>開発効率をどれだけ高める事ができても、提供した機能がユーザーの体験価値をちゃんと高めたのか、またいま提供しているプロダクトのどこがユーザーの体験価値を毀損しているのかを把握することが出来なければ、正しい方向にプロダクトを改善していくことができません。</p>

<p>正しい方向にプロダクトを改善していくには、「ユーザーの利用動向をデータとして取得する」「取得したデータを可視化する」という2つが非常に重要です。</p>

<p>この点においてもFirebaseは<a class="keyword" href="http://d.hatena.ne.jp/keyword/Google%20Analytics">Google Analytics</a>という強力なツールを提供しています。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Ffirebase.google.com%2Fproducts%2Fanalytics%3Fhl%3Dja" title="Firebase 向け Google アナリティクス | 無料かつ無制限のアプリ アナリティクス" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://firebase.google.com/products/analytics?hl=ja">firebase.google.com</a></cite></p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Google%20Analytics">Google Analytics</a>の<a class="keyword" href="http://d.hatena.ne.jp/keyword/SDK">SDK</a>を入れるだけで、自分たちのアプリをどれくらいのユーザーが利用しているのか、どこで利用しているのか、どれくらいの時間利用しているのかなどがわかります。</p>

<p>より詳細なことが知りたい、たとえばどの画面を開いたのか、どのボタンを押したかなどを知りたければイベントを発火するコードを書くだけで<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%A6%A5%C9">クラウド</a>上に記録されていきます。</p>

<p>そしてそれらのデータが<a class="keyword" href="http://d.hatena.ne.jp/keyword/Google">Google</a> Anaticsの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C0%A5%C3%A5%B7%A5%E5">ダッシュ</a>ボード上で可視化されるので、その<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C0%A5%C3%A5%B7%A5%E5">ダッシュ</a>ボード上で自分たちのアプリが正しく改善されているのかを客観的な事実であるデータで知る事ができます。</p>

<p>同じ事ができるツールは他にもありますがそれらは有償であることや、Firebaseの場合他にもパフォーマンス監視やクラッシュレポートに関する機能なども提供されかつ無料であることを考えても、デフォルトで取る選択肢としてFirebaseの<a class="keyword" href="http://d.hatena.ne.jp/keyword/Google%20Analytics">Google Analytics</a>を利用することが多いでしょう。</p>

<p>「単位時間あたりの試行回数を増やす」、「データドリブンな意思決定をする」をするための強力な技術の一つとしてFirebaseがあるのは間違いないため、これからフロントエンド開発に関わる上でほぼ必須科目に近いぐらい身に付けないといけないモノだと考えています。</p>

<h1>マルチデ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%B9">バイス</a>への対応という課題に立ち向かう手段</h1>

<p>マルチデ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%B9">バイス</a>への対応というのはまず2つに分類することができます。</p>

<ul>
<li>Webのフロントエンドをマルチデ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%B9">バイス</a>対応をどうするのか</li>
<li>各デ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%B9">バイス</a>のネイティブアプリを提供をどうするのか</li>
</ul>


<p>今回は「Webのフロントエンドをマルチデ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%B9">バイス</a>対応すること」は、僕の理解だとどこもそこまで大きな<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%D1%A5%AF">インパク</a>トのある差異はなくて「レスポンシブ対応していこうな」というところだと思っています。</p>

<p>各デ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%B9">バイス</a>のネイティブアプリを提供するかどうかという点は、今回はわかりやすくするため以下の3つのプラットフォーム上に、それぞれ用のフロントエンド(モバイルの場合はネイティブアプリ)の提供をどのようにするのか？という風に考えます。</p>

<ul>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/Android">Android</a>端末</li>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/iOS">iOS</a>端末</li>
<li>Web</li>
</ul>


<p>これは「それぞれのプラットフォーム上のアプリ同士でどのくらいコードを共有するのか？」を考えることです。</p>

<p>単純に考えると、すべてのデ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%B9">バイス</a>にそれぞれのプラットフォーム用の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0%B8%C0%B8%EC">プログラミング言語</a>(<a class="keyword" href="http://d.hatena.ne.jp/keyword/Android">Android</a>を<a class="keyword" href="http://d.hatena.ne.jp/keyword/Java">Java</a>、<a class="keyword" href="http://d.hatena.ne.jp/keyword/iOS">iOS</a>をSwift、WebをJS)でフロントエンドを書くことにした場合、すべてのプラットフォーム用に共通コードを使うよりも開発リソースが必要になります。</p>

<p>しかし、コードをすべて共<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C4%CC%B2%BD">通化</a>した場合には各プラットフォーム固有の処理を書かなければならない場合にはコードを分離して書かなければならないためコードの複雑性は高くなる傾向があります。またプラットフォーム間のコード共<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C4%CC%B2%BD">通化</a>を支援している<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク</a>が、各プラットフォームのアップデートにどれだけついていけるのか？という課題もあります。</p>

<p>これらの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A5%EC%A1%BC%A5%C9%A5%AA%A5%D5">トレードオフ</a>を見極めた上で技術選択をしていく必要がありますが、ではこの課題に向き合うための技術はなにがあるでしょうか？</p>

<h1>Flutter、<a class="keyword" href="http://d.hatena.ne.jp/keyword/iOS">iOS</a>と<a class="keyword" href="http://d.hatena.ne.jp/keyword/Android">Android</a>のコード共<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C4%CC%B2%BD">通化</a>の解のひとつ</h1>

<p>Flutterは<a class="keyword" href="http://d.hatena.ne.jp/keyword/Google">Google</a>が提供している<a class="keyword" href="http://d.hatena.ne.jp/keyword/iOS">iOS</a>と<a class="keyword" href="http://d.hatena.ne.jp/keyword/Android">Android</a>アプリを<a class="keyword" href="http://d.hatena.ne.jp/keyword/Dart">Dart</a>という言語で、共通のプログラムで書く事ができる技術の一つです。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fflutter.dev%2F" title="Flutter - Beautiful native apps in record time" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://flutter.dev/">flutter.dev</a></cite></p>

<p>ただし共<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C4%CC%B2%BD">通化</a>できるのはあくまでUIと<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D3%A5%B8%A5%CD%A5%B9%A5%ED%A5%B8%A5%C3%A5%AF">ビジネスロジック</a>などプラットフォームに依存しないコードの部分であり、カメラなどの機能はプラットフォーム固有のコードを<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3">プラグイン</a>という形で書く必要があります。ただ良く使う機能のほとんどは<a class="keyword" href="http://d.hatena.ne.jp/keyword/OSS">OSS</a>の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3">プラグイン</a>が提供されているので凝ったことをしないのであればそれをインストールして使うことで解決するでしょう。</p>

<p>今回のカンファレンスでは登壇者がいませんが、<a class="keyword" href="http://d.hatena.ne.jp/keyword/iOS">iOS</a>と<a class="keyword" href="http://d.hatena.ne.jp/keyword/Android">Android</a>でコードを共<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C4%CC%B2%BD">通化</a>するというアプローチを取っている技術はFlutter以外にもあります。</p>

<p>・Xamarin
・React Native
・ionic(cordova)</p>

<h2>Xamarin</h2>

<p>Xamarinは<a class="keyword" href="http://d.hatena.ne.jp/keyword/Microsoft">Microsoft</a>が提供する<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク</a>で、<a class="keyword" href="http://d.hatena.ne.jp/keyword/C%23">C#</a>という言語を使って<a class="keyword" href="http://d.hatena.ne.jp/keyword/iOS">iOS</a>と<a class="keyword" href="http://d.hatena.ne.jp/keyword/Android">Android</a>アプリを開発することができます。先日公開されたCOVID-19の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C0%DC%BF%A8">接触</a>確認アプリも、実はXamarinで作られています。もしインストールしていない方がいればぜひインストールしてみてください。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdocs.microsoft.com%2Fja-jp%2Fxamarin%2Fget-started%2Fwhat-is-xamarin" title="Xamarin とは - Xamarin" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://docs.microsoft.com/ja-jp/xamarin/get-started/what-is-xamarin">docs.microsoft.com</a></cite></p>

<p>XamarinとFlutterの違いとして特徴的なのが、Flutterは「UIとロジックの共<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C4%CC%B2%BD">通化</a>が目的」なのに対して、Xamarinは「ロジックの共<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C4%CC%B2%BD">通化</a>が目的、だけどUIも共<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C4%CC%B2%BD">通化</a>をしたければできる」という違いです。</p>

<p>Xamarinは、Anroidや<a class="keyword" href="http://d.hatena.ne.jp/keyword/iOS">iOS</a>の各プラットフォーム固有の<a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a>と<a class="keyword" href="http://d.hatena.ne.jp/keyword/C%23">C#</a>の<a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a>で1対1の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DE%A5%C3%A5%D4%A5%F3%A5%B0">マッピング</a>を行っているので、<a class="keyword" href="http://d.hatena.ne.jp/keyword/C%23">C#</a>から直接プラットフォーム固有の機能を使うことができます。
Xamarin.Formというライブラリを使うと<a class="keyword" href="http://d.hatena.ne.jp/keyword/iOS">iOS</a>と<a class="keyword" href="http://d.hatena.ne.jp/keyword/Android">Android</a>で共通コードを使ってUIを作ることもできますが、全く別々のコードを使いつつロジックだけ共<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C4%CC%B2%BD">通化</a>するというアプローチも取れます。</p>

<h2>React Native</h2>

<p>こちらはReact.jsというWeb用のViewライブラリを<a class="keyword" href="http://d.hatena.ne.jp/keyword/iOS">iOS</a>と<a class="keyword" href="http://d.hatena.ne.jp/keyword/Android">Android</a>でも同じ思想で使えるようにしたものです。こちらはJSを使って<a class="keyword" href="http://d.hatena.ne.jp/keyword/iOS">iOS</a>と<a class="keyword" href="http://d.hatena.ne.jp/keyword/Android">Android</a>のUIとロジックを共<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C4%CC%B2%BD">通化</a>して作ることができます。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Freactnative.dev%2F" title="React Native · A framework for building native apps using React" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://reactnative.dev/">reactnative.dev</a></cite></p>

<p>JSでUIを書くにも関わらず実際に実行されているのはネイティブのUI<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8">コンポーネント</a>なので、ネイティブアプリ水準のパフォーマンスが期待できます。</p>

<p>FlutterやXamarinとの違いは、すでにウェブのフロントエンドを作るのと同じReact.jsと<a class="keyword" href="http://d.hatena.ne.jp/keyword/JavaScript">JavaScript</a>をネイティブアプリの開発利用できるようにすることで、Webのフロントエンド開発者を、学習コストを減らした形でモバイルのネイティブアプリの開発者として転用可能にしている点です。</p>

<h2>ionic(cordova)</h2>

<p>ionicはFlutter、Xamarin、React Nativeと違い、JS/HTML/<a class="keyword" href="http://d.hatena.ne.jp/keyword/CSS">CSS</a>というWebのフロントエンド技術を使ってアプリを作り、それをモバイルアプリのWebView上で動かすというアプローチを取っています。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fionicframework.com%2F" title="Ionic - Cross-Platform Mobile App Development" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://ionicframework.com/">ionicframework.com</a></cite></p>

<p>これは<a class="keyword" href="http://d.hatena.ne.jp/keyword/iOS">iOS</a>、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Android">Android</a>でコードを共<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C4%CC%B2%BD">通化</a>するのはもちろんのこと、Webフロントエンドともコードを共<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C4%CC%B2%BD">通化</a>することが技術的には可能になります。(Webと共<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C4%CC%B2%BD">通化</a>する場合ネイティブの機能を提供するPluginをどううまく扱うか、またWebとモバイルアプリで製品のライフサイクルが違うなどの課題はある)</p>

<p>その<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A5%EC%A1%BC%A5%C9%A5%AA%A5%D5">トレードオフ</a>として、パフォーマンスやUXの面でネイティブアプリ同等のものを提供する難易度が高い、プラットフォーム固有の機能を使う場合はpluginという形で別でコードを書かなければならないなどの課題も出てきます。</p>

<p>このように<a class="keyword" href="http://d.hatena.ne.jp/keyword/Android">Android</a>と<a class="keyword" href="http://d.hatena.ne.jp/keyword/iOS">iOS</a>のコードを共<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C4%CC%B2%BD">通化</a>してマルチデ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%B9">バイス</a>対応を開発効率を上げながら行うための技術はいくつかあります。
各ツールのメリットデメリットを理解しつつ、共<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C4%CC%B2%BD">通化</a>するのか別々に作るのか、また共<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C4%CC%B2%BD">通化</a>するならどの部分を共<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C4%CC%B2%BD">通化</a>するためにどのツールを使うのかを考えて選択していく必要があります。</p>

<h2>ネイティブアプリを使わずにWebアプリをモバイルアプリのように提供する方法としてのPWA</h2>

<p>FlutterやXamarinなどはあくまで<a class="keyword" href="http://d.hatena.ne.jp/keyword/Android">Android</a>と<a class="keyword" href="http://d.hatena.ne.jp/keyword/iOS">iOS</a>でコードを共有してモバイルアプリを開発・提供するための技術ですが、あくまでウェブアプリとは別のコードを書く必要があります。</p>

<p>そこに対して「ウェブアプリ自体をモバイルアプリのように動かせるようにしたらいいじゃないか」というアプローチを取っているのがPWA(<a class="keyword" href="http://d.hatena.ne.jp/keyword/Progressive">Progressive</a> Web App)の技術になります。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.mozilla.org%2Fja%2Fdocs%2FWeb%2FProgressive_web_apps" title="プログレッシブウェブアプリ" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://developer.mozilla.org/ja/docs/Web/Progressive_web_apps">developer.mozilla.org</a></cite></p>

<p>PWAとはReactやFlutterのような特定の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク</a>、ライブラリのことではなく、ブラウザに搭載されている機能の組み合わせによってモバイルアプリと同等の機能を実現するための<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%B6%A5%A4%A5%F3%A5%D1%A5%BF%A1%BC%A5%F3">デザインパターン</a>のようなものです。</p>

<p>ここでいう「モバイルアプリ同等の機能」とは、以下になります。</p>

<ul>
<li>インストール可能(ホーム画面にアイコン設置、そのアイコンをタップして起動できる)</li>
<li>ネットワーク非依存(ネットがなくてもローカルにデータ保存して動かすことができる)</li>
<li>再エンゲージ可能(プッシュ通知など)</li>
</ul>


<p>モバイルデ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%B9">バイス</a>に大きく依存した機能(カメラや<a class="keyword" href="http://d.hatena.ne.jp/keyword/GPS">GPS</a>、ARなど)が必要なアプリについてはPWAのアプローチは取れないですが、Webで提供している機能をモバイルでも提供したいだけの場合、PWAのアプローチを取ることでモバイルアプリの開発リソースを全く使わずに上記３つの要件を実現することが可能になります。</p>

<h1>ユーザーの期待値の増加に立ち向かう手段として生まれたSPA</h1>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%DE%A5%DB">スマホ</a>ネイティブアプリと同等のUXをWebのフロントエンドでも実現するために考え出されたのがSPA(Single Page Application)です。</p>

<p>皆さんご存知だと思いますが、SPAは1ページのHTMLをJSで動的に書きながら画面描画をする技術のことです。</p>

<p>いままでは画面遷移やユーザーのアクションのたびに画面を全部リロードしないといけなかったものを、必要なデータだけをサーバーと通信し画面描画はリロードせずに行えるようにすることで<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%DE%A5%DB">スマホ</a>アプリのようなUXを実現可能にしました。</p>

<p>SPAによってネイティブアプリとUXで戦える土台を手に入れましたが、それによってまた新たな多くの課題を生み出しました。それが以下になります。</p>

<ul>
<li>JSでより多くを担当することによるプログラムの複雑性が増加</li>
<li>初回表示パフォーマンス悪化と<a class="keyword" href="http://d.hatena.ne.jp/keyword/Google">Google</a>インデックスが遅い問題</li>
</ul>


<h1>プログラムの複雑性の増加</h1>

<h2>画面描画処理の複雑性とパフォーマンス改善</h2>

<p>SPA以前は入力フォームのバリデーションや少しの<a class="keyword" href="http://d.hatena.ne.jp/keyword/AJax">AJax</a>やHTMLの動的変更程度だった<a class="keyword" href="http://d.hatena.ne.jp/keyword/JavaScript">JavaScript</a>の役割が、SPAによって非常に多くのことを担当せざる得なくなり、それによってコード量の増加、複雑性の増加が激しくなりました。</p>

<p>そのうち最も大きな比重を占めるのが、アプリケーションの現在の状態をもとに画面を正しく描画する、DOMを変更するというプログラムを書くことです。</p>

<p>この処理を、メンテナンスしやすく、簡単に、かつパフォーマンス高く解決しようと生まれたのがReact.jsであり、Vue.jsであり、Angular(js)になります。</p>

<h2>不具合発生率を言語レベルで減らすための策としてのTypeScript</h2>

<p>SPAにすることで画面描画処理の他にも非常に多くのロジックがプログラムに入ってきてコード量がふえてきます。コード量が増えてくると適切に設計されていなければ依存がどんどん増えていき、一つの変更によって想定外の場所に影響が及びバグが発生してしまう可能性も高くなります。</p>

<p>バグをリリース前に見つけるにはテストが必要ですが、手動テストでは時間が非常にかかってしまう上に漏れの可能性もあります。そのため本来的には自動テストを書くべきではあるのですが、UIに関するテストはテストプログラムを書く難易度が高い上にUIの変更頻度も多いため書いたプログラムが無駄になることも多々あります。</p>

<p>この<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A5%EC%A1%BC%A5%C9%A5%AA%A5%D5">トレードオフ</a>に関するリーズナブルな解としてTypeScriptが利用されるケースが増えています。</p>

<p>TypeScriptは<a class="keyword" href="http://d.hatena.ne.jp/keyword/JavaScript">JavaScript</a>にトランスパイルすることができる言語ですが、<a class="keyword" href="http://d.hatena.ne.jp/keyword/JavaScript">JavaScript</a>に型という言語仕様をつけているのが一番の特徴です。</p>

<p>関数や変数で受け取れる値の型を明示することで、間違った型の値が入った場合には<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB">コンパイル</a>時にエラーを検出してくれます。</p>

<p>これにより、値の形式(型）違いによるバグの発生を事前に防ぐ事ができる上に、不要になったコードの削除や簡単なプログラムの変更などを<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB">コンパイル</a>が通ればある程度は動くという安心感を得られるようになりました。</p>

<p>もちろんテストを置き換えるものではありませんが、コードや開発に関わる人が増えていったときにも開発効率を下げないための手段としてTypeScriptは<a class="keyword" href="http://d.hatena.ne.jp/keyword/JavaScript">JavaScript</a>をそのまま使うよりは支持されているように思えます。</p>

<h2>初回表示パフォーマンス悪化と<a class="keyword" href="http://d.hatena.ne.jp/keyword/Google">Google</a>インデックスが遅い問題</h2>

<p>SPAによって、Webアプリを利用中のUX/パフォーマンスは以前と比べて大きく改善可能になりましたが、逆に初回表示時のサーバーからレスポンスを受け取ってから画面が描画されアプリを利用できるようになるまでのパフォーマンスの悪化が問題視されるようになりました。</p>

<p>SPA以前の場合はサーバー側でHTMLを描画しているため、そのレスポンスをブラウザが受け取って描画するまでの時間は微微たるものでした。</p>

<p>しかしSPAになるとサーバーからのレスポンスは早くても、そのレスポンスをブラウザが受け取って画面を描画するためにはまず<a class="keyword" href="http://d.hatena.ne.jp/keyword/JavaScript">JavaScript</a>をすべて読みこんで解釈し、それを実行し、それから<a class="keyword" href="http://d.hatena.ne.jp/keyword/Ajax">Ajax</a>で画面描画のためのデータを取得とし、最終的に画面が描画されるため初回表示時の待ち時間が明らかに悪化していました。</p>

<p>また、Newsなどのメディ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%B5%A5%A4">アサイ</a>トの場合<a class="keyword" href="http://d.hatena.ne.jp/keyword/Google">Google</a>検索からの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%CE%AE%C6%FE">流入</a>が非常に多いため、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Google">Google</a>に正しくそして早くインデックスされることがビジネス上非常に重要なファクターになるのですが、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Google">Google</a>の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AF%A5%ED%A1%BC%A5%E9%A1%BC">クローラー</a>はJSの解釈は行うためSPAで作ったサイトでもインデックス自体はされるものの、JSの解釈をしてインデックスをされるまでの時間が通常のサイトよりも遅くなる傾向があるため、この問題も解決する必要がありました。</p>

<p>初回表示パフォーマンス悪化と<a class="keyword" href="http://d.hatena.ne.jp/keyword/Google">Google</a>インデックス遅い問題を両方解決するためのアプローチとして生まれたのが<a class="keyword" href="http://d.hatena.ne.jp/keyword/SSR">SSR</a>(サーバーサイド<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0">レンダリング</a>)という技術です。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/SSR">SSR</a>とは、SPAの場合はクライアントサイドで描画していたHTMLを、初回表示の場合のみサーバー側で描画しつつ、クライアントでJSが実行された際には現在の状態をHTMLから読み取れるようにデータを埋め込んでおく手法です。</p>

<p>これにより初回表示の場合はJSの実行またずに画面描画されつつ次のユーザーのアクションからはSPAとしてJSで画面描画を行うことを可能にしました。
初回表示をサーバーサイドでHTML描画できるようにしたことで、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Google">Google</a>クローラもJSの実行なしにコンテンツを読み取れ、早くインデックスされることを可能にしました。</p>

<p>しかしこの<a class="keyword" href="http://d.hatena.ne.jp/keyword/SSR">SSR</a>、フロントエンド用に書いてあるJSをサーバーサイドのnodejsで実行できるようにしつつ状態の受け渡しをスムーズに行う必要があるため、0からコレを作るのは非常に手間のかかるものでした。</p>

<p>それをSPAでよく使われるViewライブラリ毎に<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク</a>として解決したのが、Vue.jsのNuxt.jsであり、React.jsのNext.jsです。ちなみにAngularの方もAngular UniveralというAngularに同梱されているライブラリで<a class="keyword" href="http://d.hatena.ne.jp/keyword/SSR">SSR</a>の導入をできるようにしています。</p>

<h1>さいごに</h1>

<p>この7〜8年のフロントエンドに関わる技術の発展は凄まじく、いろんな技術が生まれては消えていきます。しかし、それらの技術はいずれも特定の課題に対する解決策として生まれています。</p>

<p>ただいま流行っている技術を追うだけでなく、そもそもいまフロントエンド開発に起こっているトッ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%EC%A5%D9">プレベ</a>ルの課題からブレイクダウンして課題を具体化し、それらの解決策としていま注目されている技術はどのように<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DE%A5%C3%A5%D4%A5%F3%A5%B0">マッピング</a>されているのかを見ていくと、自分たちのプロダクトや組織にとって必要な技術がなんなのかが見えてくると思います。</p>

<p>この発表で、いまのフロントエンド開発のなんとなく全体像が見えてくる、かつ、課題から考えるということの重要性を理解することが出来たら良いなと思っています。</p>

<p>長々とお付き合いいただきありがとうございました。</p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: D2Cの本質を考える
BASENAME: 2020/06/06/005602
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 06/06/2020 00:56:02
-----
BODY:
<h1>D2Cの本質を理解する</h1>

<p>いま「D2C」というのが<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A5%BA%A5%EF%A1%BC%A5%C9">バズワード</a>化しているが、それが意味するのは<a class="keyword" href="http://d.hatena.ne.jp/keyword/EC%A5%B5%A5%A4%A5%C8">ECサイト</a>でメーカーが直接顧客に商品を売るというだけものではない。このドキュメントでは、D2Cとして表現されている企業が伝統的なメーカーよりも非常に早い成長を遂げた重要な成長ドライバーはなんなのか？そして既存のメーカーがD2Cから得られる知見を生かしどのような戦略を実施するべきなのかを考えてみる。</p>

<h1>D2Cとは</h1>

<p>まずD2Cという言葉の定義を揃えておく必要がある。D2Cとは、メーカーが消費者へ直接商品を販売することだけを意味する言葉ではない。</p>

<p>「<a href="https://www.amazon.co.jp/D2C-%E3%80%8C%E4%B8%96%E7%95%8C%E8%A6%B3%E3%80%8D%E3%81%A8%E3%80%8C%E3%83%86%E3%82%AF%E3%83%8E%E3%83%AD%E3%82%B8%E3%83%BC%E3%80%8D%E3%81%A7%E5%8B%9D%E3%81%A4%E3%83%96%E3%83%A9%E3%83%B3%E3%83%89%E6%88%A6%E7%95%A5-NewsPicks%E3%83%91%E3%83%96%E3%83%AA%E3%83%83%E3%82%B7%E3%83%B3%E3%82%B0-%E4%BD%90%E3%80%85%E6%9C%A8%E5%BA%B7%E8%A3%95-ebook/dp/B082SL6K9P/ref=sr_1_1?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&amp;dchild=1&amp;keywords=D2C&amp;qid=1591239531&amp;s=digital-text&amp;sr=1-1">D2C　「世界観」と「テクノロジー」で勝つブランド戦略</a>」によると、D2Cの辞書的な定義は以下になる。</p>

<pre><code>新しい消費の価値観を持つミレニアル世代以下のターゲットに対し、ユニークな世界観を下敷きにしたプロダクトとカスタマーエクスペリエンス、SNSや店舗を通じた顧客とのダイレクトな対話、垂直統合したサプライチェーンを武器に、VCから資金調達を行い、短期間に急成長を目指すデジタル＆データドリブンなライフスタイルブランド
</code></pre>

<p>つまりD2Cブランドは以下のような特徴を持っていることを意味する。</p>

<ul>
<li>顧客ターゲットが<strong>ミレニアル世代</strong></li>
<li>チャネルが<strong>直接販売、</strong></li>
<li>コミュニケーションチャネルが<strong><a class="keyword" href="http://d.hatena.ne.jp/keyword/SNS">SNS</a>などのデジタルを使った顧客との直接コミュニケーション</strong></li>
<li>成長速度が<strong>指数関数的な急成長</strong></li>
<li>デジタル技術を駆使した<strong>データドリブンな意思決定とオペレーションの改善</strong></li>
<li>商品の機能ではなく、<strong>世界観(ブランド)を通した総合的な体験価値を提供する</strong></li>
</ul>


<h1>なぜいまD2Cが注目されているのか</h1>

<p>Casperという2014年に登場した<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DE%A5%C3%A5%C8%A5%EC%A5%B9">マットレス</a>を販売するスタートアップが、急速に成長し伝統的な<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DE%A5%C3%A5%C8%A5%EC%A5%B9">マットレス</a>メーカーのシェアを奪っていく。創業初月に1億円、最初の12ヶ月で100億円、2年目には200億円に到達。2019年はじめには北米地域だけで200もの店舗を出すことに成功している。</p>

<p>Casper以外にもメガネ業界ではWarby Parker、スーツケースブランドのAwayなどが登場し、それらがインターネット企業のスタートアップのような急成長を行うことに成功し、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E6%A5%CB%A5%B3%A1%BC%A5%F3">ユニコーン</a>企業(評価額が1000億円を超える<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D9%A5%F3%A5%C1%A5%E3%A1%BC%B4%EB%B6%C8">ベンチャー企業</a>)になったことから、これらの企業に共通する特徴をD2Cというワードにまとめて注目されることとなった。</p>

<h1>なぜミレニアム世代をターゲットとするのか</h1>

<h2>ミレニアム世代とは</h2>

<p>ミレニアム世代とは、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%E1%A5%EA">アメリ</a>カにおいて1980年代から1990年代後半までに生まれ、2000年代に成人または社会人になる世代のことを言います。この世代の特徴として、デジタル・ネイティブ、物心ついたときからPCや<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%DE%A5%DB">スマホ</a>、インターネットなどが身近にある環境で育っているという点が挙げられている。</p>

<h2>人口割合の巨大さ</h2>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%E1%A5%EA">アメリ</a>カ国内のミレニアル世代の人口は約9000万人にのぼり、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D9%A5%D3%A1%BC%A5%D6%A1%BC%A5%DE%A1%BC">ベビーブーマー</a>世代を抜いて米国最大の年齢層になっただけでなく<a class="keyword" href="http://d.hatena.ne.jp/keyword/%CF%AB%C6%AF%CE%CF%BF%CD%B8%FD">労働力人口</a>に占める割合も最大となっている。</p>

<p>ミレニアル世代の労働力にしめる比率は2019年時点で35%だが、2030年までに75%に達すると予想されいる。それだけでなく、ミレニアル世代は推定30兆ドルの資産を<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D9%A5%D3%A1%BC%A5%D6%A1%BC%A5%DE%A1%BC">ベビーブーマー</a>世代の親から相続すると予想されている。
また教育水準が最も高い世代とされており、学士号以上の比率は同じ年齢でみるとみれミレニアル世代が40%前後に対してX世代が29%、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D9%A5%D3%A1%BC%A5%D6%A1%BC%A5%DE%A1%BC">ベビーブーマー</a>世代は25%となっている。</p>

<p>つまり、人口規模や若さ、高い教育水準、さらに巨額な相続資産により今後長年米国経済を牽引する消費者層と考えられており、D2Cの急成長は伝統的な企業がいままで提供できていなかったミレニアル世代に対する価値提供をうまく実現することが大きな成長ドライバーとなるため、ミレニアル世代をターゲットとしている理由の一つになると考えられる。</p>

<h2>EC経由での購買ハードルの低さ</h2>

<p>D2CはECでの直接販売がメインの販売チャネルであるため、 その成長速度は対象となるユーザーがEC経由でその商品を購入することのハードルが低いことに大きく依存する。</p>

<p>ミレニアル世代は<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%B8%A5%BF%A5%EB%A5%CD%A5%A4%A5%C6%A5%A3%A5%D6">デジタルネイティブ</a>と呼ばれ、物心ついたころからPC、インターネット、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%DE%A5%DB">スマホ</a>などに触れながら育ってきた世代のため、それよりも上の世代よりもECでの購買ハードルが低い傾向にある。</p>

<p>このEC経由での購買ハードルの低さもミレニアル世代をターゲットしている理由の一つといえるだろう。</p>

<h1>なぜ直接販売をするのか</h1>

<ul>
<li>卸や小<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C7%E4%C5%B9">売店</a>に取られる中間マージンをなくすことでき、その分より低価格で販売することができる。</li>
<li>デジタル経由で顧客に直接販売することで、様々なデータを取ることができ、そのデータによってプロダクト自体や各種オペレーションを最適に、かつ素早く改善していくことができる。</li>
</ul>


<h1>なぜ<a class="keyword" href="http://d.hatena.ne.jp/keyword/SNS">SNS</a>など通じた顧客との直接コミュニケーションを重視するのか</h1>

<ul>
<li>直接コミュニケーションすることにより、エンゲージメントを高める手段を得ることができる</li>
<li>エンゲージメントを高めることで、ユーザー自身がブランドや商品を拡散するという現象を起こすことができ、それにより伝統的なメーカーよりも低コストでユーザーを獲得することができる(仮設)</li>
</ul>


<h1>なぜ指数関数的な急成長を実現できるのか</h1>

<ul>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%E1%A5%EA">アメリ</a>カの場合はミレニアル世代が相当な人口ボリュームがあるのでターゲットとして成功した場合大きくスケールする</li>
<li>各種データを取りながら改善を回す事が可能なため、最適化もしやすい。成功した場合の将来の成長性も計算しやすいためVCからの投資を集めやすい。</li>
</ul>


<h1>なぜデータドリブンな意思決定とオペレーションの改善が実現できるのか</h1>

<ul>
<li>ユーザーとの接点がソフトウェア上になっているため、各種データを取りやすい</li>
<li>またデータを元にしたオペレーション改善もソフトウェアで対応しやすい</li>
</ul>


<h1>なぜ機能ではなく世界観を通じた体験価値の提供を重視するのか</h1>

<ul>
<li>ミレニアル世代の特徴として、モノではなくコトの方を大事にする価値観をもっているため</li>
</ul>


<h1>D2Cの本質</h1>

<p>本質的に重要なのは、価値あるデータをあつめ、それを分析し、データドリブンで高速にオペレーションを改善すること。そしてデータや顧客との直接的な対話から、顧客の持つより本質的な課題を見つけ、それを解決するプロダクトを正しく提供する、プロダクト自身も改善していくこと。そしてそのサイクルを高速に回すことである。</p>

<p>より価値あるデータを集める、顧客の本質的な課題を見つけるために、ソフトウェア(<a class="keyword" href="http://d.hatena.ne.jp/keyword/SNS">SNS</a>、EC)を通して直接顧客との接点を持つ。</p>

<p>ミレニアル世代をターゲットとするのは、あくまでデジタル経由のコミュニケーションや購買行動のハードルが低い、かつ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%E1%A5%EA">アメリ</a>カにおいては非常に大きな人口割合を占めているからである。</p>

<p>機能ではなく世界観を通じた体験価値を提供しているのは、ミレニアル世代をターゲットするために必要だからである。</p>

<h1>D2Cから学んで既存メーカーが取り組むべき戦略はなにか</h1>

<p>D2Cでの成功例をみて、いきなり<a class="keyword" href="http://d.hatena.ne.jp/keyword/SNS">SNS</a>をやる、ECをやるというのは違う。</p>

<p>重要なのは価値あるデータを集めること、データドリブンで意思決定し、高速にオペレーションや商品開発を改善していくことにある。</p>

<p>つまり既存メーカーがまず取り組むべきは、いま持っているまたは得られるデータを集め、分析し、それをもとに意思決定し、改善するというサイクルを回すこと。そのための土台を整えることである。</p>

<p>その土台をもとに既存事業のオペレーションや商品改善サイクルを回していき、成功体験を作ること。</p>

<p>その後、ミレニアル世代を中心とした顧客層と直接つながるための販売チャネル、コミュニケーションチャネルを確立し、そこで得たデータや顧客の課題をもとに新たな商品を作っていくという順番が正しいだろう。</p>

<h1>参考</h1>

<ul>
<li><a href="https://www.amazon.co.jp/D2C-%E3%80%8C%E4%B8%96%E7%95%8C%E8%A6%B3%E3%80%8D%E3%81%A8%E3%80%8C%E3%83%86%E3%82%AF%E3%83%8E%E3%83%AD%E3%82%B8%E3%83%BC%E3%80%8D%E3%81%A7%E5%8B%9D%E3%81%A4%E3%83%96%E3%83%A9%E3%83%B3%E3%83%89%E6%88%A6%E7%95%A5-NewsPicks%E3%83%91%E3%83%96%E3%83%AA%E3%83%83%E3%82%B7%E3%83%B3%E3%82%B0-%E4%BD%90%E3%80%85%E6%9C%A8%E5%BA%B7%E8%A3%95-ebook/dp/B082SL6K9P/ref=sr_1_1?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&amp;dchild=1&amp;keywords=D2C&amp;qid=1591239531&amp;s=digital-text&amp;sr=1-1">D2C　「世界観」と「テクノロジー」で勝つブランド戦略</a></li>
<li><a href="https://medium.com/projectarch/d2c%E3%83%A6%E3%83%8B%E3%82%B3%E3%83%BC%E3%83%B3%E5%88%9D%E3%81%AE%E4%B8%8A%E5%A0%B4-casper-s-1%E3%82%92%E8%AA%AD%E3%82%80-a7f683252ea9">D2Cユニコーン初の上場CasperS-1を読み取る</a></li>
<li><a href="https://globalxetfs.co.jp/millennial-consumers-primed-to-reshape-the-us-economy/">ミレニアム世代の台頭が促す米国経済の変容</a></li>
</ul>


-----
--------
AUTHOR: arakaji-yuu
TITLE: D2Cの本質を理解する
BASENAME: 2020/06/06/005458
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 06/06/2020 00:54:58
-----
BODY:
<h1>D2Cの本質を理解する</h1>

<p>いま「D2C」というのが<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A5%BA%A5%EF%A1%BC%A5%C9">バズワード</a>化しているが、それが意味するのは<a class="keyword" href="http://d.hatena.ne.jp/keyword/EC%A5%B5%A5%A4%A5%C8">ECサイト</a>でメーカーが直接顧客に商品を売るというだけものではない。このドキュメントでは、D2Cとして表現されている企業が伝統的なメーカーよりも非常に早い成長を遂げた重要な成長ドライバーはなんなのか？そして既存のメーカーがD2Cから得られる知見を生かしどのような戦略を実施するべきなのかを考えてみる。</p>

<h1>D2Cとは</h1>

<p>まずD2Cという言葉の定義を揃えておく必要がある。D2Cとは、メーカーが消費者へ直接商品を販売することだけを意味する言葉ではない。</p>

<p>「<a href="https://www.amazon.co.jp/D2C-%E3%80%8C%E4%B8%96%E7%95%8C%E8%A6%B3%E3%80%8D%E3%81%A8%E3%80%8C%E3%83%86%E3%82%AF%E3%83%8E%E3%83%AD%E3%82%B8%E3%83%BC%E3%80%8D%E3%81%A7%E5%8B%9D%E3%81%A4%E3%83%96%E3%83%A9%E3%83%B3%E3%83%89%E6%88%A6%E7%95%A5-NewsPicks%E3%83%91%E3%83%96%E3%83%AA%E3%83%83%E3%82%B7%E3%83%B3%E3%82%B0-%E4%BD%90%E3%80%85%E6%9C%A8%E5%BA%B7%E8%A3%95-ebook/dp/B082SL6K9P/ref=sr_1_1?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&amp;dchild=1&amp;keywords=D2C&amp;qid=1591239531&amp;s=digital-text&amp;sr=1-1">D2C　「世界観」と「テクノロジー」で勝つブランド戦略</a>」によると、D2Cの辞書的な定義は以下になる。</p>

<pre><code>新しい消費の価値観を持つミレニアル世代以下のターゲットに対し、ユニークな世界観を下敷きにしたプロダクトとカスタマーエクスペリエンス、SNSや店舗を通じた顧客とのダイレクトな対話、垂直統合したサプライチェーンを武器に、VCから資金調達を行い、短期間に急成長を目指すデジタル＆データドリブンなライフスタイルブランド
</code></pre>

<p>つまりD2Cブランドは以下のような特徴を持っていることを意味する。</p>

<ul>
<li>顧客ターゲットが<strong>ミレニアル世代</strong></li>
<li>チャネルが<strong>直接販売、</strong></li>
<li>コミュニケーションチャネルが<strong><a class="keyword" href="http://d.hatena.ne.jp/keyword/SNS">SNS</a>などのデジタルを使った顧客との直接コミュニケーション</strong></li>
<li>成長速度が<strong>指数関数的な急成長</strong></li>
<li>デジタル技術を駆使した<strong>データドリブンな意思決定とオペレーションの改善</strong></li>
<li>商品の機能ではなく、<strong>世界観(ブランド)を通した総合的な体験価値を提供する</strong></li>
</ul>


<h1>なぜいまD2Cが注目されているのか</h1>

<p>Casperという2014年に登場した<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DE%A5%C3%A5%C8%A5%EC%A5%B9">マットレス</a>を販売するスタートアップが、急速に成長し伝統的な<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DE%A5%C3%A5%C8%A5%EC%A5%B9">マットレス</a>メーカーのシェアを奪っていく。創業初月に1億円、最初の12ヶ月で100億円、2年目には200億円に到達。2019年はじめには北米地域だけで200もの店舗を出すことに成功している。</p>

<p>Casper以外にもメガネ業界ではWarby Parker、スーツケースブランドのAwayなどが登場し、それらがインターネット企業のスタートアップのような急成長を行うことに成功し、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E6%A5%CB%A5%B3%A1%BC%A5%F3">ユニコーン</a>企業(評価額が1000億円を超える<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D9%A5%F3%A5%C1%A5%E3%A1%BC%B4%EB%B6%C8">ベンチャー企業</a>)になったことから、これらの企業に共通する特徴をD2Cというワードにまとめて注目されることとなった。</p>

<h1>なぜミレニアム世代をターゲットとするのか</h1>

<h2>ミレニアム世代とは</h2>

<p>ミレニアム世代とは、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%E1%A5%EA">アメリ</a>カにおいて1980年代から1990年代後半までに生まれ、2000年代に成人または社会人になる世代のことを言います。この世代の特徴として、デジタル・ネイティブ、物心ついたときからPCや<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%DE%A5%DB">スマホ</a>、インターネットなどが身近にある環境で育っているという点が挙げられている。</p>

<h2>人口割合の巨大さ</h2>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%E1%A5%EA">アメリ</a>カ国内のミレニアル世代の人口は約9000万人にのぼり、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D9%A5%D3%A1%BC%A5%D6%A1%BC%A5%DE%A1%BC">ベビーブーマー</a>世代を抜いて米国最大の年齢層になっただけでなく<a class="keyword" href="http://d.hatena.ne.jp/keyword/%CF%AB%C6%AF%CE%CF%BF%CD%B8%FD">労働力人口</a>に占める割合も最大となっている。</p>

<p>ミレニアル世代の労働力にしめる比率は2019年時点で35%だが、2030年までに75%に達すると予想されいる。それだけでなく、ミレニアル世代は推定30兆ドルの資産を<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D9%A5%D3%A1%BC%A5%D6%A1%BC%A5%DE%A1%BC">ベビーブーマー</a>世代の親から相続すると予想されている。
また教育水準が最も高い世代とされており、学士号以上の比率は同じ年齢でみるとみれミレニアル世代が40%前後に対してX世代が29%、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D9%A5%D3%A1%BC%A5%D6%A1%BC%A5%DE%A1%BC">ベビーブーマー</a>世代は25%となっている。</p>

<p>つまり、人口規模や若さ、高い教育水準、さらに巨額な相続資産により今後長年米国経済を牽引する消費者層と考えられており、D2Cの急成長は伝統的な企業がいままで提供できていなかったミレニアル世代に対する価値提供をうまく実現することが大きな成長ドライバーとなるため、ミレニアル世代をターゲットとしている理由の一つになると考えられる。</p>

<h2>EC経由での購買ハードルの低さ</h2>

<p>D2CはECでの直接販売がメインの販売チャネルであるため、 その成長速度は対象となるユーザーがEC経由でその商品を購入することのハードルが低いことに大きく依存する。</p>

<p>ミレニアル世代は<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%B8%A5%BF%A5%EB%A5%CD%A5%A4%A5%C6%A5%A3%A5%D6">デジタルネイティブ</a>と呼ばれ、物心ついたころからPC、インターネット、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%DE%A5%DB">スマホ</a>などに触れながら育ってきた世代のため、それよりも上の世代よりもECでの購買ハードルが低い傾向にある。</p>

<p>このEC経由での購買ハードルの低さもミレニアル世代をターゲットしている理由の一つといえるだろう。</p>

<h1>なぜ直接販売をするのか</h1>

<ul>
<li>卸や小<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C7%E4%C5%B9">売店</a>に取られる中間マージンをなくすことでき、その分より低価格で販売することができる。</li>
<li>デジタル経由で顧客に直接販売することで、様々なデータを取ることができ、そのデータによってプロダクト自体や各種オペレーションを最適に、かつ素早く改善していくことができる。</li>
</ul>


<h1>なぜ<a class="keyword" href="http://d.hatena.ne.jp/keyword/SNS">SNS</a>など通じた顧客との直接コミュニケーションを重視するのか</h1>

<ul>
<li>直接コミュニケーションすることにより、エンゲージメントを高める手段を得ることができる</li>
<li>エンゲージメントを高めることで、ユーザー自身がブランドや商品を拡散するという現象を起こすことができ、それにより伝統的なメーカーよりも低コストでユーザーを獲得することができる(仮設)</li>
</ul>


<h1>なぜ指数関数的な急成長を実現できるのか</h1>

<ul>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%E1%A5%EA">アメリ</a>カの場合はミレニアル世代が相当な人口ボリュームがあるのでターゲットとして成功した場合大きくスケールする</li>
<li>各種データを取りながら改善を回す事が可能なため、最適化もしやすい。成功した場合の将来の成長性も計算しやすいためVCからの投資を集めやすい。</li>
</ul>


<h1>なぜデータドリブンな意思決定とオペレーションの改善が実現できるのか</h1>

<ul>
<li>ユーザーとの接点がソフトウェア上になっているため、各種データを取りやすい</li>
<li>またデータを元にしたオペレーション改善もソフトウェアで対応しやすい</li>
</ul>


<h1>なぜ機能ではなく世界観を通じた体験価値の提供を重視するのか</h1>

<ul>
<li>ミレニアル世代の特徴として、モノではなくコトの方を大事にする価値観をもっているため</li>
</ul>


<h1>D2Cの本質</h1>

<p>本質的に重要なのは、価値あるデータをあつめ、それを分析し、データドリブンで高速にオペレーションを改善すること。そしてデータや顧客との直接的な対話から、顧客の持つより本質的な課題を見つけ、それを解決するプロダクトを正しく提供する、プロダクト自身も改善していくこと。そしてそのサイクルを高速に回すことである。</p>

<p>より価値あるデータを集める、顧客の本質的な課題を見つけるために、ソフトウェア(<a class="keyword" href="http://d.hatena.ne.jp/keyword/SNS">SNS</a>、EC)を通して直接顧客との接点を持つ。</p>

<p>ミレニアル世代をターゲットとするのは、あくまでデジタル経由のコミュニケーションや購買行動のハードルが低い、かつ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%E1%A5%EA">アメリ</a>カにおいては非常に大きな人口割合を占めているからである。</p>

<p>機能ではなく世界観を通じた体験価値を提供しているのは、ミレニアル世代をターゲットするために必要だからである。</p>

<h1>D2Cから学んで既存メーカーが取り組むべき戦略はなにか</h1>

<p>D2Cでの成功例をみて、いきなり<a class="keyword" href="http://d.hatena.ne.jp/keyword/SNS">SNS</a>をやる、ECをやるというのは違う。</p>

<p>重要なのは価値あるデータを集めること、データドリブンで意思決定し、高速にオペレーションや商品開発を改善していくことにある。</p>

<p>つまり既存メーカーがまず取り組むべきは、いま持っているまたは得られるデータを集め、分析し、それをもとに意思決定し、改善するというサイクルを回すこと。そのための土台を整えることである。</p>

<p>その土台をもとに既存事業のオペレーションや商品改善サイクルを回していき、成功体験を作ること。</p>

<p>その後、ミレニアル世代を中心とした顧客層と直接つながるための販売チャネル、コミュニケーションチャネルを確立し、そこで得たデータや顧客の課題をもとに新たな商品を作っていくという順番が正しいだろう。</p>

<h1>参考</h1>

<ul>
<li><a href="https://www.amazon.co.jp/D2C-%E3%80%8C%E4%B8%96%E7%95%8C%E8%A6%B3%E3%80%8D%E3%81%A8%E3%80%8C%E3%83%86%E3%82%AF%E3%83%8E%E3%83%AD%E3%82%B8%E3%83%BC%E3%80%8D%E3%81%A7%E5%8B%9D%E3%81%A4%E3%83%96%E3%83%A9%E3%83%B3%E3%83%89%E6%88%A6%E7%95%A5-NewsPicks%E3%83%91%E3%83%96%E3%83%AA%E3%83%83%E3%82%B7%E3%83%B3%E3%82%B0-%E4%BD%90%E3%80%85%E6%9C%A8%E5%BA%B7%E8%A3%95-ebook/dp/B082SL6K9P/ref=sr_1_1?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&amp;dchild=1&amp;keywords=D2C&amp;qid=1591239531&amp;s=digital-text&amp;sr=1-1">D2C　「世界観」と「テクノロジー」で勝つブランド戦略</a></li>
<li><a href="https://medium.com/projectarch/d2c%E3%83%A6%E3%83%8B%E3%82%B3%E3%83%BC%E3%83%B3%E5%88%9D%E3%81%AE%E4%B8%8A%E5%A0%B4-casper-s-1%E3%82%92%E8%AA%AD%E3%82%80-a7f683252ea9">D2Cユニコーン初の上場CasperS-1を読み取る</a></li>
<li><a href="https://globalxetfs.co.jp/millennial-consumers-primed-to-reshape-the-us-economy/">ミレニアム世代の台頭が促す米国経済の変容</a></li>
</ul>


-----
--------
AUTHOR: arakaji-yuu
TITLE: 運動不足解消のために「のがちゃんねる」のYoutubeを見ながらHIITを始めた
BASENAME: 2020/05/29/104543
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 05/29/2020 10:45:43
-----
BODY:
<p>社会人になってからずっと運動不足をどうやって解消するかが課題で、ランニングや筋トレを習慣化しようとしたことも何度もあったけどもう何度挫折したかわからない。自分の自制心のなさに何度絶望したことか。</p>

<p>ここ一ヶ月くらいは朝4時〜5時くらいに起きて、そのあと散歩するというのがうまく習慣化できているんだけど、散歩だけだとそこまで強度の高い運動にはならないし、ある程度の歩数を歩こうと思うとそれだけで1時間程度は歩かないといけないので、せっかく早起きしたのにちょっともったいない。その時間あったら本読んだりコードを書いたりしていたい。</p>

<p>ということで、ここ一週間ほどはHIITという運動にチャレンジし始めた。</p>

<h1>HIITとは？</h1>

<p>HIITとは短い時間の強度の高い筋トレと短い休憩を今後に行うト<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EC%A1%BC%A5%CB%A5%F3">レーニン</a>グ方法の一つで、一日数分だけやるだけ脂肪燃焼効果もありつつ筋トレもできるというスグレモノです。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fstyle.nikkei.com%2Farticle%2FDGXMZO11481080Q7A110C1000000%2F" title="1日4分　話題の筋トレ「HIIT」で体脂肪が落ちる｜ヘルスＵＰ｜NIKKEI STYLE" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://style.nikkei.com/article/DGXMZO11481080Q7A110C1000000/">style.nikkei.com</a></cite></p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Youtube">Youtube</a>を探すといろんな人がHIITのト<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EC%A1%BC%A5%CB%A5%F3">レーニン</a>グ動画を上げてくれているので、いまは妻や子供と一緒に、朝ごはんを食べたあとに数分HIITのト<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EC%A1%BC%A5%CB%A5%F3">レーニン</a>グをやるというのを習慣化しようとしています。</p>

<p>僕が見ているのは、のがちゃんねるのHIIT動画です。</p>

<p><iframe width="480" height="270" src="https://www.youtube.com/embed/Lo9C7f0_pmc?start=8&feature=oembed" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><cite class="hatena-citation"><a href="https://www.youtube.com/watch?v=Lo9C7f0_pmc&t=8s">www.youtube.com</a></cite></p>

<p>この動画の良いところが、ただこの人がト<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EC%A1%BC%A5%CB%A5%F3">レーニン</a>グしているのを動画にしているだけでなく、ト<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EC%A1%BC%A5%CB%A5%F3">レーニン</a>グの残り時間や休憩時間を動画の上の方に<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%EC%A5%B9%A5%D0%A1%BC">プログレスバー</a>で表示したり、休憩時間の間に次のト<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EC%A1%BC%A5%CB%A5%F3">レーニン</a>グの動画を小さい枠で表示しておくことでスムーズにト<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EC%A1%BC%A5%CB%A5%F3">レーニン</a>グに入れるようにするなど細かい工夫がされており、かなり動画のクオリティが高いことです。</p>

<p>この「のがちゃん」という方の本業がデザイナーらしいので、動画を見ながらト<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EC%A1%BC%A5%CB%A5%F3">レーニン</a>グするというUXをしっかり考えて作り込まれているので非常に良いです。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/a/arakaji-yuu/20200529/20200529100734.png" alt="f:id:arakaji-yuu:20200529100734p:plain" title="f:id:arakaji-yuu:20200529100734p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>とりあえず1ヶ月続けてみて、自分の体調や体型がどうなるのか試してみたいと思います。</p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: 2019/11/17(日) JAZUG沖縄のミートアップを開催いたしました！
BASENAME: 2019/11/18/192132
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 11/18/2019 19:21:32
-----
BODY:
<p>2019/11/17(日) JAZUG沖縄のミートアップを開催いたしました！</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fjazug-okinawa.connpass.com%2Fevent%2F153233%2F" title="JAZUG沖縄ミートアップ (2019/11/17 13:00〜)" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://jazug-okinawa.connpass.com/event/153233/">jazug-okinawa.connpass.com</a></cite></p>

<p>自分はPaykeに転職してからずっとAzureを使っていて来ていて、大体1年1回ほどはAzureに関連する勉強回を開催していたのですが、継続的に沖縄でAzureのユーザーが集まれる回を作っていきたいと思い、この度JAZUG( Japan AZure User Group) 沖縄としてミートアップを開催することとなりました。</p>

<p>今回JAUG沖縄のミートアップを開催するということで、非常に多くの方に応援のコメントもいただいたり、一緒にコミュニティを運営していきたいという方が出てきてくれたり、実際に<a class="keyword" href="http://d.hatena.ne.jp/keyword/Microsoft">Microsoft</a>の横井さんにリモートでセッションをしていただいたりと、様々な方にご協力頂きました。</p>

<p>圧倒的感謝！！でございます。</p>

<h1>今回イベント内容について</h1>

<p>最初のセッションとして、横井さんに「AI 使って、何しよう？ ～ あなたの挑戦が、未来を実現する: <a class="keyword" href="http://d.hatena.ne.jp/keyword/Microsoft">Microsoft</a> の AI の世界 ～ 」というテーマで<a class="keyword" href="http://d.hatena.ne.jp/keyword/Microsoft">Microsoft</a>が提供しているAI系サービスの特徴やそれを利用していくための勘所などを紹介して頂きました。</p>

<p>1,2年前ほどに勉強回でAzureのAI系サービスについて話を聞いたことがあったのですが、そこから精度が向上していたり、サービスのラインナップ自体も増えていたりと、この分野は継続的にキャッチアップしてプロダクトにどのように活かしせるか常に考えておくと非常に面白いなと思いました。(個人的にはTranslate系をもっとキャッチアップしておきたい。。。）</p>

<p>次に僕が「Azure Web Appはいいぞ！」というタイトルでAzure Web AppというAzureのPaaSの良さを発表させて頂きました。</p>

<script async class="speakerdeck-embed" data-id="63984233e7394a0eb640ace1e2f23b03" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>


<p>EBILABという飲食店をデータ駆動で経営改善を支援するBIツールを提供する会社の開発チームから、3人が登壇して頂きました。</p>

<p>@r_nakamineさんが「様々なデータの統合を支えるETL基盤をAzure Serverless <a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8">コンポーネント</a>で構築」、@puremoru0315さんが「Azure ServerlessでWeb Application開発」、@saboyutakaさんが「10x Serverless Product Development for a Startup with <a class="keyword" href="http://d.hatena.ne.jp/keyword/Microsoft">Microsoft</a> Azure」というタイトルでそれぞれ発表していただき、EBILABさんの開発の中の構成がすべて見えてくるとても充実した内容でした。</p>

<p>EBILABさんの技術選定や<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3">アーキテクチャ</a>構成などは一貫して「分業可能にすることで生産性を上げる」というコンセプトが通っていて、その分業可能な<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3">アーキテクチャ</a>を作る上でAzureの様々なマネージドサービスやServerlessテク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%CE%A5%ED">ノロ</a><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B8%A1%BC">ジー</a>を駆使することで本来大規模開発になるところを少人数でも開発可能にしているようでした。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3">アーキテクチャ</a>選定の思想や紹介してもらった様々なサービス群についてすぐにでも使える情報が多かったので、非常に勉強になりました。</p>

<p>皆さんの登壇が終わったあとは、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Microsoft">Microsoft</a> Learnを使って実際にAzure Functionsを触ってみようということで@saboyutakaさんにリードしてもらって<a class="keyword" href="http://d.hatena.ne.jp/keyword/Microsoft">Microsoft</a> Learnを体験してみました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdocs.microsoft.com%2Fja-jp%2Flearn%2Fmodules%2Fcreate-serverless-logic-with-azure-functions%2F" title="Azure Functions を使用したサーバーレス ロジックの作成 - Learn" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://docs.microsoft.com/ja-jp/learn/modules/create-serverless-logic-with-azure-functions/">docs.microsoft.com</a></cite></p>

<h1>今後について</h1>

<p>JAZUG沖縄はできるだけ継続的にミートアップを開催して、みんなで<a class="keyword" href="http://d.hatena.ne.jp/keyword/Microsoft">Microsoft</a> Learnを使った<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%E2%A4%AF%A4%E2%A4%AF%B2%F1">もくもく会</a>を開催したり、県外からのゲストを招いて様々な事例やAzureの最新動向をキャッチアップできる会を作ったりしていきたいと思いますので、今後ともよろしくお願いします。</p>

<p>やっていくぞ！！！</p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: PHPカンファレンス沖縄2019に、個人としては運営スタッフ&amp;登壇者、Paykeはスポンサーとして参加しました！
BASENAME: 2019/10/14/162057
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 10/14/2019 16:20:57
-----
BODY:
<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/PHP%A5%AB%A5%F3%A5%D5%A5%A1%A5%EC%A5%F3%A5%B9">PHPカンファレンス</a>沖縄2019に運営スタッフ &amp; 登壇者、僕が所属する会社であるPaykeはスポンサーとして参加しました！</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fphpcon.okinawa.jp%2F" title="PHPカンファレンス沖縄" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://phpcon.okinawa.jp/">phpcon.okinawa.jp</a></cite></p>

<p>総勢１４０名近くの方が参加していただく規模のカンファレンスになり、沖縄だと<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%CF%A5%C3%A5%AB%A1%BC">ハッカー</a>ズチャンプルーに次ぐ規模のカンファレンスになりました。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%CF%A5%C3%A5%AB%A1%BC">ハッカー</a>ズチャンプルーは沖縄の各エンジニアコミュニティが協力して開催しているコミュニティですが、一つの<a class="keyword" href="http://d.hatena.ne.jp/keyword/PHP">PHP</a>というコミュニティだけでこの規模のカンファレンスができ、しかも多くの県外から参加者も来ていただけたのはすごく良い事例になったと思いますし、参加者としても非常に楽しめたカンファレンスになったと思います！</p>

<h3>スポンサーとして</h3>

<p>今回始めての沖縄で開催させる<a class="keyword" href="http://d.hatena.ne.jp/keyword/PHP%A5%AB%A5%F3%A5%D5%A5%A1%A5%EC%A5%F3%A5%B9">PHPカンファレンス</a>ということで、少しばかりの応援としてPaykeもスポンサーさせていただきました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/a/arakaji-yuu/20191014/20191014145119.jpg" alt="f:id:arakaji-yuu:20191014145119j:plain" title="f:id:arakaji-yuu:20191014145119j:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/a/arakaji-yuu/20191014/20191014145146.jpg" alt="f:id:arakaji-yuu:20191014145146j:plain" title="f:id:arakaji-yuu:20191014145146j:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>このようなカンファレンスで僕らのロゴが掲載されて、全国から来ていただいたPHPerの方々に少しでも認知していただけたなら嬉しい限りです。</p>

<p>弊社CTOの花城はゲストスピーカーとして、「スタートアップにおけるプロダクト開発とエンジニア組織の変遷」と言う内容で登壇しました。
沖縄でPaykeぐらいのスピード感で成長するスタートアップ企業はこれまでなかったので、その成長を遂げたエンジニア組織がどのように変化してきたのかという話は多くの方に興味を持っていただけたようで身内として非常に嬉しい限りです。</p>

<p>あと弊社CTOの登壇に関する反響として一番多かったのは「CTOイケメンですね！」でした笑（うらやましい。。。</p>

<h3>登壇者として</h3>

<p>今回ボクは「技術基盤/SREの視点で取り組む、サービスの成長を継続し、加速させるための<a class="keyword" href="http://d.hatena.ne.jp/keyword/PHP">PHP</a>アプリケーション改善」というタイトルで登壇させていただきました。</p>

<script async class="speakerdeck-embed" data-id="b7b8e778941041588602625609d2c569" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>


<p>Paykeの開発組織の中で技術基盤という組織を作り、解決してきた課題の事例を通じてサービスの成長を継続させ、そして成長させていくためにどのようなことを考えながら意思決定しているかを伝えたいと思って今回の登壇内容を作りました。</p>

<p>３０分枠頂いてたのですが時間オーバーしてしまい、最後のほうは一部省いてしまったのですが、一番伝えたかったのは以下のページに書いた「事業目標を理解し、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DC%A5%C8%A5%EB%A5%CD%A5%C3%A5%AF">ボトルネック</a>を解消する」ということです。</p>

<script async class="speakerdeck-embed" data-slide="28" data-id="b7b8e778941041588602625609d2c569" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>


<p>技術基盤だからといってビジネスのことを考えなくて良いわけでは決してなく、むしろビジネスと事業の成長戦略、そして目標を理解し、その道の先にある技術的<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DC%A5%C8%A5%EB%A5%CD%A5%C3%A5%AF">ボトルネック</a>を見抜き予めかじめ取り除く、またはその戦略執行をより効率的・効果的に行えるような技術的な武器を整えておく、のようなことがPaykeの技術基盤には求められていて、これまでもそれを意識して意思決定を行ってきました。</p>

<p>この登壇を通して「ビジネスを理解して、それを支えかつ強化する技術的な意思決定をすることが重要」ということをうまく伝えたかったのですが、うまくいったのかはあんまり自信がない。。。</p>

<p>いろんな方に「新垣さんの発表が一番楽しみです！」と言って下さったので、期待に答えられただろうか・・・</p>

<p>人前で話す事自体には最近だいぶなれてきたんですが、うまく伝えられるようになったかというそうでもない気がするので、次からは「伝えたいことを正しく伝える」ということをもっと意識して登壇に望みたいと思います。</p>

<h3>参加者として</h3>

<p>今回は運営スタッフとしての役割上、ずっとtrack_aの会場にいました。
すべての登壇内容が面白く、かつ勉強になるものばかりで非常に楽しかったのですが、個人的なベストセッションを挙げさせていただくとランチセッションの「小さな機能、大きな仕事」が最高でした。</p>

<script async class="speakerdeck-embed" data-id="9631fe9b21374c95b042f6bfc3249dab" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>


<p>自分<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%E2%A5%EA%A5%D5">もリフ</a>ァクタリングするときやもしくは自分が新規開発するときの基本的な考え方として「小さくシンプルな役割をもったプログラムをまず作り、それを組み合わせることで大きな役割をするプログラムを作る」というのを意識して行っています。</p>

<p>それは「<a class="keyword" href="http://d.hatena.ne.jp/keyword/UNIX">UNIX</a>という考え方」という本で学んだことや、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Clojure">Clojure</a>のような<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B4%D8%BF%F4%B7%BF%B8%C0%B8%EC">関数型言語</a>でプログラムを作るときの作法から影響をうけてそうなっていたのですが、頭の中にぼんやりとあるだけでうまく<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B8%C0%B8%EC%B2%BD">言語化</a>はできていませんでした。</p>

<p>今回のこのセッションでは実際にもう作られて負債化しているシステムの要因分析やそれに対する改善方法のアプローチとして僕が<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B0%C5%CC%DB%C3%CE">暗黙知</a>的に意識していた「小さなプログラムを組み合わせて大きなプログラムを作る」ということがうまく<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B8%C0%B8%EC%B2%BD">言語化</a>されていて、登壇中も「あー、そうそう！そういうことなんですよね！！！」とこころの中で首がもげるかというほど頷いてました。</p>

<p>フィーチャーとケイパビリティという言葉で「フィーチャー＝ユーザーからみた機能（大きな仕事）」と「ケイパビリティ＝フィーチャーを実現するための構成要素として必要な能力（小さな機能）」を明確に分けて話されていたのが印象的で、僕の辞書にはその言葉がこれまでなかったので非常に勉強になりました。</p>

<p>「登壇内容めっちゃ良かった！」と伝えるのと「ajito.fmのファンでめっちゃ聞いてます！」ということを直接伝えられなかったのが個人的には心残り。。。</p>

<h3>スタッフとして</h3>

<p>今回<a class="keyword" href="http://d.hatena.ne.jp/keyword/PHP%A5%AB%A5%F3%A5%D5%A5%A1%A5%EC%A5%F3%A5%B9">PHPカンファレンス</a>沖縄は最初はスタッフとして関わる予定ではなかったのですが、実行委員長のカンボさんに直接誘っていただいたのがきっかけでコアスタッフとして途中参加させていただきました。</p>

<p>僕がやったことは以下のような感じです。</p>

<ul>
<li>Paykeにスポンサーとして参加してもらう。</li>
<li>キーノートスピーカーとの調整</li>
<li>当日のビデオ撮影（スタッフ用）</li>
<li>後片付け</li>
</ul>


<p>今回のイベントは他のコ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%E1%A5%F3%A5%D0%A1%BC">アメンバー</a>がすごく頑張っていて「途中から参加したのにあんまり貢献できていないな～」とちょっと罪悪感的なことも頭の中には浮かんでいたのですが、こういうカンファレンスは小さなことでも自分ができることをやってくれる人達の集合で成り立っているので、ここは罪悪感を忘れて「自分も運営に貢献したぞ！」と自信を持って言いたいと思います。</p>

<p>おれも自分のできる範囲で運営がんばったぞー！！！</p>

<h3><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%DA%A5%B7%A5%E3">スペシャ</a>ルサンクス</h3>

<p>今回のイベントが無事開催できたのは、会場提供してくださった株式会社プロトソリューションさんの全面協力のおかげでした。</p>

<p>会場提供だけではなく、会場準備や後片付けにもスタッフを参加させてもらって協力してくれるだけでなく、当日の備品で足りないものが見つかったときに会社にある備品を貸し出してくださったりと非常に多くのサポートをしてくださったことで今回のカンファレンスを無事やり遂げる事ができたと思います。</p>

<p>株式会社プロトソリューションさん、本当にありがとうございました！！</p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: 会議終了後に必ず作成してもらうアクションサマリー(または議事録)
BASENAME: 2019/09/30/094701
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 09/30/2019 09:47:01
IMAGE: https://images-fe.ssl-images-amazon.com/images/I/51bxtWGiS2L._SL160_.jpg
-----
BODY:
<p>会議は意思決定のためにするもので、かつその意思決定を正しく素早く伝達するために、自分は会議終了後には基本的には必ずアクションサマリーを書いて共有するようにしている。</p>

<p>アクションサマリーとは、会議で話して決まった以下の内容を簡単にまとめたものです。</p>

<ul>
<li>何を目的に議論したのか</li>
<li>結果どうなったのか</li>
<li>アクションリスト(誰が、いつまでに、なにをやるのか)</li>
</ul>


<p>自分は必ずやるようにしているが、それを組織全体に適応するためにはどうすればいいかな〜と考えているときに 「<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DE%A1%BC%A5%B1%A5%C6%A5%A3%A5%F3%A5%B0">マーケティング</a>とは「組織革命」である。」という本を呼んでいたら、会議後に提供するアクションサマリーについて書いていた。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822257959/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/51bxtWGiS2L._SL160_.jpg" class="hatena-asin-detail-image" alt="マーケティングとは「組織革命」である。 個人も会社も劇的に成長する森岡メソッド" title="マーケティングとは「組織革命」である。 個人も会社も劇的に成長する森岡メソッド"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822257959/hatena-blog-22/">マーケティングとは「組織革命」である。 個人も会社も劇的に成長する森岡メソッド</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> <a class="keyword" href="http://d.hatena.ne.jp/keyword/%BF%B9%B2%AC">森岡</a>毅</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> <a class="keyword" href="http://d.hatena.ne.jp/keyword/%C6%FC%B7%D0BP">日経BP</a></li><li><span class="hatena-asin-detail-label">発売日:</span> 2018/05/24</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li><li><a href="http://d.hatena.ne.jp/asin/4822257959/hatena-blog-22" target="_blank">この商品を含むブログ (1件) を見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>この本によると、アクションサマリーは以下の内容を描く必要があるそうです。</p>

<ol>
<li>その会議の目的がなんだったのか？</li>
<li>そして結論はどうだったのか？</li>
<li>結論に至る議論された主な内容はなんだったのか？</li>
<li>結論に基づき、関係者が次に取るべきアクションの明示(誰が、なにを、いつまでにするのか？ )</li>
</ol>


<p>そしてこの内容を会議から24時間以内に全体に公開することが義務付けられれているそうです。</p>

<p>これにより、まず会議の関係者に正しい素早くアクションしてもらうためのシステムとして機能するとともに、情報や意思決定の透明性を上げることを組織に浸透させていくという２つの効果があるそうです。</p>

<p>これをもとに、僕の組織でも使えるように以下のようなアクションサマリーのテンプレートを作成しました。
情報共有ツールとして<a class="keyword" href="http://d.hatena.ne.jp/keyword/esa">esa</a>というサービスを利用しているので、テンプレートも<a class="keyword" href="http://d.hatena.ne.jp/keyword/Markdown">Markdown</a>で書いています</p>

<pre class="code" data-lang="" data-unlink>- 日時: 
- 参加者: 

# 会議の目的

# 結論

# 結論に至る議論された主な内容

# アクション(誰が、なにを、いつまにするのか？)
</pre>


<p>これでうまく回るか試してみます。</p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: thisweekと打つと、月曜日の日付〜日曜日の日付(例: 2019/09/16(月)〜2019/09/22(日))を出力するコマンドを書いた
BASENAME: 2019/09/17/103301
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 09/17/2019 10:33:01
-----
BODY:
<p>毎週月曜日に今週やりたいことなどをメモに書き出すっていうことをやっているのですが、そのときのメモのタイトルを毎回 月曜日の日付〜日曜日の日付(例: 2019/09/16(月)〜2019/09/22(日)) にしている。</p>

<p>ただ、それを毎回月曜日と日曜日の日付をカレンダーで調べて書くのが面倒過ぎたので<a class="keyword" href="http://d.hatena.ne.jp/keyword/ruby">ruby</a>で簡単な<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8">スクリプト</a>を書いた。</p>

<p><a href="https://gyazo.com/8ee0a47bce59b4313964d41f1b64de94"><img src="https://i.gyazo.com/8ee0a47bce59b4313964d41f1b64de94.gif" alt="Image from Gyazo" /></a></p>

<p>コードはgistに公開しています。</p>

<p><script src="https://gist.github.com/Arakaki-Yuji/92c2ea1dbd2c39db6ec60d2f0484011d.js"> </script><cite class="hatena-citation"><a href="https://gist.github.com/Arakaki-Yuji/92c2ea1dbd2c39db6ec60d2f0484011d">gist.github.com</a></cite></p>

<p>これでほんのちょっとだけ楽になる。</p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: #てらだよしおまつり、沖縄開催でDocker/k8sのハッカソンを2日間行いました！
BASENAME: 2019/09/02/061144
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 09/02/2019 06:11:44
-----
BODY:
<h1>#てらだよしおまつり、沖縄開催でDocker/<a class="keyword" href="http://d.hatena.ne.jp/keyword/k8s">k8s</a>の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%CF%A5%C3%A5%AB%A5%BD%A5%F3">ハッカソン</a>を2日間行いました！</h1>

<p>2019年8月24日(土)〜2019年8月25日(日)の2日間、CODEBASEを会場にお借りして、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Microsoft">Microsoft</a>の寺田佳央さんを講師にDocker/<a class="keyword" href="http://d.hatena.ne.jp/keyword/k8s">k8s</a>の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%CF%A5%C3%A5%AB%A5%BD%A5%F3">ハッカソン</a>を開催しました！</p>

<p>寺田さんは今回<a class="keyword" href="http://d.hatena.ne.jp/keyword/Java">Java</a>や<a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a>の関連の勉強会で全国ツアーを行うという挑戦を行っており、今回のその全国ツアーのファイナル、沖縄開催を僕がJavaKuecheとして運営させていただくことになりました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fjava-kuche.doorkeeper.jp%2Fevents%2F94636" title="Kubernetes ハッカソン~Docker と Kubernetes にどっぷり浸かる二日間！ ~" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://java-kuche.doorkeeper.jp/events/94636">java-kuche.doorkeeper.jp</a></cite></p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.protosolution.co.jp%2Fcodebase%2F" title="CODE BASE 宜野湾西海岸をITビーチに。｜ 株式会社プロトソリューション" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.protosolution.co.jp/codebase/">www.protosolution.co.jp</a></cite></p>

<h1><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%CF%A5%C3%A5%AB%A5%BD%A5%F3">ハッカソン</a>で、僕が中級者チームのリードをすることに</h1>

<p>別記事として書いているのですが、僕はこのコミュニティ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%CF%A5%C3%A5%AB%A5%BD%A5%F3">ハッカソン</a>の数日前に、会社で寺田さんとAzure <a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a> Serviceのハックフェストを行っておりました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Farakaji.hatenablog.com%2Fentry%2F2019%2F09%2F02%2F060551" title="Microsoft Hackfest | ペアプロした２日間、自社サービスをAKSに乗せる過程で学んだこと - ゆーじのろぐ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://arakaji.hatenablog.com/entry/2019/09/02/060551">arakaji.hatenablog.com</a></cite></p>

<p>そこで<a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a>自体や<a class="keyword" href="http://d.hatena.ne.jp/keyword/AKS">AKS</a>について学びながら、このコミュニティイベントの打ち合わせもしており、そこで寺田さんから「初級者、中級者で２チームに分けてモブプロ形式で進めたいので、プロジェクターか大きなディスプレイがふたつあるとありがたい」と言われていたので、コミュニティイベントの当日は会場のスタッフと一緒にプロジェクターを２つ用意しておきました。</p>

<p>その時に単純な疑問として、「寺田さん一人で２つのチームのモブプロってどうやるんだろう？」と思っていたのですが...</p>

<p>当日になってイベントが始まり、中級者と初級者のチームに分かれて僕は中級者に入っていると、寺田さんから「<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%CF%A5%C3%A5%AB%A5%BD%A5%F3">ハッカソン</a>用の資料はあるので、それに沿って中級者チームは新垣さんがリードして進めていってもらえますか？ 僕は初級者チームと一緒に進めて行きますね！」とおっしゃられて急遽中級者チームの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%CF%A5%C3%A5%AB%A5%BD%A5%F3">ハッカソン</a>をリードすることに！</p>

<p>最初は心の準備が出来ておらずうまくできるかどうか不安だったのですが、実際に資料を見ながら進めていくと数日前にやった寺田さんとのハックフェストで学んだことがしっかりと頭と体に染み付いて、思いの外うまくすすめることができました。</p>

<p>もちろん忘れてしまっていたことなどもいくつか有りましたが、そこは一緒にモブプロしている参加者の人と調べたり、寺田さんに助けて頂いたりすることでアウトプットと復習のサイクルがバンバン回って自分の中で理解がより深まっていきました。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%CF%A5%C3%A5%AB%A5%BD%A5%F3">ハッカソン</a>も無事終わり、イベント参加者からも「わかりやすかった」、「面白かった」という良い感想を頂いたり、寺田さんや一緒に来ていただいた<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%A6%A5%C9">クラウド</a>アドボケイトチームのマネージャーであるクリス<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C6%A5%A3%A1%BC">ティー</a>ナさんにも「ファシリテート素晴らしかった」とお褒めの言葉をたくさん頂いたので、僕自身もたくさん学べて楽しかったし、みなさんも多くを学んで楽しめた良い回に出来たのだろうと満足しています。</p>

<h1>懇親会 〜<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%B8%A5%E3%A5%A4%A5%EB">アジャイル</a>と<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D6%A5%ED%A5%C3%A5%AF%A5%C1%A5%A7%A1%BC%A5%F3">ブロックチェーン</a>と日本の政治とマイクロサービス〜</h1>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%CF%A5%C3%A5%AB%A5%BD%A5%F3">ハッカソン</a>最終日の打ち合げで近くの居酒屋をお借りして懇親会を行ったのですが、個人的に面白かった話の流れがあったのでご紹介します。</p>

<p>会場では席が二席に分かれていて、まず僕がいる席に寺田さんが座っていて、そこでの話題は<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%B8%A5%E3%A5%A4%A5%EB">アジャイル</a>やマイクロサービスについてでした。</p>

<p>いまの世界はビジネス=ソフトウェアの時代であり、そこで勝っていくには<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%B8%A5%E3%A5%A4%A5%EB">アジャイル</a>、DevOps、そしてその後のマイクロサービスみたいなことを理解して実践していかないといけない。
ただ、ビジネスを作る人や経営者にとって<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%B8%A5%E3%A5%A4%A5%EB">アジャイル</a>やDevOpsみたいなワードを直接出す必要なくて、新しいバージョンのソフトウェアを速く出せるだとか変化に対応できるだとかの、今抱えている直接的な課題を解決するということだけ理解してもらえば良くて、彼らにとってはそのための手段は別に何でも良い。
たとえばバリューストリーム<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DE%A5%C3%A5%D4%A5%F3%A5%B0">マッピング</a>をすべて洗い出し、そこで新しいバージョンをリリースするために<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B9%A9%BF%F4">工数</a>がかかっている<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DC%A5%C8%A5%EB%A5%CD%A5%C3%A5%AF">ボトルネック</a>を洗い出し、それをなにか手法やツールや<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3">アーキテクチャ</a>によって解決し、それによって<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B9%A9%BF%F4">工数</a>がどれだけ短縮されるなどを提示すると<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%B8%A5%E3%A5%A4%A5%EB">アジャイル</a>やDevOps、マイクロサービス、A/Bテストなど僕らがやりたいことは直ぐに実行することができるし、逆にいうとそういうメリットがないのであればやる必要もない。</p>

<p>のような話をしていました。</p>

<p>そのあと、寺田さんと一緒にイベントに来てくれた<a class="keyword" href="http://d.hatena.ne.jp/keyword/Microsoft">Microsoft</a>のクリス<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C6%A5%A3%A1%BC">ティー</a>ナさんが席を変わりました。</p>

<p>クリス<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C6%A5%A3%A1%BC">ティー</a>ナさんは<a class="keyword" href="http://d.hatena.ne.jp/keyword/Microsoft">Microsoft</a>での<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%A6%A5%C9">クラウド</a>アドボケイトチームのマネージャーという仕事のほかに、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D6%A5%ED%A5%C3%A5%AF%A5%C1%A5%A7%A1%BC%A5%F3">ブロックチェーン</a>を用いたデジタル<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%A4%A5%C7%A5%F3%A5%C6%A5%A3%A5%C6%A5%A3">アイデンティティ</a>の証明というプロジェクトを行っており、その活動が評価されてForbesの世界に影響を与えるUnder30の30人のうちの一人として選ばれている方です。</p>

<p>彼女が取り組んでいるデジタル<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%A4%A5%C7%A5%F3%A5%C6%A5%A3%A5%C6%A5%A3">アイデンティティ</a>証明のプロジェクトの話や、今の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D6%A5%ED%A5%C3%A5%AF%A5%C1%A5%A7%A1%BC%A5%F3">ブロックチェーン</a>のトレンドなどの話をしているとなぜか日本の政治についての話題に変わり、その場の誰がどの発言をしたかはもう忘れましたが</p>

<p>「日本の場合は、法律が作られるけど作られた法律を削除したり時代に合わせて解釈し直すみたい事が少なくて時代遅れの法律が残ってそれを守らないといけずに改善遅れるケースが多い」</p>

<p>「新機能を作るけど、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EA%A5%D5%A5%A1%A5%AF%A5%BF%A5%EA%A5%F3%A5%B0">リファクタリング</a>やいらない機能の削除とかしてなくて肥大化しているんですね〜。これ、法律の矛盾をつくらないように新しい法律を作るのも、どんどん難しくなって法律作成のコストが上がってそう」</p>

<p>「法律もうまくいくかどうかわからないんだから、まず小さくリリースしてA/Bテストしたいですよね〜。」</p>

<p>「日本自体が大きな<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E2%A5%CE%A5%EA%A5%B9">モノリス</a>なアプリケーションになっているからね〜。まず都市とか県とかの単位でサービス分割して権限移譲し、そこの範囲で<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%B8%A5%E3%A5%A4%A5%EB">アジャイル</a>に<a class="keyword" href="http://d.hatena.ne.jp/keyword/PDCA">PDCA</a>回せるようにしないといけない」</p>

<p>「そうしたらService単位で失敗したり障害発生しても他のサービスに影響起きないようにできるから大胆に政治でもチャレンジできるね」</p>

<p>「でも、それぞれの都市で共通に必要な機能やコミュケーションはどうする？」</p>

<p>「全Serviceに必要な機能は<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%B9%A5%DA%A5%AF%A5%C8%BB%D8%B8%FE">アスペクト指向</a>的に横断的関心をマイクロサービス基盤側が用意して各Serviceに注入できるようにする必要があるね。Istio的なものが求められる」</p>

<p>など、寺田さんと話していた<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%B8%A5%E3%A5%A4%A5%EB">アジャイル</a>やDevOpsの話を日本の政治の話とつなげて、ソフトウェアエンジニアリングの発想で日本の政治をリ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3">アーキテクチャ</a>するアイディアが話されていて、面白おかしくありつつも、以外と的を得ているのではないかとおもって非常に印象的でした。</p>

<h1>最後に</h1>

<p>今回東京から来ていただいた寺田さんにクリス<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C6%A5%A3%A1%BC">ティー</a>ナさん、参加してくれた皆様、会場を提供してくれたCODEBASEさん、本当にありがとうございました！</p>

<p>いま僕は仕事でAzureを使っていますが、いま使っていること以上にAzureのテク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%CE%A5%ED">ノロ</a><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B8%A1%BC">ジー</a>を楽しみながらうまく使いこなし、世の中に大きな価値を出すプロダクト作りたいと考えていて、その一環で今後もAzureに関する勉強会などを開催していくと思います。</p>

<p>そのときはまた、皆様のご参加・ご協力をお願いいたします！</p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: Microsoft Hackfest(マイクロソフト ハックフェスト) | ペアプロした２日間、自社サービスをAKSに乗せる過程で学んだこと
BASENAME: 2019/09/02/060551
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 09/02/2019 06:05:51
-----
BODY:
<p>2019年8月21日(水)〜22日(木)の2日間、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Microsoft">Microsoft</a>の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%A6%A5%C9">クラウド</a>アドボケイトである寺田佳央さんに弊社に来ていただいてHackfestを開催して頂きました。</p>

<p>Hackfestとは、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Microsoft">Microsoft</a>のエンジニアの方と自社が抱える課題をテーマとして決め、それを一緒に解決していくというイベントです。</p>

<p>今回はAzureを使った基盤をテーマにしていて、Azureを使ったインフラを管理しているのは弊社で基本僕のみのため、寺田さんと2日間がっつり<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DA%A5%A2%A5%D7%A5%ED">ペアプロ</a>できるめちゃくちゃ貴重な機会でした。</p>

<p>非常に多くの学びが得られる濃密な体験だったため、その学びをブログで共有したいと思います。</p>

<h1>テーマ決め 〜 イシュー(課題)ドリブンでまず始める 〜</h1>

<p>今回Hackfestを開催していただけた経緯が２つあります。
１つは僕が自社のサービス基盤として<a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a>を使うことを考えていて、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a>を学んでいることを<a class="keyword" href="http://d.hatena.ne.jp/keyword/Twitter">Twitter</a>に投稿していたのを寺田さんに見ていただいたこと。
もう１つは寺田さんがちょうど <a class="keyword" href="http://d.hatena.ne.jp/keyword/Java">Java</a> や Azure <a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a> Serviceに関するコミュニティイベントを日本全国で行うという ジャパンツアーを行う計画をしており、その沖縄開催を行うので、その数日前にハックフェストをやりますか？という提案を頂いたことでした。</p>

<p>その経緯から、Azure <a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a> Serviceについての<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%CF%A5%C3%A5%AB%A5%BD%A5%F3">ハッカソン</a>をとりあえず始めるという流れになるかな〜と考えていたのですが、寺田さんがまず最初に行ったのは「御社の現状の開発体制やシステム/サービスの構成、そしてなぜ<a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a>を使いたいと考えていたのですか？」と僕らの現状と課題を<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D2%A5%A2%A5%EA">ヒアリ</a>ングするところからでした。</p>

<p>寺田さんが今回のハックフェストやその後行ったコミュニティイベントでも終始おっしゃっていたのが、「<a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a>も課題を解決するための道具でしかない。すべてを<a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a>でやるべきではなくて、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a>が得意でかつ自分達の課題に合っているところだけを使いましょう」ということでした。この姿勢は本当にプ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E9%A5%AF">ラク</a>ティカルで、僕も同じような姿勢で仕事しようとはしていますがたまに「この技術が流行っているから導入したい」になってしまうことがあります。しかしエンジニアとして「技術を用いて課題を解決すること」を職務とする以上、この姿勢は見習わないといけないと思いました。</p>

<p>寺田さんに<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D2%A5%A2%A5%EA">ヒアリ</a>ングしてもらった中で整理された現状と、僕が<a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a>で解決したいと考えている課題は以下の通りでした。</p>

<ul>
<li>現時点では数個のサービスが稼働しているだけなので<a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a>なしでも問題ない</li>
<li>ただし、今後1年以内にどんどん新しいサービスがリリース、既存サービスのアップデートがされていく可能性が非常に高い</li>
<li>製品開発のエンジニアはどんどん採用を強化していくが、SREの方は増えてもあと一人くらい。</li>
<li>最小人数のSREで今後加速度的に増えるサービス群のサーバー構築、CI/CDの構築、スケーラビリティの確保、ログ収集やモニタリングなどを扱っていくとSREがサービス提供の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DC%A5%C8%A5%EB%A5%CD%A5%C3%A5%AF">ボトルネック</a>になってしまう可能性があるので、それらを<a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a>とそのエコシステムを使うことで解決したい</li>
</ul>


<p>この課題を元に、「今動いている自社サービスのアプリを実際にAzure <a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a> Serviceに乗せてみて、CI/CD、スケーラビリティの確保、ログ収集・モニタリングの設定などを構築してみる」をテーマにHackfestを行うこととなりました。</p>

<h1>CloudShell 〜 ブラウザと<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%DE%A5%DB">スマホ</a>アプリで使えるシェル環境 〜</h1>

<p>Azure <a class="keyword" href="http://d.hatena.ne.jp/keyword/Portal">Portal</a>画面に入ったあとに<a class="keyword" href="http://d.hatena.ne.jp/keyword/AKS">AKS</a>などの各種リソースを作成する際、寺田さんからCloudShellというAzureの機能について紹介して頂きました。</p>

<p>CloudShellというはAzureのポータルから起動できるShell環境で、ブラウザからそのCloudShellを使うと<a class="keyword" href="http://d.hatena.ne.jp/keyword/Bash">Bash</a>や<a class="keyword" href="http://d.hatena.ne.jp/keyword/PowerShell">PowerShell</a>を使った各種コマンドが使えるようになります。
CloudShell上で作られたファイルなどはCloudShell用のFile Storageに保存されるため、そこに<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B7%A5%A7%A5%EB%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8">シェルスクリプト</a>を配置して実行するなんてことも可能ですし、CloudShell上から<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C8%EB%CC%A9%B8%B0">秘密鍵</a>を用いて<a class="keyword" href="http://d.hatena.ne.jp/keyword/SSH">SSH</a>で<a class="keyword" href="http://d.hatena.ne.jp/keyword/VM">VM</a>にログインすることもできます。
さらに、僕はこのとき初めて知ったのですがAzureの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%DE%A5%DB">スマホ</a>アプリが実はあり、その<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%DE%A5%DB">スマホ</a>アプリ上でCloudShellを起動することが出来ます。</p>

<p>PC上に<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%A6%A5%C9">クラウド</a>操作するコマンドを入れるのは、間違った操作で<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%A6%A5%C9">クラウド</a>を破壊できてしまうことと複数のアカウントを使っている場合、いまaz loginしているのはどれ？ってなる恐怖で抵抗がありましたが、CloudShellを使えばそんなに心配することなく az コマンドが使える上にもしものときはモバイルからも操作できるので、これは今後もよく使っていこうと思いました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fazure.microsoft.com%2Fja-jp%2Ffeatures%2Fcloud-shell%2F" title="Azure Cloud Shell – ブラウザーベースのコマンド ライン | Microsoft Azure" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://azure.microsoft.com/ja-jp/features/cloud-shell/">azure.microsoft.com</a></cite></p>

<h1>アプリケーション用のイメージ作り 〜イメージのサイズを小さくすること、開発効率向上のためのマルチステージビルド〜</h1>

<p>実際のアプリケーションを<a class="keyword" href="http://d.hatena.ne.jp/keyword/kubernetes">kubernetes</a>に乗せるというテーマだったので、まずアプリケーションのコンテナ化から開始しました。</p>

<p>開発環境自体はDocker + docker-compose で構築しているのでDockerfile自体はすでにあったのですが、それを単純にイメージにすると4GB超えの巨大なイメージになってしまったため、そのスリム化に着手することに。</p>

<p>開発でずっと使っていた環境をADDするだけだったものを、log系、tmp、cache、画像などアプリケーション自体とは関係ないファイル群を取り除いてイメージを作り直しても 1.4GBほどでまだまだでかい。。</p>

<p>最終的にこれ以上スリム化するのはアプリケーションの構造やFROMで設定しているイメージの変更など、大幅な変更が必要だと判断して一旦今回はそのまま行くことになりましたが、このイメージ作りの過程で寺田さんか以下の点を教わりました。</p>

<ul>
<li>なぜイメージサイズを小さくしなければいけないのか</li>
<li>開発効率を上げるために行うコンテナのマルチステージビルド</li>
</ul>


<h2>なぜイメージサイズを小さくしなければいけないのか</h2>

<h3>デプロイやスケールアウトにかかる時間が遅くなる</h3>

<p>コンテナで作ったアプリケーションをデプロイする、またスケールアウトするためには該当するバージョンのイメージをコンテナ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%C8%A5%EA">レジストリ</a>からダウンロードしてからそれを起動する必要があります。</p>

<p>イメージのサイズが大きいとその分ダウンロードにかかる時間が増えてしまい、それによってデプロイ・スケールアウトの速度が低下してしまいます。
同じサーバー上で同じイメージを使う場合にはキャッシュが効きますが、新しいバージョンのデプロイ、またホストマシンがマネージドサービスの場合などはキャッシュが効かずダウンロードが発生するケースが多いのでイメージサイズの大きさはかなり速度に悪影響を及ぼします。</p>

<p>本番環境にデプロイ・スケールアウトするとき以外にもCI/CDを組むと、それらを回すたびにイメージのダウンロードが発生し、その速度がCI/CDの速度の低下、引いては開発速度の低下につながってしまいます。</p>

<h3>ホストマシンのディスクサイズの圧迫</h3>

<p>Azure <a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a> Servicesを使う場合にNodeとして扱うサーバーは<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B2%BE%C1%DB%A5%DE%A5%B7%A5%F3">仮想マシン</a>になります。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%B2%BE%C1%DB%A5%DE%A5%B7%A5%F3">仮想マシン</a>なので当たり前ですがディスクサイズの制限があります。</p>

<p>ここに大きいサイズのイメージがずっと貯まり続けていくとディスクサイズの圧迫に繋がります。
ホストマシンであるNodeに入って不要なイメージを削除することで対応することは出来ますが、それを頻繁に気にしないといけない状態は良くないのでイメージサイズは小さい方がいいです。</p>

<h2>開発効率向上のためのマルチステージビルド</h2>

<p>イメージ作成の際、最初はひとつのDockerfileにすべての設定を書いていたのですが、あとからbase-DockerfileとDockerfile２つにファイルを分けてイメージ作成をするようにしました。</p>

<p>base-Dockerfileは実行環境に必要なものを作るDockerfileで、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Apache">Apache</a>や<a class="keyword" href="http://d.hatena.ne.jp/keyword/PHP">PHP</a>のインストールや設定などを入れていきます。
Dockerfileの方はアプリケーションコードを入れるためのDockerfileで、アプリケーションコードをADDしたりcomposer installなどをしています。</p>

<p>このように環境とアプリのDockerfileを分離することで、責任範囲を明確にし、依存の関係もはっきりします。
Dockerfileの書き方を変えてキャッシュの効き方を最適化する上でも効率的に作業できるようになりました。</p>

<h1>Container Registry 〜 コンテナイメージの保管場所 〜</h1>

<p>アプリケーションのDockerイメージを作ったあとは、Azure <a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a> Services上からイメージをダウンロードできるようにリモートのコンテナ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%C8%A5%EA">レジストリ</a>にプッシュしなければなりません。</p>

<p>Azure上にはContainer Registryのサービスがあるので、そちらを利用しました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fazure.microsoft.com%2Fja-jp%2Fservices%2Fcontainer-registry%2F" title="Azure Container Registry – Docker Registry | Microsoft Azure" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://azure.microsoft.com/ja-jp/services/container-registry/">azure.microsoft.com</a></cite></p>

<p>Container Registryを作るときに 「管理者ユーザー」を有効にするとユーザー名とパスワードによる認証でContainer Registryとプッシュ/プルすることができます。</p>

<p>管理者ユーザーを使わなくても azコマンドが使えれば azコマンド経由で<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%C8%A5%EA">レジストリ</a>にログインしてプッシュ/プルすることができるのでセキュリティ的にはこっちの方がよさそうです。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdocs.microsoft.com%2Fja-jp%2Fazure%2Fcontainer-registry%2Fcontainer-registry-get-started-portal%23log-in-to-registry" title="クイック スタート - Azure でのプライベート Docker レジストリの作成 - Azure portal" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://docs.microsoft.com/ja-jp/azure/container-registry/container-registry-get-started-portal#log-in-to-registry">docs.microsoft.com</a></cite></p>

<h1>Azure <a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a> Serviceを使いながらの基本概念を学ぶ</h1>

<p>実際にデプロイするイメージを作ったあとは、実際に<a class="keyword" href="http://d.hatena.ne.jp/keyword/AKS">AKS</a>を使いながら<a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a>の理解を深めていきました。</p>

<h2>Node</h2>

<p>Nodeとは、Kuberntesの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%B9%A5%BF">クラスタ</a>が乗るホストマシンの事です。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/AKS">AKS</a>の場合、Azureの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B2%BE%C1%DB%A5%DE%A5%B7%A5%F3">仮想マシン</a>をNodeとして使用しています。そしてNodeとして扱う<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B2%BE%C1%DB%A5%DE%A5%B7%A5%F3">仮想マシン</a>群は、ひとつの可用性セットという含めることでパッチ適応によるアップデートや物理障害時にすべてのNodeがダウンしないように管理されています。</p>

<p>しかし、あくまで単一リージョン内の可用性セットにNodeが含まれている状態のため、リージョン全体に対する障害などは保護されていません。</p>

<p>リージョン障害などからも保護するには、<a class="keyword" href="http://d.hatena.ne.jp/keyword/AKS">AKS</a><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%B9%A5%BF">クラスタ</a>を別リージョンにも作成し、上流にAzure Traffic Managerを配置してルーティングを管理する必要があります。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/AKS">AKS</a>での事業継続性の担保や<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%B6%A5%B9%A5%BF%A5%EA%A5%AB%A5%D0%A5%EA">ディザスタリカバリ</a>ーについてはAzureドキュメントが用意されているのでそちらを参考にすると良さそうです。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdocs.microsoft.com%2Fja-jp%2Fazure%2Faks%2Foperator-best-practices-multi-region" title="Azure Kubernetes Services (AKS) での高可用性とディザスター リカバリー" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://docs.microsoft.com/ja-jp/azure/aks/operator-best-practices-multi-region">docs.microsoft.com</a></cite></p>

<h2>Pod</h2>

<p>Podとは、「複数のコンテナを束ねたもの」です。
Kuberntesが扱う最小単位がこのPodになります。</p>

<p>Podの特徴として、「Podとして束ねられたコンテナは必ず同一ノードにデプロイされる」という特徴があります。</p>

<p>例えば<a class="keyword" href="http://d.hatena.ne.jp/keyword/PHP">PHP</a>アプリケーションのよくある構成として、前段にnginxをおいてリク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>トを受け取けから後ろにいる<a class="keyword" href="http://d.hatena.ne.jp/keyword/php">php</a>-fpmに流してで処理を行うという2段構成になることがあります。
その構成においてnginxと<a class="keyword" href="http://d.hatena.ne.jp/keyword/php">php</a>-fpmが動くNodeが別のNodeになるとマシンを超えたネットワーク通信が発生しパフォーマンスがその分悪化してしまいます。それをPodという単位に束ねることで同一ノードにデプロイされ、通信のオーバヘッドが抑えられる効果があるので、依存関係の強いコンテナ同士はPodにまとめる必要があります。</p>

<p>Pod自体は単体で動作しますが、それ自体に<a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a>の特徴として取り上げられる以下のような機能は持っていません。</p>

<ul>
<li>ローリングアップデート</li>
<li>ヘルスチェック</li>
<li>自動修復機能</li>
<li>スケール・オートスケール</li>
</ul>


<h2>Deployment</h2>

<p>各Podに対して、ローリングアップデート、ヘルスチェック、自動修復機能、スケール・オートスケールなどを設定しているのがDeploymentです。
Deploymentを定義する<a class="keyword" href="http://d.hatena.ne.jp/keyword/yaml">yaml</a>の中で、アップデート方法の定義やヘルスチェックの定義(liveness, readiness)、スケール(replicas)などを定義すると<a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a>に反映させることができます。</p>

<p>今回の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%CF%A5%C3%A5%AB%A5%BD%A5%F3">ハッカソン</a>では、<a class="keyword" href="http://d.hatena.ne.jp/keyword/yaml">yaml</a>レベルではDeploymentを最小単位として操作しました。</p>

<h2>Service</h2>

<p>Serviceとは、「論理的にまとめられた<a class="keyword" href="http://d.hatena.ne.jp/keyword/Pods">Pods</a>群に対する通信ポリシーを定義するもの」です。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a>上にデプロイされたPodは各ノードに配置されそれぞれプライベートの<a class="keyword" href="http://d.hatena.ne.jp/keyword/IP%A5%A2%A5%C9%A5%EC%A5%B9">IPアドレス</a>を持っています。
しかし新しいバージョンのアプリをリリースするたびに新しいPodが作られ古いPodは削除されていくので、その<a class="keyword" href="http://d.hatena.ne.jp/keyword/IP%A5%A2%A5%C9%A5%EC%A5%B9">IPアドレス</a>に対して通信することは適切ではありません。</p>

<p>Serviceは特定の<a class="keyword" href="http://d.hatena.ne.jp/keyword/Pods">Pods</a>群に対する通信を管理し、そのサービスに対しての<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3">ドメイン</a>が自動で割り振られます。その<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3">ドメイン</a>に対してリク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>トを送るとServiceが管理している<a class="keyword" href="http://d.hatena.ne.jp/keyword/Pods">Pods</a>群に対してリク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>トが行くという仕組みになっています。</p>

<p>Serviceはあくまで<a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%B9%A5%BF">クラスタ</a>内部での通信を管理するもののため、Service自体を外部からのリク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>トを受けれるように公開することは推奨されていません(Serviceの指定をLoadBalancerにすることで外部公開することができるが、やるべきではない)</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%B9%A5%BF">クラスタ</a>外部からの通信を受けれるようにするには、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Ingress">Ingress</a>というものをつかいます。</p>

<h2><a class="keyword" href="http://d.hatena.ne.jp/keyword/Ingress">Ingress</a></h2>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Ingress">Ingress</a>は外部サービスのリク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>トを受けつけ、それを<a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%B9%A5%BF">クラスタ</a>内部にあるServiceにルーティングする役割をもっています。</p>

<p>基本的にnginxを<a class="keyword" href="http://d.hatena.ne.jp/keyword/ingress">ingress</a>として<a class="keyword" href="http://d.hatena.ne.jp/keyword/AKS">AKS</a><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%B9%A5%BF">クラスタ</a>内にデプロイされ使用します。まだプレビューの段階ですが、Azure Load Balancerというマネージドサービスを使うこともできるようです。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdocs.microsoft.com%2Fja-jp%2Fazure%2Faks%2Fload-balancer-standard" title="プレビュー - Azure Kubernetes Service (AKS) で Standard SKU ロード バランサーを使用する" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://docs.microsoft.com/ja-jp/azure/aks/load-balancer-standard">docs.microsoft.com</a></cite></p>

<h1><a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a>、そしてAzure <a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a> Serviceのメリットはなにか？</h1>

<p>今回のハックフェストを通して、いままで朧げだった<a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a>そしてAzure <a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a> Serviceによって何を得られるかがわかってきました。</p>

<h2>ブルーグリーンデプロイメントにより安全なリリース</h2>

<p>ブルーグリーンデプロイメントとは、新しいバージョンのアプリをリリースする際に既存の環境の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9">ソースコード</a>をアップデートするのではなく、新しいバージョンの環境(サーバー)自体を作り、リク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>ト向き先を変えることでリリースデプロイを行うことです。
これにより、もし新しいバージョンのアプリに不具合があったとしても前の環境をしばらく残しておけば向き先を変えることで即座に復旧することができます。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a>にブルーグリーンデプロイメントを行うには、ブルーとグリーン２つのDeploymentを作り、そこへのリク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>トをServiceのフィルタリングで切り替える方法があります。</p>

<p>例えばblue-deployment.<a class="keyword" href="http://d.hatena.ne.jp/keyword/yaml">yaml</a>とgreen-deployment.<a class="keyword" href="http://d.hatena.ne.jp/keyword/yaml">yaml</a>というファイルを作り、そのファイルのラベル付けでversionというラベルにblueとgreenをそれぞれ設定しておきます。Service上の通信ポリシーではblueのみ通信が行くように設定しておきます。</p>

<p>新しいバージョンのアプリをデプロイする際にはgreen-deployment.<a class="keyword" href="http://d.hatena.ne.jp/keyword/yaml">yaml</a>の方に新しいDockerイメージを名前とラベル(webapp:2.0など)を指定して<a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%B9%A5%BF">クラスタ</a>上にデプロイします。デプロイが完了したらServiceの通信ポリシーをblueからgreenに変更すると、即座にgreenがリリースされることになります。もし不具合が発生したらService通信ポリシーをgreenからblueに変更すると、前のバージョンに即戻すことができます。</p>

<p>これをさらに応用すると、greenをデプロイしたあと、一般ユーザーに公開している<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3">ドメイン</a>からのリク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>トはblue、開発者用の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3">ドメイン</a>から来たリク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>トはgreenにリク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>トを流すという風に設定することで、本番とまったく同じ環境で安全に動作検証をして問題なければリリースと言うフローを作ることも可能になります。</p>

<p>このブルーグリーンデプロイメントによる安全なリリースにより、以下の効果があると考えています。
- 安全を確保するための、夜間作業によるリリース作業を減らせる
- 本番でしか起きない不具合やパフォーマンス問題の発見を早められる
- 簡単に元に戻せることにより、事前のクオリティ担保のためテストを減らしてリリース頻度と速度を高めることができる</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a>を使わなくても、自分で仕組みを構築するなどすれば出来なくはないですが、それを簡単に作れる仕組みがあるのは非常に魅力的に感じました。</p>

<h2>Container Instanceを使ったNodeの制限を超えたスケーラビリティ</h2>

<p>これはAzure <a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a> Servicesを使った場合のメリットになります。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a>は複数のNodeの上に<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%B9%A5%BF">クラスタ</a>を作ってPodを稼働させるため、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%B9%A5%BF">クラスタ</a>に参加しているNodeの合計のリリース量(CPU，メモリ、ディスク)によってPodがスケールアウトできる数に物理的な制限が発生します。
もちろんあとからNodeを追加することも可能ですが、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%B9%A5%BF">クラスタ</a>へのNodeの追加には非常に時間がかかるため突発的または計画的に急激なアクセスが発生する場合にNodeの数を毎度増減するのには向いていません。</p>

<p>Azure Kuberentes Servicesの場合、Podを稼働させる環境をNode上からContainer InstancesというAzureのマネージドサービスに数分レベルで切り替えることができ、Container Instancesに切り替えるとNodeの制限を超えた数のPodを走らせる事が可能になります。</p>

<p>これにより、通常稼働時に必要十分なNodeだけを動かしておき、プッシュ通知やイベントなどの急激なアクセス増があるときのみContainer Instancesに切り替えてスケールアウトし、通常に稼働戻ったらまたNodeに戻すことでコストの最適化をしながららスケーラビリティを確保することができます。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fazure.microsoft.com%2Fja-jp%2Fservices%2Fcontainer-instances%2F" title="Azure Container Instances | Microsoft Azure" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://azure.microsoft.com/ja-jp/services/container-instances/">azure.microsoft.com</a></cite></p>

<h2>infrastructure as codeの実現</h2>

<p>現在の僕らのインフラ環境は、Azure WebAppを使っている場合と単純な<a class="keyword" href="http://d.hatena.ne.jp/keyword/VM">VM</a>を使っているもの、単純な<a class="keyword" href="http://d.hatena.ne.jp/keyword/VM">VM</a>を使っているものもAnsibleによって設定がコード化されているものとされていないものなどが乱立している状態です。また、それらへデプロイフローもそれぞれ違う状態になっています。</p>

<p>これを<a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a>化することにより、インフラ環境やデプロイフローなどは<a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a>の<a class="keyword" href="http://d.hatena.ne.jp/keyword/yaml">yaml</a>ファイルでコード化・共<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C4%CC%B2%BD">通化</a>され、アプリの実<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B9%D4%B4%F0">行基</a>盤はDockerfileによるコード化されることになります。</p>

<p>これによって、サービス毎に作らなければならないインフラやDevOps周りの共通部分を再利用しやすくなり、製品開発チームが増えサービスが増えていくときにSREが<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DC%A5%C8%A5%EB%A5%CD%A5%C3%A5%AF">ボトルネック</a>となることが防げると考えられました。</p>

<h1><a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a>のデメリットはなにか？</h1>

<p>今回のハックフェスト通して寺田さんは常に「すべてを<a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a>でやるべきではない。<a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a>も<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B6%E4%A4%CE%C3%C6%B4%DD">銀の弾丸</a>ではない」ということをおっしゃっていました。寺田さんが明示的におっしゃっていたことと、僕が考えたことを交えながら<a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a>のデメリットも書いておこうと思います。</p>

<h2><a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a>自体のバージョンアップへの追従</h2>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a>自体のバージョンアップが3ヶ月に一度リリースされます。その度に大きな機能追加が発生したり、いま使っている<a class="keyword" href="http://d.hatena.ne.jp/keyword/yaml">yaml</a>ファイルの記法が変わり新しく作り直す必要が発生する可能性があります。</p>

<p>Azure <a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a> Serviceのバージョンポリシーが最新から4バージョンまでをサポートするという方針です。</p>

<p>それはつまり、「いま最新バージョンの<a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a>を使っても来年には必ずバージョンアップをしないといけない」ということです。</p>

<p>4バージョンのアップデートはかなり大変のため、現実的には3ヶ月または半年に一度はバージョンアップしていくという方針になるでしょう。</p>

<p>このバージョンの作業も複雑な構成の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%B9%A5%BF">クラスタ</a>を組めば組むほど、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B5%A1%BC%A5%C9%A5%D1%A1%BC%A5%C6%A5%A3">サードパーティ</a>のライブラリを入れれば入れるほど困難になっていきます。</p>

<h2><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8">コンポーネント</a>が増えることによる障害発生のデバック・パフォーマンスチューニングなどの難易度が上がる</h2>

<p>普通に<a class="keyword" href="http://d.hatena.ne.jp/keyword/VM">VM</a>上でWebアプリをリリース場合、よくある構成は<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%ED%A1%BC%A5%C9%A5%D0%A5%E9%A5%F3%A5%B5%A1%BC">ロードバランサー</a> -> <a class="keyword" href="http://d.hatena.ne.jp/keyword/VM">VM</a>(WebApp) -> DB という3段構成です。
これを<a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a>上の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%B9%A5%BF">クラスタ</a>に載せた場合、以下のようになります。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Ingress">Ingress</a>(<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%ED%A1%BC%A5%C9%A5%D0%A5%E9%A5%F3%A5%B5%A1%BC">ロードバランサー</a>) -> Service -> <a class="keyword" href="http://d.hatena.ne.jp/keyword/Pods">Pods</a>(WebAppのコンテナ群)/Node -> DB</p>

<p>通信経路上に<a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a>が扱っている<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8">コンポーネント</a>が登場し、障害発生した場合やパフォーマンスチューニングを行う場合はそれらの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8">コンポーネント</a>をすべて考慮にいれて対応しなければなりません。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a>がもたらした大きな柔軟性とそれによって得られるアジリティはこれら<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8">コンポーネント</a>、抽象化の層によってもたらされています。逆に障害時やパフォーマンスチューニング時はその抽象化の層を降りていく必要があり、抽象化の数だけ降りなければいけないのはいわば当然の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A5%EC%A1%BC%A5%C9%A5%AA%A5%D5">トレードオフ</a>になります。</p>

<h1>僕が考える、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a>とはなんのための、そして誰のためのソフトウェアか</h1>

<p>これも寺田さんがおっしゃったことではなく、あくまで今回のハックフェストを通して僕が考えたことです。</p>

<p>僕は今回のハックフェストを通して、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a>は「少人数のSREチームで、たくさんのマシンリソースを効率的に使いながら、たくさんのサービス、そしてそのサービス開発自体を支えるためのソフトウェア」だと理解しました。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a>は、素晴らしい機能群によってインフラに大きな柔軟性をもたらし、それによってデプロイ、復旧、スケールアウト、マルチバージョンのリリースによるABテストなど様々なことを簡単に実現できるようにしてくれます。しかも<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%B9%A5%BF">クラスタ</a>内のNodeに集積してコンテナを稼働させることによって効率的にマシンリソースを使うことも可能にしてくれます。</p>

<p>しかしその<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A5%EC%A1%BC%A5%C9%A5%AA%A5%D5">トレードオフ</a>として、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a>自体のバージョンアップへの追随やトラブル時に<a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a>の抽象化を理解して降りていく必要性が発生します。<a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a>を導入する場合、イニシャルコストよりもこの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E9%A5%F3%A5%CB%A5%F3%A5%B0%A5%B3%A5%B9%A5%C8">ランニングコスト</a>の方をよく理解しておいた方が良いと思いました。</p>

<p>大きなメリットは得られるが、インフラを管理するSREのようなエンジニアが不要になるものではなく、むしろそこを管理するSREは<a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a>を理解して使いこなす必要があるのでよりスキルが必要かもしれません</p>

<p>少人数の優秀なSREで<a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a>を扱い多くの製品や開発チームを支えることができれば、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EC%A5%D0%A5%EC%A5%C3%A5%B8">レバレッジ</a>が効いて非常に良い投資となりますが、逆に製品が少ない、また開発チーム自体が少ないのであれば投資対効果は低くなりがちで、Azure Web Appなどのマネージドサービスを使う方がメリットが大きいと思います</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a>というソフトウェア自体は面白いですし、今後もキャッチアップを続けていきますが、自分達の事業や開発チームにとってホントに必要なタイミングは見極めた上で導入は検討していきたいと思います。</p>

<h1>Azure DevOps 〜 CI/CDに必要な機能全部入りの最強<a class="keyword" href="http://d.hatena.ne.jp/keyword/SaaS">SaaS</a> 〜</h1>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/AKS">AKS</a>でアプリを動かすというのも一通り終わったあと、寺田さんのおすすめのAzure DevOpsというツールを使ってCI/CDのパイプラインを作ることになりました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fazure.microsoft.com%2Fja-jp%2Fservices%2Fdevops%2F" title="Azure DevOps Services | Microsoft Azure" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://azure.microsoft.com/ja-jp/services/devops/">azure.microsoft.com</a></cite></p>

<p>Azure DevOpsは、まさにDevOpsのために必要な機能がすべて入っている<a class="keyword" href="http://d.hatena.ne.jp/keyword/SaaS">SaaS</a>で、タスク管理のためカンバンなどが使えるBoard、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9">ソースコード</a>を保管するためのプライベートのGit<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EA%A5%DD%A5%B8%A5%C8%A5%EA">リポジトリ</a>のRepos、CI/CDを作るための Pipelineなどが使えます。</p>

<p>今回はCI/CDを作るということで、
ReposというGit<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EA%A5%DD%A5%B8%A5%C8%A5%EA">リポジトリ</a>に<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9">ソースコード</a>をpushすると、
Pipelineのビルドパイプラインが動いて新しいバージョンのDockerイメージをビルドしContainer Registryにプッシュし、
Pipelineのリリースパイプラインによって、新しいバージョンイメージが<a class="keyword" href="http://d.hatena.ne.jp/keyword/kubernetes">kubernetes</a>上にデプロイされる
というパイプラインを作っていきました。</p>

<p>これらのパイプラインを作るのがすべて<a class="keyword" href="http://d.hatena.ne.jp/keyword/GUI">GUI</a>でタスクを選択して設定を入れていくだけ構築することができ、大体2~3時間程度ですべて構築することができました。
また、このパイプラインは<a class="keyword" href="http://d.hatena.ne.jp/keyword/GUI">GUI</a>だけでなく<a class="keyword" href="http://d.hatena.ne.jp/keyword/yaml">yaml</a>で定義することもできます。</p>

<p>Azureとのインテグレーションがかなりよく出来ているので、本番環境をAzureで構築している身としては<a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a>は使わなくてもこのAzure DevOpsはぜひ導入していきたいと思えました。</p>

<h1><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DA%A5%A2%A5%D7%A5%ED">ペアプロ</a>/モブプロの効能</h1>

<p>今回のハックフェストはずっと寺田さんと<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DA%A5%A2%A5%D7%A5%ED">ペアプロ</a>する形で進めていたのですが、僕にとって今年一番の集中力が発揮され、2日間のハックフェスト中まったく集中が切れることなくすすめる事ができました。
集中力が深く長時間維持できたことでかなり効率よくハックフェストをすすめることができ、当初3日間やる予定だったものが2日間で終わらせることができ、僕も寺田さんもヘロヘロになって「明日は休みましょうw」となる程でした。</p>

<p>寺田さんが一緒だったということが非常に大きかったとは思いますが、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DA%A5%A2%A5%D7%A5%ED">ペアプロ</a>/モブプロすることにより</p>

<ul>
<li>一人でやるよりも「いまやるべきこと」が明確化され、集中しやすい。</li>
<li>予期しないことがあってハマった場合、複数の脳で解決策を探索して議論して素早くトライすることで解決が早い</li>
<li>一緒に同じ画面を見て作業することで、予期しない学びが得られる(<a class="keyword" href="http://d.hatena.ne.jp/keyword/bash">bash</a>のショートカットやデバックの仕方など)</li>
</ul>


<p>のような効果を身を持って体感することができました。</p>

<p>今回はハックフェストでしたが、実際の業務でも<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DA%A5%A2%A5%D7%A5%ED">ペアプロ</a>/モブプロを取り入れてみて生産性が上がるかどうかぜひ試して見たいと思いましたし、僕がこれからコミュニティで勉強会などやるときも<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DA%A5%A2%A5%D7%A5%ED">ペアプロ</a>/モブプロの使ってやってやりたいとおもいます。</p>

<h1>最後に</h1>

<p>今回のハックフェストを寺田さんに開催していただいたことで、僕個人としてはAzure/<a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a>に限らないほどエンジニアとして多くの学びを得る事ができました。</p>

<p>会社としても、実際にAzure <a class="keyword" href="http://d.hatena.ne.jp/keyword/Kubernetes">Kubernetes</a> Serviceを使うべきかどうかの技術検証を、わずか2日間のハックフェストで実際に動かしながら把握することができたのは非常に投資対効果が大きかったと考えています。</p>

<p>今回学んだことを実際の現場に活かして、より良いサービスを作っていきたいと思います。</p>

<p>寺田さん、今回は本当にありがとうございました！！！</p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: Azure Queue StorageをバックエンドにしたPHP製のジョブキューライブラリ「Backjob」を作った
BASENAME: 2019/07/16/195137
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 07/16/2019 19:51:37
-----
BODY:
<p>AzureにはQueue Storageというマネージドサービスがあるのですが、そのQueueStorageをバックエンドとして利用した<a class="keyword" href="http://d.hatena.ne.jp/keyword/PHP">PHP</a>製のジョブキューライブラリを作りました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2FArakaki-Yuji%2Fbackjob" title="Arakaki-Yuji/backjob" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/Arakaki-Yuji/backjob">github.com</a></cite></p>

<h1>なぜ作ったのか？</h1>

<p>今自分の会社で作っているプロダクトの特性がWrite Heavyなアプリケーションになっており、ユーザーがプッシュ通知などで大量アクセスするとWebApp側はスケールできても<a class="keyword" href="http://d.hatena.ne.jp/keyword/RDB">RDB</a>側がスケールできないという課題がありました。</p>

<p>それに加えて、2年程まえに自分達で自作していたジョブキューシステムがあったのですがそれがアプリケーションで使っている<a class="keyword" href="http://d.hatena.ne.jp/keyword/RDB">RDB</a>をそのままバックエンドとして使用しており、その性能限界により「ジョブ登録が大量に来るとロック待ちが発生し障害の元となる」、「ジョブが詰まったときにワーカーを増やして処理性能をあげたいが<a class="keyword" href="http://d.hatena.ne.jp/keyword/RDB">RDB</a>のパフォーマンスネックによリこれ以上ワーカーを増やせない」という問題もありました。</p>

<p>その課題を解決するために、<a class="keyword" href="http://d.hatena.ne.jp/keyword/RDB">RDB</a>ではなくAzure Queue Storageを用いたジョブキューライブラリを作り、ユーザーからのリク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>トで直接<a class="keyword" href="http://d.hatena.ne.jp/keyword/RDB">RDB</a>に書き込みをするのではなく新しいジョブキュー経由で書き込みをするように変更することでDB負荷の軽減と既存ジョブキューライブラリの課題を解決させたいと考えました。</p>

<p>ここでLaravelなどのモダンな<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク</a>を使っていれば標準なジョブキューライブラリがあると思いますが、私達が利用する<a class="keyword" href="http://d.hatena.ne.jp/keyword/FuelPHP">FuelPHP</a>にはそのようなものがなく、また他の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク</a>で利用されるジョブキューライブラリをみてもRedisや<a class="keyword" href="http://d.hatena.ne.jp/keyword/AWS">AWS</a>のSQSに対応していてもAzureのQueue Storageには対応していない状況だったため自分で作りました。</p>

<h1>インストール</h1>

<p>composer でインストールできるように公開しているので、以下の内容をプロジェクトのcomposer.<a class="keyword" href="http://d.hatena.ne.jp/keyword/json">json</a>に追記してください。</p>

<pre class="code :php" data-lang=":php" data-unlink>{
    &#34;require&#34;: {
        &#34;arakaki-yuji/backjob&#34;: &#34;^0.0.5&#34;
    }
}</pre>


<h1>使い方</h1>

<h2>自分のJobを定義する</h2>

<p>以下のように\Backjob\Jobクラスを継承して自分の独自Jobを定義します。</p>

<pre class="code :php" data-lang=":php" data-unlink>class CustomJob extends \Backjob\Job
{
    /**
     * You must define a run method.
     * this method is called when dequeued and run
     */
    public function run()
    {
        $msg = $this-&gt;params[&#39;message&#39;];
        return $msg;
    }
    
    /**
     * this method is optional.
     * if you define success method, it is called after run method successed.
     */
    public function success()
    {
        return &#39;success job&#39;;
    }
    
     /**
     * this method is optional.
     * if you define fail method, it is called after run method failed.
     */
    public function fail()
    {
        return &#39;success job&#39;;
    }
}</pre>


<p>runメソッドはJobが実行されるときに呼ばれるメソッドです。このrunメソッドの中でこのJobが実行したいタスクの実装を書いていきます。
Jobを登録するときにパラメータが渡せるようになっているのですが、そのパラメータは$this->paramsの中に<a class="keyword" href="http://d.hatena.ne.jp/keyword/%CF%A2%C1%DB%C7%DB%CE%F3">連想配列</a>で入っています。
このrunメソッドは必ず定義してください。</p>

<p>failメソッドとsuccessメソッドは実装してもしなくても構いません。</p>

<p>successメソッドはrunメソッドが正常に実行されたあとに呼ばれるメソッドです。</p>

<p>failメソッドはrunメソッド内で例外やエラーが発生したときに呼ばれるメソッドです。</p>

<p>それぞれ自分たちのアプリケーションの要件に合わせて利用してください。</p>

<h2>Jobの登録、そして登録されたジョブの実行の仕方</h2>

<p>キューへのジョブの登録、そしてキューからジョブを取り出して実行するために利用するBackjobクラスの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス</a>を作ります。</p>

<p>引数にはQueue Storageのストレージアカウント名、Queue Storageの名前、ストレージアカウントのアクセスキーを与えます。</p>

<pre class="code :php" data-lang=":php" data-unlink>$backjob = new \Backjob\Backjob::factory($storageAccountName, $queueName, $accessKey);
</pre>


<p>ジョブをキューストレージに登録するには、登録したいジョブのクラスメソッド makeJobメソッドに引数としてジョブに渡したいパラメータを<a class="keyword" href="http://d.hatena.ne.jp/keyword/%CF%A2%C1%DB%C7%DB%CE%F3">連想配列</a>で渡し、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス</a>化します。</p>

<p>その後、Backjob<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス</a>の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス</a>メソッド、queueの引数としてジョブを渡して上げればジョブキューへの登録が完了します。</p>

<pre class="code" data-lang="" data-unlink>$params = [&#39;message&#39; =&gt; &#39;Hello Backjob&#39;];
$job = CustomeJob::makeJob($params);
$backjob-&gt;queue($job);</pre>


<p>ジョブキューに登録されたジョブを実行するには、Backjob<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス</a>のrunメソッドを実行します。
runメソッドを実行すると、ジョブキューからひとつのジョブを取り出し、そのジョブをrunメソッドを実行して処理を行います。</p>

<pre class="code :php" data-lang=":php" data-unlink>$backjob = new \Backjob\Backjob::factory($storageAccountName, $queueName, $accessKey);
$backjob-&gt;run(); // =&gt; &#39;Hello Backjob&#39;</pre>


<p>このrunメソッドをcronで叩く、もしくは<a class="keyword" href="http://d.hatena.ne.jp/keyword/daemon">daemon</a>化してループで呼び続けるコードをそれぞれ使っている<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク</a>の流儀に沿って作っていただければOKです。</p>

<h1>今後について</h1>

<p>自分達のプロダクトに必要だったから作ったライブラリなので、今後も必要に応じてアップデートはしていく予定です。</p>

<p>いま考えている範囲だと、Azure Queue Storageの性能限界を超えた量のジョブを処理する必要になった場合にバックエンドに用意するQueue Storageを複数設定できるようにして負荷分散に対応する、またqueueへの登録が失敗したときのretry回数やtimeoutの設定できるようにするなどはやりたいと考えています。</p>

<p>とりあえず現時点で一週間で40万件以上のジョブを処理しているので、ちゃんと使えると思います。</p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: AzureのCosmosDBをREST API経由で操作するPHPライブラリを作った
BASENAME: 2019/07/09/094245
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 07/09/2019 09:42:45
-----
BODY:
<p>AzureのCosmosDBを使ったあれこれを作る過程で、CosmosDBのRESTAPIを叩く<a class="keyword" href="http://d.hatena.ne.jp/keyword/PHP">PHP</a>ライブラリが必要になったので作りました。</p>

<p>あんまり特別なことはしていないくて、ほんとにただ<a class="keyword" href="http://d.hatena.ne.jp/keyword/Rest%20API">Rest API</a>をラップしたものです。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2FArakaki-Yuji%2Fcosmosdb-client" title="Arakaki-Yuji/cosmosdb-client" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/Arakaki-Yuji/cosmosdb-client">github.com</a></cite></p>

<h1>インストール</h1>

<p>composer.<a class="keyword" href="http://d.hatena.ne.jp/keyword/json">json</a>にarakaki-yuji/cosmosdb-clientを追加してください。</p>

<pre class="code lang-json" data-lang="json" data-unlink>
<span class="synSpecial">{</span>
    &quot;<span class="synStatement">require</span>&quot;: <span class="synSpecial">{</span>
        &quot;<span class="synStatement">arakaki-yuji/cosmosdb-client</span>&quot;: &quot;<span class="synConstant">^0.0.5</span>&quot;
    <span class="synSpecial">}</span>
<span class="synSpecial">}</span>
</pre>


<h1>使い方</h1>

<h2>初期化</h2>

<pre class="code lang-php" data-lang="php" data-unlink>
$client = new \CosmosdbClient\CosmosdbClient($cosmosdbSecretKey, $cosmosdbAccountName);
</pre>


<h2>Databaseの操作</h2>

<pre class="code lang-php" data-lang="php" data-unlink>// create database
$client-<span class="synError">&gt;</span>database-<span class="synError">&gt;</span>create('database_id');

// list database
$client-<span class="synError">&gt;</span>database-<span class="synError">&gt;</span>list();

// get database
$client-<span class="synError">&gt;</span>database-<span class="synError">&gt;</span>get('database_id');

// delete database
$client-<span class="synError">&gt;</span>database-<span class="synError">&gt;</span>delete('database_id');
</pre>


<h2>Collectionの操作</h2>

<pre class="code lang-php" data-lang="php" data-unlink>// create collection
$indexingPolicy = ['indexingMode' =<span class="synError">&gt;</span> 'lazy'];
$partitionKey = ['paths' =<span class="synError">&gt;</span> ['/Name']];
$client-<span class="synError">&gt;</span>collection-<span class="synError">&gt;</span>create('database_id', 'collection_id', $indexingPolicy, $partitionKey);

// list collection
$client-<span class="synError">&gt;</span>collection-<span class="synError">&gt;</span>list('database_id');

// get collection
$client-<span class="synError">&gt;</span>collection-<span class="synError">&gt;</span>get('database_id', 'collection_id');

// replace/update collection
$client-<span class="synError">&gt;</span>collection-<span class="synError">&gt;</span>replace('database_id', 'collection_id', $indexingPolicy, $partitionKey);

// delete collection
$client-<span class="synError">&gt;</span>collection-<span class="synError">&gt;</span>delete('database_id', 'collection_id');
</pre>


<h2>Documentの操作</h2>

<pre class="code lang-php" data-lang="php" data-unlink>// create document
$doc = [
    'id' =<span class="synError">&gt;</span> 1,
    'name' =<span class="synError">&gt;</span> 'Yuji Arakaki',
    'email' =<span class="synError">&gt;</span> 'example@test.com'
];
$partitionKeyValue = $doc['name'];
$client-<span class="synError">&gt;</span>document-<span class="synError">&gt;</span>create('database_id', 'collection_id', $doc, $partitionKeyValue);

// list document
$client-<span class="synError">&gt;</span>document-<span class="synError">&gt;</span>list('database_id', 'collection_id');

// get document
$client-<span class="synError">&gt;</span>document-<span class="synError">&gt;</span>get('database_id', 'collection_id', $doc['id'], $partitionKeyValue);

// replace/update document
$client-<span class="synError">&gt;</span>document-<span class="synError">&gt;</span>replace('database_id', 'collection_id', $doc, $partitionKeyValue);

// query document
$query = &quot;SELECT * FROM c WHERE c.name = <span class="synPreProc">@name</span>&quot;;
$parameters = [['name' =<span class="synError">&gt;</span> '<span class="synPreProc">@name</span>', 'value' =<span class="synError">&gt;</span> 'Yuji Arakaki']];
$client-<span class="synError">&gt;</span>document-<span class="synError">&gt;</span>query('database_id', 'collection_id', $query, $parameters);

// delete document
$client-<span class="synError">&gt;</span>document-<span class="synError">&gt;</span>delete('database_id', 'collection_id', $doc['id'], $partitionKeyValue);
</pre>


<p>良いデザインかどうかはさておき、<a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a>のラッパーは筋力さえあれば誰でも作れる。</p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: ありがとう、ハッカーズチャンプルー！ ハッカーズチャンプルー2019のコアメンバーとして運営 &amp; Paykeとしてスポンサーセッションしてきました！
BASENAME: 2019/07/02/112859
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 07/02/2019 11:28:59
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/a/arakaji-yuu/20190702/20190702102230.jpg
-----
BODY:
<p>今年も<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%CF%A5%C3%A5%AB%A1%BC">ハッカー</a>ズチャンプルーのコ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%E1%A5%F3%A5%D0%A1%BC">アメンバー</a>として運営と、あとスポンサーセッションでの登壇もしてきました！</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fhackers-champloo.org%2F2019%2F" title="Hackers Champloo" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://hackers-champloo.org/2019/">hackers-champloo.org</a></cite></p>

<p>ツイートのまとめはこちらから。
今年もすごいツイート数で、すべてを見るのに数時間かかりそう。。。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Ftogetter.com%2Fli%2F1371372" title="ハッカーズチャンプルー2019 まとめ" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://togetter.com/li/1371372">togetter.com</a></cite></p>

<h1>Paykeとして、スポンサーセッションでの登壇</h1>

<p>今年は僕の所属するPaykeとして<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%CF%A5%C3%A5%AB%A1%BC">ハッカー</a>ズチャンプルーのスポンサーにも参加させて頂き、今回スポンサーセッションを行いました。</p>

<p>登壇内容はこちらになります。</p>

<script async class="speakerdeck-embed" data-id="b486afd11a814ff39b4b9620680dc376" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>


<p>スポンサーセッションは初めて行ったのですが意外と登壇内容に気を使うということに今回始めて気が付きました。</p>

<p>ただ技術の話をしても良かったのですが、せっかく沖縄のエンジニアが数多く聞いてもらえる機会なので、Paykeという会社についも興味を持ってもらいたい。</p>

<p>しかし、ただ会社紹介をしても興味を持ってもらえないだろうし、自分自身も話をしておもろしくない。</p>

<p>そこで自分が日頃考えていて熱量持って話せる<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%CF%A5%C3%A5%AB%A1%BC">ハッカー</a>ズチャンプルーとエンジニアコミュニティへの感謝の気持ちと、会社紹介を交えるエモい登壇となりました。</p>

<p>最後は時間切れの指笛がなってしまいましたが、なんとか一番伝えたいメッセージまでは届いたので良かったですw</p>

<h1>コ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%E1%A5%F3%A5%D0%A1%BC">アメンバー</a>としての準備「スタッフ・登壇者用イベントTシャツ制作」</h1>

<p>僕の今イベント準備における最大のミッションは「スタッフ・登壇者用のイベントTシャツの制作」だったのですが、沖縄に新たに生まれたデザイナーコミュニティ「D#(ディーハッシュ)」の緑間さんと外山さんのご協力により最高に可愛いスタッフTシャッツが出来上がりました！</p>

<p><figure class="figure-image figure-image-fotolife" title="スタッフTシャツ"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/a/arakaji-yuu/20190702/20190702102230.jpg" alt="f:id:arakaji-yuu:20190702102230j:plain" title="f:id:arakaji-yuu:20190702102230j:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>スタッフTシャツ</figcaption></figure></p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%CF%A5%C3%A5%AB%A1%BC">ハッカー</a>ズチャンプルーの「ゆるさ」と、沖縄感を出すための紅型色のシーサーがかわゆいやつです^^</p>

<p>こんな素晴らしいデザインを作れる人たちが運営するデザイナーコミュニティ「D#(ディーハッシュ)」ではデザイナー向けのイベントをよく行っていますので、デザインに興味のあるエンジニアの人たちはぜひ参加してみると楽しいと思います！</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Ftwitter.com%2Fdhash_okinawa" title="D#(ディーハッシュ) (@dhash_okinawa) | Twitter" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://twitter.com/dhash_okinawa">twitter.com</a></cite></p>

<h1>参加者としての感想</h1>

<p>今回も<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%CF%A5%C3%A5%AB%A1%BC">ハッカー</a>ズチャンプルーらしく、様々なテーマ、様々な技術の話が聞ける、非常にチャンプルーなイベントなって面白かったです。</p>

<p>最初のメインスピーカーであるdeeeetさんが「開発者向け基盤をつくる」という話でマイクロサービス<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3">アーキテクチャ</a>でプロダクトを作るために基盤がなにを提供するかという高レイヤーの話をしたかと思えば</p>

<p><iframe id="talk_frame_525867" src="//speakerdeck.com/player/713e4f9190d2402b8475055565fc45e2" width="710" height="399" style="border:0; padding:0; margin:0; background:transparent;" frameborder="0" allowtransparency="true" allowfullscreen="allowfullscreen" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe><cite class="hatena-citation"><a href="https://speakerdeck.com/tcnksm/kai-fa-zhe-xiang-kefalseji-pan-wotukuru">speakerdeck.com</a></cite></p>

<p>次のメインスピーカーhikaliumさんは「現代のコンピュータにおける自作OS事情」と一気に低レイヤーに話が移り、</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdocs.google.com%2Fpresentation%2Fd%2F1mbLk70RKi-ExLzb78WosCu5DujpQN2K7B9iSbUGRXq4" title="現代のコンピュータにおける自作OS事情" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://docs.google.com/presentation/d/1mbLk70RKi-ExLzb78WosCu5DujpQN2K7B9iSbUGRXq4">docs.google.com</a></cite></p>

<p>「高低差ありすぎて耳キーンなるわ！」というツッコミが会場中を響いたとかいなかったとか。</p>

<p>続いてメインスピーカーちょまどさんの「すきなことをやるということ」で、ちょまどさんのキャリアを通じて「好きなことを夢中になってやることが、今はわからなくても、きっと未来につながる」というメッセージがあり、</p>

<iframe src="//www.slideshare.net/slideshow/embed_code/key/kRHVRDFJqNR60m" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/chomado/ss-152593883" title="好きなことをやるということ" target="_blank">好きなことをやるということ</a> </strong> from <strong><a href="https://www.slideshare.net/chomado" target="_blank">Madoka Chiyoda</a></strong> </div></p>

<p>次のメインスピーカー、Doorkeeperの開発者でもあるポールさんの「サイドプロジェクトが利益を生むビジネスになるまでの苦労と長い道のり」のセッションでは、素晴らしいプロダクトを作り、たくさんの人に利用されていたとしても続く苦労と成功までの長い道のりが話されていて、本当に涙なしには聞けないセッションとなりました！</p>

<p>このセッションの終了後の@k_nishijimaさんのツイート、みんなお金を払おうな！</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/hcmpl?src=hash&amp;ref_src=twsrc%5Etfw">#hcmpl</a> ということで皆さん、気に入ったサービスにはお金を払うんだ！<br>開発者に敬意を払うんだ！<br>ということを強くお伝えしたいです(^^) <a href="https://t.co/zPbvF6oapU">https://t.co/zPbvF6oapU</a></p>&mdash; 西島 幸一郎 (@k_nishijima) <a href="https://twitter.com/k_nishijima/status/1144853351781130241?ref_src=twsrc%5Etfw">2019年6月29日</a></blockquote>


<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>最後のメインスピーカーであるgongozさんの「What can <a class="keyword" href="http://d.hatena.ne.jp/keyword/Emacs">Emacs</a> be ?」というセッションでは、まさに「好きなことを夢中になってやる」を地でいく<a class="keyword" href="http://d.hatena.ne.jp/keyword/Emacs">Emacs</a> でメディアプレイヤーを作ったり、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%A1%A5%DF%A5%B3%A5%F3">ファミコン</a><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%DF%A5%E5%A5%EC%A1%BC%A5%BF">エミュレータ</a>を作ったりした話が展開され、会場中が爆笑と感嘆の渦に巻き込まれました。</p>

<p><iframe id="talk_frame_525595" src="//speakerdeck.com/player/fc46ec02323c43698c407bd0d7738f72" width="710" height="399" style="border:0; padding:0; margin:0; background:transparent;" frameborder="0" allowtransparency="true" allowfullscreen="allowfullscreen" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe><cite class="hatena-citation"><a href="https://speakerdeck.com/gongo/hackers-champloo-2019">speakerdeck.com</a></cite></p>

<p>LT勢も素晴らしく、最初にりゅうさんの「<a class="keyword" href="http://d.hatena.ne.jp/keyword/JavaScript">JavaScript</a>で黒魔術」という記号だけで好きな文字を出力するという謎技術が披露されたと思えば</p>

<p><iframe id="talk_frame_525859" src="//speakerdeck.com/player/c413f60b2eb9456db179b56d05672f31" width="710" height="399" style="border:0; padding:0; margin:0; background:transparent;" frameborder="0" allowtransparency="true" allowfullscreen="allowfullscreen" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe><cite class="hatena-citation"><a href="https://speakerdeck.com/s17001/ji-hao-puroguramingufalseji-da-cheng">speakerdeck.com</a></cite></p>

<p>ちょまどさんのメインセッションのあとにLTを行ったいわむーさんは、「では皆さん、ちょまどさんのセッションでの興奮を落ちつけるためにヨガをやりましょう」といってLTの貴重な1分半をヨガ費やしたり(ちゃんとLTのフリになっていた)</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">なぜかヨガが始まりましたw<a href="https://twitter.com/hashtag/hcmpl?src=hash&amp;ref_src=twsrc%5Etfw">#hcmpl</a> <a href="https://t.co/VLxW5khoyw">pic.twitter.com/VLxW5khoyw</a></p>&mdash; Hackers Champloo (@HackersChamploo) <a href="https://twitter.com/HackersChamploo/status/1144838064126062592?ref_src=twsrc%5Etfw">2019年6月29日</a></blockquote>


<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>「ラズパイでギターをつくる」というLTでギター経験者が泣いて喜ぶ楽器?をラズパイで作ったことを話したかと思えば</p>

<p><iframe src="https://www.slideshare.net/slideshow/embed_code/key/hc6tz3oBjbR3cr" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/ShinjiMiyazato/ss-152583546" title="ラズパイギター" target="_blank">ラズパイギター</a> </strong> from <strong><a href="https://www.slideshare.net/ShinjiMiyazato" target="_blank">Shinji Miyazato</a></strong> </div><cite class="hatena-citation"><a href="https://www.slideshare.net/ShinjiMiyazato/ss-152583546">www.slideshare.net</a></cite></p>

<p>沖縄に住む、本物の黒魔術士ことtompngさんの「意味不明プログラミングの世界」で発表された「実行可能な画像ファイル」という、最早一つのアート作品と言える作品に会場中が拍手<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B3%E5%BA%D3">喝采</a>に包まれました。</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">LTの最後に見せた画像を実行する様子です<a href="https://t.co/Ztg6svIl5Y">https://t.co/Ztg6svIl5Y</a> <a href="https://twitter.com/hashtag/hcmpl?src=hash&amp;ref_src=twsrc%5Etfw">#hcmpl</a> <a href="https://t.co/j7mxVpkqev">pic.twitter.com/j7mxVpkqev</a></p>&mdash; ぺん！ (@tompng) <a href="https://twitter.com/tompng/status/1144883735139012608?ref_src=twsrc%5Etfw">2019年6月29日</a></blockquote>


<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>メインセッション、LT、スポンサーセッションまで含めてすべての登壇者が素晴らしい発表をしてくださり、その内容を本当に楽しく聞いてくれる素晴らしい参加者の皆さんが来てくれ、それを運営のみんなで支える事ができた本当に素晴らしいイベントになったと思います！</p>

<p>ありがとう、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%CF%A5%C3%A5%AB%A1%BC">ハッカー</a>ズチャンプルー！</p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: Paykeの2019年2月の月間MVPに選出から、一人チームのスタートへ
BASENAME: 2019/03/23/174758
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 03/02/2019 11:36:58
-----
BODY:
<p>私の所属する会社では月初めの全社集会で月間MVPというの選出するようになっているのですが、2019年2月の月間MVPに私が選出されました。</p>

<p>私は「サービス<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3">ドメイン</a>によらない技術的な課題を解決する」というミッションをもった技術基盤チームの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%EC%A5%A4%A5%F3%A5%B0%A5%DE%A5%CD%A1%BC%A5%B8%A5%E3%A1%BC">プレイングマネージャー</a>として活動していて、今回はそのチームでの成果が評価され、そのチームのマネージャーである私を選出していただいたという形になります。</p>

<p>技術基盤チームは僕も含めて4名のチームだったのですが、全員がエンジニアとして僕と同等かそれ以上の能力を持って全員が全員を信頼できるメンバーで構成されていました。その最高なメンバーで、逆に成果を出せないのはマネージャーの責任が以外の何者でもなかったので、今回正しく成果を出せたのは安心しました。</p>

<h1>マネージャーとして行った３つのこと</h1>

<p>技術基盤チームという組織ができてから、正しい成果を発揮するためにマネージャーとして特に意識して行った3つのことがあるので紹介します。</p>

<h2>チームの役割の明確化</h2>

<p>まず最初に「技術基盤」というチームが持つ役割を明確化にするために、ミッションと改善していく指標を明確化しました。</p>

<p>まず技術基盤は「」</p>

<h2>チームがこの期間に達成する目標の明確化</h2>

<h2><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%E9%A5%E0">スクラム</a>を用いたプロジェクト運営の実施</h2>

-----
--------
AUTHOR: arakaji-yuu
TITLE: SQLマイグレーションツール「mig」に、同名のテーブル、カラム、インデックスを作成しようとしたというエラーの場合はマイグレーションをスキップするというオプションを追加しました。
BASENAME: 2019/02/28/040834
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 02/28/2019 04:08:34
-----
BODY:
<p>以前ブログでも紹介したこともある、<a class="keyword" href="http://d.hatena.ne.jp/keyword/PHP">PHP</a>製のシンプルな<a class="keyword" href="http://d.hatena.ne.jp/keyword/SQL">SQL</a><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3">マイグレーション</a>ツール「mig」ですが、こちら社内のDB<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3">マイグレーション</a>ツールとして絶賛使用中で、実は地道に<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A5%B0%A5%D5%A5%A3%A5%C3%A5%AF%A5%B9">バグフィックス</a>や機能追加を行っています。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Farakaji.hatenablog.com%2Fentry%2F2018%2F12%2F07%2F000527" title="Webフレームワークに依存しない、PHP製のシンプルなSQL マイグレーションツール「Mig」を作った。 - ゆーじのろぐ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://arakaji.hatenablog.com/entry/2018/12/07/000527">arakaji.hatenablog.com</a></cite></p>

<p>その中で、メンバーからの要望があり追加した機能について紹介します。</p>

<h1>同名のテーブル、カラム、インデックスを作成しようとしたというエラーが出た場合<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3">マイグレーション</a>をスキップするオプション「skip-duplicate-and-exists-errors」</h1>

<p>migで<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3">マイグレーション</a>用<a class="keyword" href="http://d.hatena.ne.jp/keyword/SQL">SQL</a>ファイルを作成するとファイル名の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%EC%A5%D5%A5%A3%A5%C3%A5%AF%A5%B9">プレフィックス</a>としてタイムスタンプが付与され、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3">マイグレーション</a>を実行するとその<a class="keyword" href="http://d.hatena.ne.jp/keyword/SQL">SQL</a>ファイルのタイムスタンプがmigrationsテーブルに追加されます。
<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3">マイグレーション</a>を実行するときには、このテーブルのレコードを見て実行していない<a class="keyword" href="http://d.hatena.ne.jp/keyword/SQL">SQL</a>を判断し実行しています。</p>

<p>しかし、例えばどこかの環境のDBの<a class="keyword" href="http://d.hatena.ne.jp/keyword/SQL">SQL</a>ダンプを取得してそれを実行して作ったDBの場合、その<a class="keyword" href="http://d.hatena.ne.jp/keyword/SQL">SQL</a>ダンプ内にmigrationsテーブルが含まれていなければすでにテーブルやカラム、インデックスが作成されているのにそれらを作成をする<a class="keyword" href="http://d.hatena.ne.jp/keyword/SQL">SQL</a>を実行しようとしてエラーが発生します。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3">マイグレーション</a>実行時に「skip-duplicate-and-exists-errors」というオプションをつけると、同名のテーブル、カラム、インデックスを作成しようとしたというエラーの場合は、この<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3">マイグレーション</a><a class="keyword" href="http://d.hatena.ne.jp/keyword/SQL">SQL</a>は実行したものとみなしてmigrationsテーブルにレコードを追加してスキップするという機能を追加しました。</p>

<pre class="code" data-lang="" data-unlink>$ mig-cli migrate skip-duplicate-and-exists-errors</pre>


<h2>なぜ追加したのか？</h2>

<p>うちの開発チームではmigの利用は開発環境に限定していて、本番環境へは手動で<a class="keyword" href="http://d.hatena.ne.jp/keyword/SQL">SQL</a>を実行しています。</p>

<p>理由は<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9">ソースコード</a>の変更と違い、DBへの変更はパフォーマンスへの影響も大きく実行順番やタイミングの調整も行いたいため、あえて手動で実行しています。</p>

<p>つまり、本番DBにはmigで使うmigrationsテーブルがありません。</p>

<p>以前「Paykeの技術基盤チームの取り組み」という内容で発表をしたこともあるのですが、Paykeでは開発環境にもほぼ本番同等のデータを使うようにしているため定期的に本番に類似したデータのdumpファイルを取り込んでいます。</p>

<p><iframe id="talk_frame_493386" src="//speakerdeck.com/player/e13f1e54a4b74e01af1d37bb725648ce" width="710" height="399" style="border:0; padding:0; margin:0; background:transparent;" frameborder="0" allowtransparency="true" allowfullscreen="allowfullscreen" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe><cite class="hatena-citation"><a href="https://speakerdeck.com/ug/paykefalseji-shu-ji-pan-timufalsequ-rizu-mi?slide=27">speakerdeck.com</a></cite></p>

<p>そのたびにmigrationsテーブルと実際の各テーブルの構成が変わってしまい、migで不要なエラーが発生して<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3">マイグレーション</a>が進まないという問題が発生しておりました。</p>

<p>この問題を解決するため、「skip-duplicate-and-exists-errors」というオプションを追加することにしました。</p>

<h2>ソフトウェアは使うと磨かれる</h2>

<p>migは小さなソフトウェアですが、ホントに自分たちの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E6%A1%BC%A5%B9%A5%B1%A1%BC%A5%B9">ユースケース</a>として必要だから開発して、それを実際に利用し、そのフィードバックをもとに少しづつ改善しています。</p>

<p>実際に自分で使ってみるだけだと今回のような機能は思いつかなかったですが、実際チームで使うなかでフィードバックがあって開発することができました。</p>

<p>この機能以外にも、一つの<a class="keyword" href="http://d.hatena.ne.jp/keyword/SQL">SQL</a>ファイルに複数の<a class="keyword" href="http://d.hatena.ne.jp/keyword/SQL">SQL</a>文が入っていても実行できるようにしたり、<a class="keyword" href="http://d.hatena.ne.jp/keyword/SQL">SQL</a>ファイルの最後に複数の改行が入っている実行に失敗してしまうというバグを修正したりと、地味だけど着実に改善しています。</p>

<p>やはりソフトウェアは開発してリリースするだけだとだめで、実際使われてフィードバックを得ないと磨かれていかないのだと実感しました。</p>

<p>migはおそらくうちの社内だけで使っているソフトウェアですが、いつか世界中の人に使われて自分の名刺代わりになるようなソフトウェアを作っていけるように今後もコツコツやっていきます。</p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: 個人プロジェクトとして開発したWebサービス「Collabo」をOSSとして公開しました。
BASENAME: 2019/02/26/021042
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 02/26/2019 02:10:42
-----
BODY:
<p>タイトルで言いたいことはすべてなのですが、去年個人プロジェクトとして開発していた「Collabo」という<a class="keyword" href="http://d.hatena.ne.jp/keyword/Web%A5%B5%A1%BC%A5%D3%A5%B9">Webサービス</a>を<a class="keyword" href="http://d.hatena.ne.jp/keyword/Github">Github</a>上で<a class="keyword" href="http://d.hatena.ne.jp/keyword/OSS">OSS</a>として公開しました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2FArakaki-Yuji%2Fcollabo" title="Arakaki-Yuji/collabo" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/Arakaki-Yuji/collabo">github.com</a></cite></p>

<p>公開時のブログはこちらです。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Farakaji.hatenablog.com%2Fentry%2F2018%2F07%2F06%2F093543" title="Collaboという個人プロダクトを公開して1週間たちました。 - ゆーじのろぐ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://arakaji.hatenablog.com/entry/2018/07/06/093543">arakaji.hatenablog.com</a></cite></p>

<h1>なぜ公開するのか？</h1>

<p>公開する理由ですが、簡潔いうと「けじめ」をつけるためです。</p>

<p>Collaboは自分が仕事以外で初めて自分一人で開発して公開まで行ったプロダクトで思い入れもあるのですが、結局自分自身もほとんど使っていないプロダクトになってしまいました。
自分が使わないので、そもそも人に使ってもらえないですし、開発も滞っています。
そのままただプロダクトとして死んでいくなら、せめて<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9">ソースコード</a>ぐらいは公開することで自分の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DD%A1%BC%A5%C8%A5%D5%A5%A9%A5%EA%A5%AA">ポートフォリオ</a>にしようと考えて公開することにしました。</p>

<p>自分の<a class="keyword" href="http://d.hatena.ne.jp/keyword/Clojure">Clojure</a>で書いた初めてプロダクトとして<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9">ソースコード</a>を公開し、一区切りをつけたいと思います。</p>

<h1>Collaboの開発で学んだこと</h1>

<h2>モチベーション維持の難しさ</h2>

<p>リリースまではなんとかがんばれたのですが、リリース後はやりきった感が出てしまってなかなか次の開発に進むことができませんでした。</p>

<p>以下にも書くのですが、自分自身が実際に使うプロダクトにしないとやはり改善をし続けるモチベーションを維持するのは難しかったです。</p>

<h2>すでに代替サービスが有る場合、自分のプロダクトでも品質悪ければ使わない</h2>

<p>Collaboはだれでもプロジェクトを作成して公開し、そのプロジェクトのイシューを管理することができるサービスです。
しかしプロジェクト管理サービスは他にも代替サービスが無数にあり、そのどれもが数年前から存在していて品質が磨かれているものばかりです。</p>

<p>最初は自分のプロダクトをリリースしたらドック<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A1%BC%A5%C7%A5%A3%A5%F3">フーディン</a>グしながら改善していこうと思っていたのですが、自分のプロダクトでもリリース時点で既存プロダクトよりも使い勝手がよくないと自分ですら使いたくなりませんでした。</p>

<p>やはりせっかく作るのであれば、せめて自分だけでも「このプロダクトは他のプロダクトよりも優れている！」と信じられるものにしないといけないなと学びました。</p>

<h1>次の個人プロジェクトについて</h1>

<p>次は「単機能でシンプルだが代替サービスのない、もしくは代替サービスをよりも自分は優れていると信じられるプロダクト」を目指して開発したいと思います。</p>

<p>やっていくぞ！！！</p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: 育児に本気でコミットしつつ、一流のエンジニアを目指すということ
BASENAME: 2019/02/25/151707
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 02/25/2019 15:17:07
-----
BODY:

-----
--------
AUTHOR: arakaji-yuu
TITLE: 2019/02/02に行われた「沖縄・宜野湾エンジニア勉強会 #6 in ギークハウス沖縄」に参加して、「Paykeの技術基盤チームの取り組み」というタイトルで発表してきました
BASENAME: 2019/02/15/095209
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 02/15/2019 09:52:09
-----
BODY:
<p>タイトルどおりなんですが、2019年2月2日に<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AE%A1%BC%A5%AF">ギーク</a>ハウス沖縄で行われた「沖縄・宜野湾エンジニア勉強会 #6 in <a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AE%A1%BC%A5%AF">ギーク</a>ハウス沖縄」に参加して、「Paykeの技術基盤チームの取り組み」というタイトルで発表してきました。</p>

<p>もう結構時間あいちゃっているんですが、自分のためのログとしては残しておきたいのでブログを書いてます。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fginowan.connpass.com%2Fevent%2F114092%2F" title="沖縄・宜野湾エンジニア勉強会 #6 in ギークハウス沖縄 (2019/02/02 15:00〜)" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://ginowan.connpass.com/event/114092/">ginowan.connpass.com</a></cite></p>

<p>去年はコミュニティへの参加は控えていたんですが、今年はやっていくぞ！という目標も立てていたので、発表にも応募。
2018年10月から技術基盤チームを設立して、約4ヶ月程度チームで取り組んできたことを整理して発表してきました。</p>

<p>発表資料はこちら。</p>

<script async class="speakerdeck-embed" data-id="e13f1e54a4b74e01af1d37bb725648ce" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>


<p>他の登壇者の方もかなり面白くて、エンジニアの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C0%B8%C2%B8%C0%EF%CE%AC">生存戦略</a>、資本主義ゲームの戦い方、Web技術で定規を作ったり、JSの仕様を駆使した黒魔術を披露したり、<a class="keyword" href="http://d.hatena.ne.jp/keyword/K8s">K8s</a>の話があったりと盛りだくさんの多種多様な話があり、最高に面白かったです。</p>

<p>登壇資料をまとめてくださっているので、ぜひ見て下さい。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fginowan.connpass.com%2Fevent%2F114092%2Fpresentation%2F" title="沖縄・宜野湾エンジニア勉強会 #6 in ギークハウス沖縄 - 資料一覧 - connpass" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://ginowan.connpass.com/event/114092/presentation/">ginowan.connpass.com</a></cite></p>

<p>あと何より良かったのは<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AE%A1%BC%A5%AF">ギーク</a>ハウスのコーヒーが美味かったのと<a class="keyword" href="http://d.hatena.ne.jp/keyword/Wifi">Wifi</a>環境が爆速だったことですね！</p>

<p>2次会には諸事情で参加出来なかったのが残念でしたが、トータル最高に楽しかったです。</p>

<p>ありがとうございましたー！！</p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: 「沖縄のスタートアップ企業で働くエンジニアのリアル」というイベントでパネルディスカッションに参加してきました。
BASENAME: 2019/01/26/115636
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 01/26/2019 11:56:36
-----
BODY:
<p>主催の方からご連絡を頂き、「沖縄のスタートアップ企業で働くエンジニアのリアル」というイベントでスタートアップで働くエンジニアの一人としてパネルディスカッションに参加してきました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fre-build.connpass.com%2Fevent%2F116242%2F" title="沖縄のスタートアップ企業で働くエンジニアのリアル (2019/01/23 19:00〜)" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://re-build.connpass.com/event/116242/">re-build.connpass.com</a></cite></p>

<p>30人もの参加者に来て頂き、沖縄の中でスタートアップでエンジニアとして働くという注目度が高くなっていると実感しました。
参加者には現在エンジニアとして働いている方と、プログラミングスクールなどを出てこれからエンジニアとして働きたいと思ってスタートアップに興味を持った方が大体半々くらいいる感じでした。</p>

<p>パネルディスカッションでは事前にテーマが設けられており、それに関して話していく、その中で会場からの質問があれば答えていく構成になっていました。</p>

<p>このブログでは僕が回答した内容をまとめておこうと思います。</p>

<h1>パネルディスカッション</h1>

<h2>大手企業とスタートアップ企業の違い</h2>

<p>僕の場合は前職も入社したとき社員が約15名程度だった会社がその後70名まで成長したような<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D9%A5%F3%A5%C1%A5%E3%A1%BC%B4%EB%B6%C8">ベンチャー企業</a>で、今回も10名いないくらいのときに入社し現在40名以上に成長しているスタートアップ企業なので、まず大手企業のことを知らないという前提で話を聞いてほしい。</p>

<p>僕の場合スタートアップ企業の大きな特徴はその変化の速さだと考えていて、エンジニア目線でも求められるもとがどんどん変化していく。</p>

<p>たとえば立ち上げフェーズであればそもそもそのプロダクト自体が世の中に受け入れられるかわからない状態なので、品質よりも速く開発してリリースすることが求められる。
ある程度受けいられるということがわかり投資を受け、エンジニアの数も増やすフェーズになれば開発自体はもちろん高速で進めつつも、品質を高めることやチーム開発のための体制を整えることも必要になってくる。
さらにチームも増えたり会社としてデータドリブンな意思決定をしていくためにデータ分析のための基盤を整えたり、継続的な開発を行えるように<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DF%A5%C9%A5%EB%A5%A6%A5%A7%A5%A2">ミドルウェア</a>や<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク</a>のアップデートを継続的に行うため体制や仕組むを作るなども求められる。</p>

<p>このような変化が１年や半年どころか3ヶ月単位のレベルでやってくるのが、変化のスピードが早いスタートアップ企業の特徴だと思う。</p>

<h2>なぜスタートアップ企業を選んだか？</h2>

<p>転職活動中に今の会社以外からも複数社からオファーがあり話を聞いていたが、自分が入ることで最も価値を発揮できる、成長を加速させることができる会社を選んだ。</p>

<p>僕が入るときは次の投資が決まる前だったので、可能性としては入社して３ヶ月後には潰れるという可能性もあるとは思っていた。
ただ僕が入ることでプロダクト開発を加速させ、エンジニア組織を強化し会社としてもプロダクトとしての価値も上げられると考えたのでいまの会社に参加することを決めた。</p>

<h2>エンジニアとしての成長はあったか？</h2>

<p>会社の成長・変化の早さに合わせて、エンジニアに求められるものも変わりそれに答えているうちに成長出来ていたと思う。</p>

<p>いまも開発組織をスケールさせていくために技術基盤チームの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%EC%A5%A4%A5%F3%A5%B0%A5%DE%A5%CD%A1%BC%A5%B8%A5%E3%A1%BC">プレイングマネージャー</a>としてエンジニアリングとマネジメントの両方で様々な仕事を行っているので、さらに成長できると考えており楽しみ。</p>

<h2>親や周りの反対はなかったのか？</h2>

<p>仕事を辞めるのも決めるのも基本的に自分判断で親への相談とかは特に問題なかった。</p>

<p>結婚しているので嫁ブロック的な話もあると思われるが、うちの場合は嫁も同じスタートアップ企業で働いているので、全く問題ない。</p>

<p>給与的には入社時は会社自体がお金のない時期だったこともあり前職のときよりも給与を下げて入社したが、いまはもうその額は超えている。</p>

<h2>実際、残業は多いのか？</h2>

<p>スタートアップや<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D9%A5%F3%A5%C1%A5%E3%A1%BC">ベンチャー</a>の特にITは残業が多いイメージが強いと思うが、今の会社の場合はゼロではないがかなり少ない。</p>

<p>アプリやその他のバックエンドシステムをリニューアルをしたときには残業が発生してかなり忙しい時期もあるが、平均的には残業せずに定時で帰っている。僕らの場合既婚者や子供がいる社員が最初の10~20名程度のときからいたため、働き方の健全性も高いし、自分たちの状況に合わせて柔軟にリモートワークをしたりすることも普通なのでかなり働きやすい。</p>

<h2>沖縄で就職する理由</h2>

<p>子供も生まれたこともあり、子育ての環境として実家がある沖縄は快適なのでそのまましばらくは沖縄で働きたい。
ただ、単純にエンジニアとしての成長ややりがいだけを見たら東京の方がコミュニティも面白い会社も多いので東京に行くのが最適だと思う。</p>

<p>自分が楽しくエンジニアとして生きていくために必要なのは良質で多様なエンジニアコミュニティと高い給料が払えつつかつ面白いプロジェクトをしている会社とそこに集まってくる優秀な面白い人々だと思っている。</p>

<p>沖縄で快適に子育てしつつ、そのエンジニアとしての環境を自分で作っていけるようにコミュニティ活動をしたり、今入っているスタートアップ企業を成長させて高い給料がはらえつつ面白いプロジェクトをしている会社にしていこうと思って沖縄で活動している。</p>

<h1>会場からの質問</h1>

<h2>沖縄のコミュニティや会社などエンジニアを取り巻く状況の課題はなんだと思いますか？</h2>

<p>僕は沖縄以外の場所でエンジニアとして働いたことはないが、コミュニティ運営などを通して知り合った県外のエンジニア方々の話や僕の肌感覚としては、沖縄はエンジニアのコミュニティも活発だし優秀なエンジニアも多い。しかしそこで育った優秀なエンジニアがその価値を発揮したり更に成長できるようなプロジェクトを持った会社が少ないし、その価値に見合った給料を払える会社も少ない。</p>

<p>そのため沖縄のエンジニアとしての<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AD%A5%E3%A5%EA%A5%A2%A5%D1%A5%B9">キャリアパス</a>がある一定のレベルを超えると<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EA%A1%BC%A5%E9%A5%F3%A5%B9">フリーランス</a>になるか東京の会社に転職するしかない。</p>

<p>その課題を解決するために、僕はスタートアップの中で会社を成長させ、優秀なエンジニアに見合った給料とプロジェクトを提供出来る会社を作ろうと活動している。</p>

<h2>スタートアップに入社したいと思っているが、そういう会社にどうやったら出会えるか？</h2>

<p>エンジニアとして成長するための活動を活発に行っていればいいと思う。ここで言う活動とは<a class="keyword" href="http://d.hatena.ne.jp/keyword/OSS">OSS</a>や自分のソフトウェアを開発して公開したり、コミュニティに参加して運営したり登壇したり、ブログを書いたりすることです。</p>

<p>僕らが会社を探すよりも遥かに強いモチベーションでスタートアップに限らずソフトウェアを扱う会社はエンジニアを探している。そういう会社は必死に探すので、上記のような活動をしっかり行っていれば比較的容易に出会えるようになると思う。</p>

<h1>さいごに</h1>

<p>去年は初めての子供が生まれたという状況だったのでコミュニティ活動はセーブしていたんですが、今年はより活動を増やしていこうと考えていました。
その状況で声をかけていただいたので喜んで参加したのですが、沖縄でスタートアップのエンジニアというものに興味がある人がこんなにいたことに驚きました。</p>

<p>また「私もスタートアップでエンジニアとして働きたいと思っている」というプログラミングスクールという方もいました。</p>

<p>その方々と<a class="keyword" href="http://d.hatena.ne.jp/keyword/Twitter">Twitter</a>でつながると作品として普通に面白いアプリを作っている方もいたので、いままでは経験者の採用のみに絞っていたのですが、これからはまだ業務経験はないが１年程度で会社のアベレージを超えていけそうな人を採用していくというのも全然ありだな〜と考え直す良いきっかけにもなりましたし、僕も刺激になってより一層頑張っていこうと思えるきっかけになりました。</p>

<p>イベントを主催してくださった方々や会場提供してくれた方々、一緒にパネルディスカッションに参加してくれた方々に参加者の方々も皆さんありがとうございました。</p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: AWSユーザーにも知ってほしい、Azure Web AppがWordPressを乗せるのに最高という話
BASENAME: 2019/01/20/225136
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 01/20/2019 22:51:36
-----
BODY:
<h1>Azure Web Appとは</h1>

<p>Azure Web AppとはAzureが提供しているPaaSの一つです。
その名の通りWebアプリを乗せるために適したPaaSで、負荷分散や自動スケーリング、またGit等を利用した継続的デプロイなどの機能も提供しています。</p>

<p>対応している言語が2019/1/20現在で以下のようになっています。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/a/arakaji-yuu/20190120/20190120182551.png" alt="f:id:arakaji-yuu:20190120182551p:plain" title="f:id:arakaji-yuu:20190120182551p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<h1><a class="keyword" href="http://d.hatena.ne.jp/keyword/WordPress">WordPress</a>をPaaSに乗せる上での課題</h1>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/WordPress">WordPress</a>に限らないのですが、PaaSにWebアプリを乗せるときにはWebアプリ自体を「ステートレス」にしないといけません。
ステートレスとはその名の通り状態を持たないようにすることで、<a class="keyword" href="http://d.hatena.ne.jp/keyword/WordPress">WordPress</a>の例でいうと管理画面からアップロードする写真やインストールする<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3">プラグイン</a>がそれに値します。</p>

<p>PaaSはスケールアウトとスケールインといって、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス</a>を増やしたり減らしたり出来ることが大きな魅力の一つです。
しかし一つのサーバーの中に画像や<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3">プラグイン</a>のファイルが配置されていると他のサーバーからそのファイルが参照できないためにスケールアウトできません。</p>

<p>そのためPaaSに<a class="keyword" href="http://d.hatena.ne.jp/keyword/WordPress">WordPress</a>を乗せる場合には画像を専用サービス(例: S3)に送信したり、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3">プラグイン</a>をgit管理して管理画面からは更新やインストールをしないようにするなどの運用にする必要があります。</p>

<p>しかし、画像をS3にアップロードするように修正するのも<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B9%A9%BF%F4">工数</a>がかかりますし、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3">プラグイン</a>をgit管理する場合は<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3">プラグイン</a>のインストールを開発チームが行わないといけなくなります。</p>

<h1>Azure Web Appの何が<a class="keyword" href="http://d.hatena.ne.jp/keyword/WordPress">WordPress</a>に適しているのか？</h1>

<p>Azure Web Appは状態があるWebアプリでもスケールアウトすることができる特徴があり、そのため<a class="keyword" href="http://d.hatena.ne.jp/keyword/WordPress">WordPress</a>に乗せるのに特別な改修をする必要がありません。</p>

<p>利用者側が気にすることはないですが、Azure Web Appの内部はざっくりいうと<a class="keyword" href="http://d.hatena.ne.jp/keyword/Web%20Workers">Web Workers</a>とFile Workersに分かれています。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Web%20Workers">Web Workers</a>が実際にリク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>トを処理しプログラムが動作するサーバーになります。スケールアウトをして<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス</a>数を増やすとこの<a class="keyword" href="http://d.hatena.ne.jp/keyword/Web%20Workers">Web Workers</a>の数が増えます。</p>

<p>File Serversはhtmlやjs、画像やデプロイされるコードなどのファイル類が配置されているサーバーになります。これはAzure Storage Blobsがマウントされており、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Web%20Workers">Web Workers</a>はFile Serversにnetwork driver越しにアクセスしています。</p>

<p>例えば<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス</a>が3つに設定されたWebAppに載せた<a class="keyword" href="http://d.hatena.ne.jp/keyword/WordPress">WordPress</a> 上に画像をアップロードされると、プログラムレベルではサーバーのローカルディスクに保存しているように見えますがネットワークドライバー越しにFile Serverに保存されます。そのファイルを3つのWeb Serversから参照できるので<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス</a>数を増やしても減らしても大丈夫というわけです。</p>

<p>というわけで、もし<a class="keyword" href="http://d.hatena.ne.jp/keyword/WordPress">WordPress</a>のサイトを<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%A6%A5%C9">クラウド</a>にのせたい場合はいつもは<a class="keyword" href="http://d.hatena.ne.jp/keyword/AWS">AWS</a>を使っている方もぜひAzure WebAppを候補にしてみてください。</p>

<h1>参考URL</h1>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fazure.microsoft.com%2Fja-jp%2Fservices%2Fapp-service%2F" title="Azure App Service - アプリのホスティング | Microsoft Azure" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://azure.microsoft.com/ja-jp/services/app-service/">azure.microsoft.com</a></cite></p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdocs.microsoft.com%2Fja-jp%2Fazure%2Fapp-service%2Fcontainers%2F" title="Azure Web Apps for Containers のドキュメント - チュートリアル、API リファレンス" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://docs.microsoft.com/ja-jp/azure/app-service/containers/">docs.microsoft.com</a></cite></p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fmsdn.microsoft.com%2Fen-us%2Fmagazine%2Fmt793270.aspx%3Ff%3D255%26MSPPError%3D-2147217396" title="Azure - Inside the Azure App Service Architecture" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://msdn.microsoft.com/en-us/magazine/mt793270.aspx?f=255&MSPPError=-2147217396">msdn.microsoft.com</a></cite></p>

-----
--------
AUTHOR: arakaji-yuu
TITLE:  Facebookが提唱するアーキテクチャ、FLUXとは単一方向のデータフローを実現するためのもの
BASENAME: 2019/01/15/160333
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 01/15/2019 16:03:33
CATEGORY: サーベイログ
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/a/arakaji-yuu/20190109/20190109095108.png
-----
BODY:
<h1>FLUXとは ~ 概要 ~</h1>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Facebook">Facebook</a>が提唱している、UIを構築するためのアプリケーション<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3">アーキテクチャ</a>です。
Reactと一緒に語られることが多いですが、FLUXは特定のツールに依存した<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク</a>ではなく<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3">アーキテクチャ</a>のパターンの一つなのでReactを使わなくても実装可能です。</p>

<p> <span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/a/arakaji-yuu/20190109/20190109095108.png" alt="f:id:arakaji-yuu:20190109095108p:plain" title="f:id:arakaji-yuu:20190109095108p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>FLUXの特徴は、Action → Dispacher → Store → View と単一方向のデータフローによってUI設計をしていることです。
これによりデータフローによる複雑性をへらし、コードの可読性や堅牢性を高めています。</p>

<h1>従来の手法とはなにが違うの？</h1>

<p>よく比較される<a class="keyword" href="http://d.hatena.ne.jp/keyword/MVC">MVC</a><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3">アーキテクチャ</a>との違いは、データフローを単一方向に限定したこと。
<a class="keyword" href="http://d.hatena.ne.jp/keyword/MVC">MVC</a>のControllerとModelは複数のモデルとControllerが相互にデータをやり取りすることで状態を把握することが困難なりがちだが、FLUXは単一方向データフローを実現することでこの課題を解決している。</p>

<h1>技術や手法のキモはどこか？</h1>

<p>Dispacherをシングルトンにすること、どのイベントに反応するかはStore側でハンドリングできるようにすること。
それによってStoreの追加による機能拡張も容易になる。</p>

<h1>参考URL</h1>

<p><a href="https://facebook.github.io/flux/">Flux | Application Architecture for Building User Interfaces</a></p>

<p><a href="https://github.com/facebook/flux/tree/master/examples/flux-concepts">flux/examples/flux-concepts at master &middot; facebook/flux &middot; GitHub</a></p>

<p><a href="https://github.com/facebook/flux/tree/master/examples/flux-logging">flux/examples/flux-logging at master &middot; facebook/flux &middot; GitHub</a></p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: 「サーベイログ」HeteroTSDB: A Time Series Database Architecture for Automatically Tiering on Deterogeneous Key-Value Stores
BASENAME: 2019/01/02/225612
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 01/02/2019 22:56:12
-----
BODY:
<p>読んだ論文</p>

<p><a href="https://yuuk.io/papers/heterotsdb_iots2018.pdf">https://yuuk.io/papers/heterotsdb_iots2018.pdf</a></p>

<h1>どんなもの？</h1>

<p>モニタリングサービスのインフラとなる時系列データベースに求められる書き込み性能、保存効率、データ構造の拡張製、スケーラビリティを実現するためにインメモリKVSとオンメモリKVSを組み合わせた異種混合KVSによる自動階層化する時系列データベース<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3">アーキテクチャ</a></p>

<h1>先行研究と比べてどこが凄い？</h1>

<p>先行研究ではデータストアが密結合であったため、データの拡張性が低かったが本<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3">アーキテクチャ</a>は<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C1%C2%B7%EB%B9%E7">疎結合</a>のため拡張性がたかい(新たな性質を持つデータストアを組み合わせることが可能)</p>

<ul>
<li>InfluxDB</li>
<li>OpenTSDB</li>
<li>Gorilla</li>
</ul>


<h1>技術や手法のキモはどこ？</h1>

<p>書き込み性能とデータ保存効率という性能要件を実現するために、特性に合った<a class="keyword" href="http://d.hatena.ne.jp/keyword/DBMS">DBMS</a>を組み合わせたこと。</p>

<h1>どうやって有効だと検証した？</h1>

<h2>書き込み処理効率の計測</h2>

<p>オンディスクKVSに直接書き込む場合と比較し、インメモリKVSで書き込みを受けることにより、オンディスクKVSの書き込み回数が減っていることを確認する</p>

<h2>データ保存効率</h2>

<p>インメモリKVSへの書き込みを続けても空きメモリが0にならずにオンディスクKVSにデータを移動できているか確認する</p>

<h2>書き込みスケールアウト性</h2>

<p>各KVSのキャパシティを増加させたときに、分間書き込み回数がスケールアウトするかどうかを確認する。</p>

<h1>議論はある？</h1>

<p>とくになし</p>

<h1>次によむべき論文は？</h1>

<ul>
<li>The Log-Structured Merge-Tree</li>
<li>Time SEries Management Systems</li>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/BigTable">BigTable</a>: A Distributed Storage System for Structured Data</li>
</ul>


<h1>メモ</h1>

<p>提案: HeteroTSDB<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3">アーキテクチャ</a>
先行手法: OpenTSDB
高めたい指標: スケーラビリティ、書き込み性能、保存領域、拡張性を<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C1%C2%B7%EB%B9%E7">疎結合</a>なソフトウェアとすることで実現、高可用性
データ構造の拡張性を考慮した時系列データベースは提案されていない→新規性
拡張内容に合わせた異なる<a class="keyword" href="http://d.hatena.ne.jp/keyword/DBMS">DBMS</a>を追加する<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C1%C2%B7%EB%B9%E7">疎結合</a>な<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3">アーキテクチャ</a>をとりつつ、利用者からはREAD/WRITEのための<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A1%BC%A5%D5%A5%A7%A5%A4%A5%B9">インターフェイス</a>をそれぞれ一つに見えるように統一
書き込み性能→インメモリKVS
データ保存効率を高める→オンディスクKVS
AWSのサーバレスプラットフォーム上に構築することで異種混合<a class="keyword" href="http://d.hatena.ne.jp/keyword/DBMS">DBMS</a>構成を取りやすくしている→構築やスケールアウト作業の負担軽減
KVS間のデータ移動のためのタイマー手法
LSM-Tree(Log Structured Merge Tree)</p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: 2018年の振り返り
BASENAME: 2019/01/01/000002
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 01/01/2019 00:00:02
-----
BODY:
<h1>仕事</h1>

<p>前半戦はionicframeworkを使った<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%DE%A5%DB">スマホ</a>アプリのリニューアル &amp; 新機能であるC2Cの商品売買<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DE%A1%BC%A5%B1%A5%C3%A5%C8%A5%D7%A5%EC%A5%A4%A5%B9">マーケットプレイス</a>の構築を行い、開発チームのリーダーとしてフロントエンドからサーバーサイドまでかなりがっつりコードを書いてました。</p>

<p>中盤戦はリーダー業を他のメンバーにお願いして、アプリの改善のための開発に集中。</p>

<p>後半戦は技術基盤チームという組織を立ち上げ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%EC%A5%A4%A5%F3%A5%B0%A5%DE%A5%CD%A1%BC%A5%B8%A5%E3%A1%BC">プレイングマネージャー</a>として、<a class="keyword" href="http://d.hatena.ne.jp/keyword/VM">VM</a>ベースで展開されていた各サービス郡の可用性、冗長性を高めるためAzureのマネージドサービスに移行していきました。</p>

<p>SPAのフロントエンドから<a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> &amp; DB設計を含むサーバーサイド、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%A6%A5%C9">クラウド</a>サービスを使ったインフラ設計、開発チームのマネジメントという自分のオールラウンドな能力を生かした仕事が出来た一年かと思います。ただ前職自体に身につけた能力で戦った感があるので思い切り成長できたかというとそうでもない。</p>

<p>来年はもっと挑戦していくぞ。</p>

<ul>
<li>ionicframeworkを使って既存の<a class="keyword" href="http://d.hatena.ne.jp/keyword/Android">Android</a>、<a class="keyword" href="http://d.hatena.ne.jp/keyword/iOS">iOS</a>アプリをリニューアル</li>
<li>C2Cの商品売買<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DE%A1%BC%A5%B1%A5%C3%A5%C8%A5%D7%A5%EC%A5%A4%A5%B9">マーケットプレイス</a>機能の設計・実装</li>
<li>サービス<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3">ドメイン</a>によらない技術的課題を解決するための組織、技術基盤チームの立ち上げ</li>
<li>テレビ放送に備えてコーポレートサイトをAzure <a class="keyword" href="http://d.hatena.ne.jp/keyword/CDN">CDN</a>で対策</li>
<li>VirtualMachine上の<a class="keyword" href="http://d.hatena.ne.jp/keyword/MySQL">MySQL</a>をAzure Database for <a class="keyword" href="http://d.hatena.ne.jp/keyword/MySQL">MySQL</a>に移行</li>
<li>ファイルベースのキャッシュをAzure Redis Cacheを利用したキャッシュに移行</li>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%ED%A1%BC%A5%C9%A5%D0%A5%E9%A5%F3%A5%B5%A1%BC">ロードバランサー</a>をAzure Load Balancerから Application <a class="keyword" href="http://d.hatena.ne.jp/keyword/Gateway">Gateway</a>に移行</li>
<li>複数<a class="keyword" href="http://d.hatena.ne.jp/keyword/VM">VM</a>へのデプロイを行うデプロイツールを作成</li>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/VM">VM</a>上にあったメディアサービスをAzure WebAppに移行</li>
<li>Logic Appを使ってAzure上でモニタリングしているメトリクスの敷居値を超えたらSlackに通知するように構築</li>
</ul>


<h1>個人プロジェクト</h1>

<p>今年は2つのソフトウェアを個人名義でリリースした。</p>

<p>ひとつは<a class="keyword" href="http://d.hatena.ne.jp/keyword/Clojure">Clojure</a>で作った<a class="keyword" href="http://d.hatena.ne.jp/keyword/Web%A5%B5%A1%BC%A5%D3%A5%B9">Webサービス</a>でプロジェクト共有サービスのCollabo。</p>

<p><blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">個人で開発している<a class="keyword" href="http://d.hatena.ne.jp/keyword/Web%A5%B5%A1%BC%A5%D3%A5%B9">Webサービス</a>「Collabo」をプレビュー版という形で先程公開しました😄<a href="https://t.co/Bz9qEBAa5T">https://t.co/Bz9qEBAa5T</a><br>「Collabo」は「ビジョン」と「イシュー(課題)」と「コミュニケーション」をオープンにして誰でもプロジェクトを公開、参加できるアプリですので、興味あればぜひ使ってみてください🙏</p>&mdash; UG (@arakaji) <a href="https://twitter.com/arakaji/status/1012131339674382337?ref_src=twsrc%5Etfw">2018年6月28日</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>もうひとつは<a class="keyword" href="http://d.hatena.ne.jp/keyword/PHP">PHP</a>製の<a class="keyword" href="http://d.hatena.ne.jp/keyword/SQL">SQL</a> <a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3">マイグレーション</a>ツールのMig。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Farakaji.hatenablog.com%2Fentry%2F2018%2F12%2F07%2F000527" title="Webフレームワークに依存しない、PHP製のシンプルなSQL マイグレーションツール「Mig」を作った。 - ゆーじのろぐ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://arakaji.hatenablog.com/entry/2018/12/07/000527">arakaji.hatenablog.com</a></cite></p>

<p>特別凄いソフトウェアでもないのだけど、僕的にはこの2つのソフトウェアは<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DE">プログラマ</a>としての「初めて」を達成出来たソフトウェアなので感慨深い。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Web%A5%B5%A1%BC%A5%D3%A5%B9">Webサービス</a>を開発する<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DE">プログラマ</a>なので自分自身のオリジナルの<a class="keyword" href="http://d.hatena.ne.jp/keyword/Web%A5%B5%A1%BC%A5%D3%A5%B9">Webサービス</a>を作ってみたかったが仕事が忙しいということを言い訳に実現できなかったのですが、このCollaboで初めて実現できました。</p>

<p>Migは自分が作った<a class="keyword" href="http://d.hatena.ne.jp/keyword/OSS">OSS</a>で初めて<a class="keyword" href="http://d.hatena.ne.jp/keyword/GitHub">GitHub</a>のStarをもらったソフトウェアとなりました。</p>

<p>来年は「フォロワーのInputが追いつかないほどのスピードでOutputを」をテーマにどんどんアウトプットとしてソフトウェアをリリースしていくのでもっと多くの「初めて」が達成出来ると嬉しい。</p>

<h1>エンジニアコミュニティ活動</h1>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%CF%A5%C3%A5%AB%A1%BC">ハッカー</a>ズチャンプルーの運営スタッフとして参加、Javakuecheの会長として2つの「<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%B8%A5%E3%A5%A4%A5%EB">アジャイル</a>ジャパンサテライト沖縄」と「Javakueche day」の企画・運営を行いました。
あと実験企画としてリモート<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%E2%A4%AF%A4%E2%A4%AF%B2%F1">もくもく会</a>という<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D3%A5%C7%A5%AA%A5%C1%A5%E3%A5%C3%A5%C8">ビデオチャット</a>を参加者でつないで<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%E2%A4%AF%A4%E2%A4%AF%B2%F1">もくもく会</a>を行うという回も計9回ほど行いました(忙しくなってしまい、その後継続できなくなってしまい申し訳ない。。。)。前述したMigはリモート<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%E2%A4%AF%A4%E2%A4%AF%B2%F1">もくもく会</a>で実装したものなので個人的には成果はあった。もしやりたいという人がいればまた再開してもいいかも。</p>

<p>ことしは運営は結構頑張ったんですが、自分で登壇したり他のコミュニティに参加するという機械がほとんどなかったのがちょっと残念だった。
来年は県内はもちろん県外のコミュニティにも参加していくぞ。</p>

<ul>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%CF%A5%C3%A5%AB%A1%BC">ハッカー</a>ズチャンプルーの運営参加</li>
<li>リモート<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%E2%A4%AF%A4%E2%A4%AF%B2%F1">もくもく会</a>の開催</li>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%B8%A5%E3%A5%A4%A5%EB">アジャイル</a>ジャパンサテライト沖縄を開催</li>
<li>Javakueche dayを開催</li>
</ul>


<h1>その他大きな出来事</h1>

<p>子供が1歳まで無事育ちました。
子育ては圧倒的に時間を使うので自由に使える時間は減るのだけど、自分の人生の見方を大きく変えてくれました。</p>

<p>今までは「自分が<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DE">プログラマ</a>として楽しく過ごすには」とか「自分が<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DE">プログラマ</a>として生きるための<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C0%B8%C2%B8%C0%EF%CE%AC">生存戦略</a>をどうするか」とかを大体長くても3年ぐらいのスパンでしか考えられなかったのですが、子供が生まれると「この子が生きる20年後のためにいま自分が何をすべきか」と考えるようになりました。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DE">プログラマ</a>としてもっと稼いだり成長するために<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EA%A1%BC%A5%E9%A5%F3%A5%B9">フリーランス</a>になるであったり東京の会社に転職するであったり考えることもあるのですが、僕も嫁も沖縄出身で沖縄に親もいることを考えると子育てするのは沖縄の方がいい。ただ東京や海外と比べると沖縄には先進的な人や文化、技術も少ないので先進的な教育を受ける機会も少なく子供の可能性を減らしてしまう。なら、沖縄を先進的な人が集まり文化、技術が生まれる場所にしてしまえばいい。そのために僕が<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DE">プログラマ</a>としていま出来ることのひとつとして沖縄初のスタートアップを世界的なテク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%CE%A5%ED">ノロ</a><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B8%A1%BC">ジー</a>カンパニーに成長させることにコミットすることを選択していたりする。</p>

<p>あと、単純に子供はスーパー可愛い。</p>

<h1>最後に</h1>

<p>来年もさらにやっていくぞ。</p>

<p>テーマは「フォロワーのInputが追いつかないほどのスピードでOutputを」</p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: Java Kueche day 2018を開催し、今年も最新のJavaの鮮度高い情報を沖縄持ってくることが出来ました！
BASENAME: 2018/12/12/212411
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 12/10/2018 11:55:12
-----
BODY:
<p>去年まで「<a class="keyword" href="http://d.hatena.ne.jp/keyword/Java">Java</a> One 報告会」というタイトルで、サンフランシスコで毎年行われていた<a class="keyword" href="http://d.hatena.ne.jp/keyword/Java">Java</a>に関する最新の情報が共有される世界的なイベントの情報を沖縄でも共有できるイベントを行っていましたが、今年は本家の <a class="keyword" href="http://d.hatena.ne.jp/keyword/Java">Java</a> Oneが「<a class="keyword" href="http://d.hatena.ne.jp/keyword/Oracle">Oracle</a> Code One」と名称が改めれられ、テーマも<a class="keyword" href="http://d.hatena.ne.jp/keyword/Java">Java</a>以外の技術についても発表されると変更されました。</p>

<p>それに伴って僕らが運営させていただいている <a class="keyword" href="http://d.hatena.ne.jp/keyword/Java">Java</a> Kuecheが主催していた「<a class="keyword" href="http://d.hatena.ne.jp/keyword/Java">Java</a> One 報告会」についても「<a class="keyword" href="http://d.hatena.ne.jp/keyword/Java">Java</a> Kueche Day」とタイトルを変更し、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Java">Java</a>を中心にしつつもその他の注目・最新技術をキャッチアップできる場として生まれ変わりました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fjava-kuche.doorkeeper.jp%2Fevents%2F82737" title=" Java Küche Day 〜Javaのいまと様々な最新技術をキャッチアップ 〜" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://java-kuche.doorkeeper.jp/events/82737">java-kuche.doorkeeper.jp</a></cite></p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: Webフレームワークに依存しない、PHP製のシンプルなSQL マイグレーションツール「mig」を作った。
BASENAME: 2018/12/07/000527
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 12/07/2018 00:05:27
-----
BODY:
<p>タイトル通り、特定のWebフレームワークに依存しない<a class="keyword" href="http://d.hatena.ne.jp/keyword/PHP">PHP</a>製のシンプルな<a class="keyword" href="http://d.hatena.ne.jp/keyword/SQL">SQL</a><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3">マイグレーション</a>ツール<a href="https://github.com/Arakaki-Yuji/mig">「Mig」</a>を作りました。</p>

<h1>なぜ作ったのか</h1>

<p>大体Webフレームワークにはこの手<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3">マイグレーション</a>ツールはついていますが、<a class="keyword" href="http://d.hatena.ne.jp/keyword/DSL">DSL</a>を書かされたり、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0%B8%C0%B8%EC">プログラミング言語</a>の中に<a class="keyword" href="http://d.hatena.ne.jp/keyword/SQL">SQL</a>を文字列として渡して実行するものが多いです。<a class="keyword" href="http://d.hatena.ne.jp/keyword/DSL">DSL</a>だと抽象化されている分DB特有の機能が使えなかったり、文字列として<a class="keyword" href="http://d.hatena.ne.jp/keyword/SQL">SQL</a>を渡すのはエディタの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B7%A5%F3%A5%BF%A5%C3%A5%AF%A5%B9">シンタックス</a>ハイライトが使えないのも不便だと考えていました。</p>

<p>そのため<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3">マイグレーション</a>用の<a class="keyword" href="http://d.hatena.ne.jp/keyword/SQL">SQL</a>ファイル生成の管理、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3">マイグレーション</a>と<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%ED%A1%BC%A5%EB%A5%D0%A5%C3%A5%AF">ロールバック</a>の管理のみを行い、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3">マイグレーション</a>の<a class="keyword" href="http://d.hatena.ne.jp/keyword/SQL">SQL</a>も直接<a class="keyword" href="http://d.hatena.ne.jp/keyword/SQL">SQL</a>ファイルに書くことができるツールを作りました。</p>

<h1>使い方</h1>

<h2>インストール</h2>

<p>composer でglobal installします。</p>

<pre class="code" data-lang="" data-unlink>$ composer global require arakaki-yuji/mig</pre>


<p>composerでmigがインストールされますので、実行できるように実行パスを通しておきます。</p>

<pre class="code" data-lang="" data-unlink>$ export PATH=$PATH:$HOME/.composer/vendor/bin</pre>


<h2>DBへの接続情報を記載した設定ファイルの設置</h2>

<p>プロジェクトのルート<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8">ディレクト</a>リにmig.config.<a class="keyword" href="http://d.hatena.ne.jp/keyword/php">php</a>という名前でDB接続情報を記載した設定ファイルを設置します。</p>

<pre class="code" data-lang="" data-unlink>&lt;?php

return [
    &#39;db_dsn&#39; =&gt; &#39;&#39;, // example: mysql:host=localhost:3306;dbname=project_db;
    &#39;db_username&#39; =&gt; &#39;&#39;,
    &#39;db_passwd&#39; =&gt; &#39;&#39;, 
    &#39;migration_filepath&#39; =&gt; &#39;migrations&#39; // directory for place SQL scripts.
];</pre>


<h2>初期化</h2>

<p>設定ファイルが設置されている<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8">ディレクト</a>リに移動し、初期化コマンドを実行します。</p>

<pre class="code" data-lang="" data-unlink>$ mig-cli init</pre>


<p>すると<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3">マイグレーション</a>の実行履歴を管理するmigrationsテーブルが作成されます。</p>

<h2><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3">マイグレーション</a>ファイルの作成</h2>

<p><code>mig-cli create [名前]</code> コマンドを実行すると指定された名前を使ってファイルが２つ作られます。</p>

<pre class="code" data-lang="" data-unlink>$ mig-cli create migration-filename
Create a new migration file.
=================

create migrations/20181121144957_migration-filename.up.sql
create migrations/20181121144957_migration-filename.down.sql</pre>


<p>up.<a class="keyword" href="http://d.hatena.ne.jp/keyword/sql">sql</a> が<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3">マイグレーション</a>を実行するときに実行する<a class="keyword" href="http://d.hatena.ne.jp/keyword/SQL">SQL</a>ファイル、down.<a class="keyword" href="http://d.hatena.ne.jp/keyword/sql">sql</a>が<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3">マイグレーション</a>をrollabackするときに実行される<a class="keyword" href="http://d.hatena.ne.jp/keyword/sql">sql</a>ファイルです。</p>

<p>たとえば <code>items</code>というテーブルを作る<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3">マイグレーション</a>を作る場合、まずup.<a class="keyword" href="http://d.hatena.ne.jp/keyword/sql">sql</a>ファイルにテーブル定義の<a class="keyword" href="http://d.hatena.ne.jp/keyword/SQL">SQL</a>を書きます。</p>

<pre class="code" data-lang="" data-unlink>CREATE TABLE IF NOT EXISTS `items` (
  `id` int(11) PRIMARY KEY,
  `name` varchar(255) NOT NULL
);</pre>


<p>次に<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3">マイグレーション</a>を<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%ED%A1%BC%A5%EB%A5%D0%A5%C3%A5%AF">ロールバック</a>する(もとに戻す)ときのための<a class="keyword" href="http://d.hatena.ne.jp/keyword/SQL">SQL</a>をdown.<a class="keyword" href="http://d.hatena.ne.jp/keyword/sql">sql</a>に書きます。</p>

<pre class="code" data-lang="" data-unlink>DROP TABLE IF EXISTS `items`;</pre>


<h2><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3">マイグレーション</a>の実行</h2>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3">マイグレーション</a>を実行は以下のコマンドを実行します。</p>

<pre class="code" data-lang="" data-unlink>$ mig-cli migrate</pre>


<p>これで自分の環境で実行されていない<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3">マイグレーション</a>が一度に実行されます。</p>

<h2><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%ED%A1%BC%A5%EB%A5%D0%A5%C3%A5%AF">ロールバック</a>の実行</h2>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%ED%A1%BC%A5%EB%A5%D0%A5%C3%A5%AF">ロールバック</a>の実行は以下のコマンドを実行します。</p>

<pre class="code" data-lang="" data-unlink>$ mig-cli rollback</pre>


<p>これで、自分の環境で実行された最新の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3">マイグレーション</a>が一つ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%ED%A1%BC%A5%EB%A5%D0%A5%C3%A5%AF">ロールバック</a>されます。</p>

<h1>終わりに</h1>

<p>もし興味があればぜひ使ってみて、バグあればIssueもください！</p>

<p>あと、何も考えず<a class="keyword" href="http://d.hatena.ne.jp/keyword/Github">Github</a>にそっとスターを押して頂けると嬉しいです笑</p>

-----
COMMENT:
AUTHOR: arakaji-yuu
IP: 103.5.142.235
DATE: 12/07/2018 09:03:59
id:Mamy1326さんコメントありがとうございます！
EXISTSの間違いは修正しました！
-----
COMMENT:
AUTHOR: Mamy1326
IP: 59.129.252.9
DATE: 12/07/2018 02:17:01
使わせていただきました。非常に便利で驚きです。ありがとうございます！

ところで、GitHubのREADME.mdは正しいですが、ブログ記事中の以下は `EXISTS` だと思います。ご確認くださいませ！
```
CREATE TABLE IF NOT EXIST `items` (
  `id` int(11) PRIMARY KEY,
  `name` varchar(255) NOT NULL
);
```
-----
--------
AUTHOR: arakaji-yuu
TITLE: 移動時間を作業時間に変えるためにバス通勤始めてみた
BASENAME: 2018/10/19/213041
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 10/19/2018 21:30:41
-----
BODY:
<p>タイトルどおりでそれ以上言うことないのですが、バス通勤を始めてみました。</p>

<p>いままでずっと自動車で通勤していたのですが、最近やりたいことが多いわりに自由に使える時間は少ないのでどうにかして時間を確保しないといけないと色々生活週間を改善している。</p>

<p>その一つとして、車の移動時間が往復で1時間〜1時間半ほどあるのでまずそこを作業時間に当てるためにバス移動をはじめてみた。(このブログもバスの中で書いた)</p>

<p>まだ評価する段階にはないけど、とりあえず今の所本読む時間や作業する時間は増えるし、車の運転による<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C8%E8%CF%AB">疲労</a>も減らすので割と良い。</p>

<p>あと、自分の移動時間、移動経路だと割と席も空いていて悠々と作業できそう。</p>

<p>ただバスの時間を正しく把握しないと30分~1時間とかバス待ち時間が発生するのでそれは気をつけないといけない。</p>

<p>5分おきくらいにバスが来る未来が早く来てほしい。</p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: Azure CDNでWBS砲を迎え撃つ
BASENAME: 2018/10/02/015959
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 10/02/2018 01:59:59
-----
BODY:
<p>先日、<a class="keyword" href="http://d.hatena.ne.jp/keyword/WBS">WBS</a>(<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EF%A1%BC%A5%EB%A5%C9%A5%D3%A5%B8%A5%CD%A5%B9%A5%B5%A5%C6%A5%E9%A5%A4%A5%C8">ワールドビジネスサテライト</a>)に僕が所属している会社が取材され、短い時間ですが放送の中で紹介されました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.tv-tokyo.co.jp%2Fmv%2Fwbs%2Fnewsl%2Fpost_163597%2F" title="30日投開票の沖縄県知事選　地元経済人が語る本音…：ワールドビジネスサテライト" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://www.tv-tokyo.co.jp/mv/wbs/newsl/post_163597/">www.tv-tokyo.co.jp</a></cite></p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%B2%AD%C6%EC%B8%A9%C3%CE%BB%F6">沖縄県知事</a>戦を関連した、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B2%AD%C6%EC%B8%A9">沖縄県</a>で注目のIT<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D9%A5%F3%A5%C1%A5%E3%A1%BC">ベンチャー</a>・スタートアップとしてPaykeが紹介され、時間としては大体2分間程度だったのですが、テレビ放送ということもあり会社サイトにアクセスが急増することを想定してAzure <a class="keyword" href="http://d.hatena.ne.jp/keyword/CDN">CDN</a>を使って対策を行いました。(放送があることがわかったのは、放送日前日の午後３時...)</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fazure.microsoft.com%2Fja-jp%2Fservices%2Fcdn%2F" title="Content Delivery Network (CDN) | Microsoft Azure" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://azure.microsoft.com/ja-jp/services/cdn/">azure.microsoft.com</a></cite></p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/CDN">CDN</a>とは世界中に分散しているエッジサーバー上でコンテンツをキャッシュし、オリジナルのサーバーへのアクセスが届く前にエッジサーバーでレスポンスを返すことにより負荷分散とレスポンスの高速化を行うためのサービスです。</p>

<p>Azureの<a class="keyword" href="http://d.hatena.ne.jp/keyword/CDN">CDN</a>の特徴として、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Microsoft">Microsoft</a>、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Akamai">Akamai</a>、Verizonが提供する<a class="keyword" href="http://d.hatena.ne.jp/keyword/CDN">CDN</a>サービスが選択できます。
それぞれ特徴が違うので、自分たちの用途にあったサービスを選ぶことができます。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdocs.microsoft.com%2Fja-jp%2Fazure%2Fcdn%2Fcdn-features" title="Azure Content Delivery Network (CDN) 製品の機能の比較" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://docs.microsoft.com/ja-jp/azure/cdn/cdn-features">docs.microsoft.com</a></cite></p>

<p>今回は静的コンテンツだけでなくサイト全体を<a class="keyword" href="http://d.hatena.ne.jp/keyword/CDN">CDN</a>でキャッシュして配信したかったため、そのためには<a class="keyword" href="http://d.hatena.ne.jp/keyword/CDN">CDN</a>側で<a class="keyword" href="http://d.hatena.ne.jp/keyword/SSL">SSL</a>解決を行う必要がありました。
独自証明書を使いたかったので、それが使える Azure <a class="keyword" href="http://d.hatena.ne.jp/keyword/CDN">CDN</a> Standard from <a class="keyword" href="http://d.hatena.ne.jp/keyword/Microsoft">Microsoft</a>を選択しました。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/CDN">CDN</a>に独自証明書をアップロードするときですが、書式を<a class="keyword" href="http://d.hatena.ne.jp/keyword/pki">pki</a>形式に変換しないといけません。</p>

<p>証明書のcerファイルを以下のコマンドを使って<a class="keyword" href="http://d.hatena.ne.jp/keyword/pki">pki</a>形式に変換します。</p>

<pre class="code" data-lang="" data-unlink>$ openssl pkcs7 -in {common_name}.cer -outform PEM -out {common_name}.pem -print_certs</pre>


<p>以下ページも参考にしてみてください。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Frms-digicert.ne.jp%2Fhowto%2Fbasis%2Fopenssl-get-pxf.html" title="SSLサーバ証明書 : OpenSSLを使って.pfxファイル証明書を作成する方法 \ DigiCert" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://rms-digicert.ne.jp/howto/basis/openssl-get-pxf.html">rms-digicert.ne.jp</a></cite></p>

<h1>すでに稼働している<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3">ドメイン</a>を<a class="keyword" href="http://d.hatena.ne.jp/keyword/CDN">CDN</a>に向ける場合の注意点</h1>

<p>たとえばwww.sample.comというサイトを<a class="keyword" href="http://d.hatena.ne.jp/keyword/CDN">CDN</a>配信するためには、<a class="keyword" href="http://d.hatena.ne.jp/keyword/DNS">DNS</a>の設定でwww.sample.comのCNAMEの向き先を<a class="keyword" href="http://d.hatena.ne.jp/keyword/CDN">CDN</a>の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3">ドメイン</a>にする必要があります。
新しいサイトの場合は問題ないのですが、すでに稼働しているサイトの場合に使用している<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3">ドメイン</a>の向き先をいきなり切り替えると、<a class="keyword" href="http://d.hatena.ne.jp/keyword/CDN">CDN</a>側に設定が反映されるまでのタイムラグの間サイトが表示されなくなってしまいます。</p>

<p>Azure <a class="keyword" href="http://d.hatena.ne.jp/keyword/CDN">CDN</a>ではそのようなケースのためにcdnverify <a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B5%A5%D6%A5%C9%A5%E1%A5%A4%A5%F3">サブドメイン</a>をマップすることで<a class="keyword" href="http://d.hatena.ne.jp/keyword/CDN">CDN</a>側の設定を事前に反映させることができます。
こちらのドキュメントを参考に設定してみてください。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdocs.microsoft.com%2Fja-jp%2Fazure%2Fcdn%2Fcdn-map-content-to-custom-domain%23map-the-temporary-cdnverify-subdomain" title="チュートリアル - カスタム ドメインを Azure CDN エンドポイントに追加する" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://docs.microsoft.com/ja-jp/azure/cdn/cdn-map-content-to-custom-domain#map-the-temporary-cdnverify-subdomain">docs.microsoft.com</a></cite></p>

<h1>オリジンとなるサイトが<a class="keyword" href="http://d.hatena.ne.jp/keyword/WordPress">WordPress</a>の場合の注意点</h1>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/WordPress">WordPress</a>の場合、サイトの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3">ドメイン</a>がデータベース登録されているため、その<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3">ドメイン</a>以外からのアクセスだとリダイレクトがかかるケースがあります。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/wordpress">wordpress</a>に登録しているサイト<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3">ドメイン</a>は<a class="keyword" href="http://d.hatena.ne.jp/keyword/CDN">CDN</a>を向き、<a class="keyword" href="http://d.hatena.ne.jp/keyword/CDN">CDN</a>からは別の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3">ドメイン</a>をつかってオリジンサーバーへはアクセスすることになるため、wp-config.<a class="keyword" href="http://d.hatena.ne.jp/keyword/php">php</a>の中で以下のようなコードを入れて、意図しないリダイレクトが発生しないように調整しました。</p>

<pre class="code" data-lang="" data-unlink>if($_SERVER[&#39;HOST_NAME&#39;] === &#39;origin.sample.com&#39;){
   $_SERVER[&#39;HOST_NAME&#39;] = &#39;www.sample.com&#39;;
}
</pre>


<h1>結果</h1>

<p>通常時の100倍以上のユーザーがサイトに訪れましたが、なんのトラブルもなく正常にサーバー稼働し続けましたので、今回の対策は無事成功したと思います。</p>

<p>実は今回がはじめての<a class="keyword" href="http://d.hatena.ne.jp/keyword/CDN">CDN</a>利用だったのですが、静的コンテンツの大量のアクセス増にすばやく対応するのに、<a class="keyword" href="http://d.hatena.ne.jp/keyword/CDN">CDN</a>はさいつよですね。</p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: AzureにTerraformを使うための前準備
BASENAME: 2018/09/27/140706
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 09/27/2018 14:07:06
-----
BODY:
<h1>Azure <a class="keyword" href="http://d.hatena.ne.jp/keyword/Cli">Cli</a>をインストール</h1>

-----
--------
AUTHOR: arakaji-yuu
TITLE: 育児・家事を自分がやりたいことができないことの言い訳にしてはいけない。
BASENAME: 2018/09/24/213436
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 09/24/2018 21:34:36
-----
BODY:
<p>1児の父として家事・育児をしていて、そうするとどうしても子供の時間に合わせて生活しないといけないので、自分がやりたいことや勉強したいことなどをする時間がなくなっている。</p>

<p>正直それはしょうがないことだと思っていたんですが、知り合いの女性の方が3児の母をしながら仕事もして、かつ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B4%C7%B8%EE%B3%D8%B9%BB">看護学校</a> + 看護師試験のための学校にも通って正看護師の試験を合格したという話を聞いて凄まじいなと思うと同時に自分が子育てを言い訳につかっていたのだなと強く反省した。</p>

<p>やりたいことやることと育児をやることは<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A5%EC%A1%BC%A5%C9%A5%AA%A5%D5">トレードオフ</a>ではない。</p>

<p>やっていくぞ！！！と思った今日このごろでした。</p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: 「ビッグデータを支える技術」を読んで理解したビックデータ技術基盤の概要メモ
BASENAME: 2018/09/21/121526
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 09/21/2018 12:15:26
IMAGE: https://images-fe.ssl-images-amazon.com/images/I/51P2Kp%2Bpq8L._SL160_.jpg
-----
BODY:
<p>そろそろ会社でも<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D3%A5%C3%A5%B0%A5%C7%A1%BC%A5%BF">ビッグデータ</a>というくらいのデータを扱うフェーズに入りそうなので、この辺の技術領域のOverviewを把握するために「<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D3%A5%C3%A5%B0%A5%C7%A1%BC%A5%BF">ビッグデータ</a>を支える技術」という本を読んでいる。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774192252/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/51P2Kp%2Bpq8L._SL160_.jpg" class="hatena-asin-detail-image" alt="ビッグデータを支える技術―刻々とデータが脈打つ自動化の世界 (WEB+DB PRESS plus)" title="ビッグデータを支える技術―刻々とデータが脈打つ自動化の世界 (WEB+DB PRESS plus)"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774192252/hatena-blog-22/">ビッグデータを支える技術―刻々とデータが脈打つ自動化の世界 (WEB+DB PRESS plus)</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> 西田圭介</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> <a class="keyword" href="http://d.hatena.ne.jp/keyword/%B5%BB%BD%D1%C9%BE%CF%C0%BC%D2">技術評論社</a></li><li><span class="hatena-asin-detail-label">発売日:</span> 2017/09/22</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li><li><a href="http://d.hatena.ne.jp/asin/4774192252/hatena-blog-22" target="_blank">この商品を含むブログ (3件) を見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<h2><a class="keyword" href="http://d.hatena.ne.jp/keyword/Hadoop">Hadoop</a>とHive</h2>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Hadoop">Hadoop</a>は「多数のコンピュータで対象のデータ処理を行う」ためのシステムで、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Google">Google</a>で開発された「<a class="keyword" href="http://d.hatena.ne.jp/keyword/MapReduce">MapReduce</a>」を参考にして作られた分散処理の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク</a>。
<a class="keyword" href="http://d.hatena.ne.jp/keyword/Hadoop">Hadoop</a>を使ってデータ処理を行うには<a class="keyword" href="http://d.hatena.ne.jp/keyword/Java">Java</a>言語によるプログラミングが必要だったがだれにでも簡単に使えるものではないので、<a class="keyword" href="http://d.hatena.ne.jp/keyword/SQL">SQL</a>のようなクエリ言語を<a class="keyword" href="http://d.hatena.ne.jp/keyword/Hadoop">Hadoop</a>上で実行するためのソフトウェアとしてHiveがある。</p>

<h2>NoSQLに書き込み、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Hadoop">Hadoop</a>で分散処理</h2>

<p>NoSQLは製品によって特徴を様々ですが、<a class="keyword" href="http://d.hatena.ne.jp/keyword/RDB">RDB</a>よりも高速な読み書きが可能かつ分散処理に優れているという特徴をもっているため、アプリケーションからオンラインで接続するデータベースと利用し、バックエンドで<a class="keyword" href="http://d.hatena.ne.jp/keyword/Hadoop">Hadoop</a>が分散処理をして集計・データ加工などを行うという形が一般に広がってきた。</p>

<h2><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D3%A5%C3%A5%B0%A5%C7%A1%BC%A5%BF">ビッグデータ</a>時代のデータ分析基盤</h2>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D3%A5%C3%A5%B0%A5%C7%A1%BC%A5%BF">ビッグデータ</a>自体の技術が従来のデータウェアハウスと違うのは、「多数のぶんさんシステムを組み合わせて拡張性のたかいデータ処理の仕組みをつくる」こと。</p>

<p>データ分析基盤は以下のようなサブシステムを組み合わせてデータパイプラインを実現している。</p>

<h3>データ収集</h3>

<p>データを集めるところ。ここからすべてが始まる。
<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%A1%A5%A4%A5%EB%A5%B7%A5%B9%A5%C6%A5%E0">ファイルシステム</a>にあるログファイルから、IoTデ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%B9">バイス</a>のセンサ情報など様々。
データ転送方法には「バルク型」と「ストリーム型」がある</p>

<h3>ストリーム処理と<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A5%C3%A5%C1%BD%E8%CD%FD">バッチ処理</a></h3>

<p>データ収集された処理を扱う方法にはストリーム処理と<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A5%C3%A5%C1%BD%E8%CD%FD">バッチ処理</a>がある。
リアルタイム性が必要なものはストリーム処理。長期的なデータ分析には<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A5%C3%A5%C1%BD%E8%CD%FD">バッチ処理</a>が適している。</p>

<h3>分散ストレージ</h3>

<p>集めたデータを補完しておく分散ストレージ。<a class="keyword" href="http://d.hatena.ne.jp/keyword/Amazon">Amazon</a>のS3のようなオブジェクトストレージが一般的に使われる。
データ容量が増えていくので、いくらでも増やせるようなスケーラビリティの高い製品を選ぶ必要あり。</p>

<h3>分散データ処理</h3>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Hadoop">Hadoop</a>・<a class="keyword" href="http://d.hatena.ne.jp/keyword/MapReduce">MapReduce</a>などはこの分野。</p>

<h3>ワークフロー管理</h3>

<p>データパイプライン全体の動作管理するための技術。
データパイプラインが複雑化するにつれて一箇所でマネージメントしないと管理できなくなる。</p>

<h2>データレイクとデータウェアハウス</h2>

<p>データウェアハウスは従来から大量のデータ保管・分析を行うために使われていた技術。しかしデータウェアハウスは事前にデータ設計をする必要があるが、ビックデータ時代は<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%AF%A5%BB%A5%B9%A5%ED%A5%B0">アクセスログ</a>からIoTデ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%B9">バイス</a>からのセンシングデータなど多種多様なデータが生まれていくので、最初から適した<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A1%BC%A5%BF%B7%C1%BC%B0">データ形式</a>を設計してためていくことが難しい。
そのためデータレイクという考え方があり、それは「生データをとりあえずおいておく」ということ。
オブジェクトストレージなどにおいておき、あとで適した形式に<a class="keyword" href="http://d.hatena.ne.jp/keyword/Hadoop">Hadoop</a>などを使って分散データ処理をしてデータマートを作るという考え方。</p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: 数学復習ノート#1 ~ 統計額と機械学習につながる数学の基本 ~ 
BASENAME: 2018/09/20/143649
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 09/20/2018 14:36:49
IMAGE: https://images-fe.ssl-images-amazon.com/images/I/51p4aPUyeOL._SL160_.jpg
-----
BODY:
<p>いまデータ分析と<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B5%A1%B3%A3%B3%D8%BD%AC">機械学習</a>を操れるエンジニアになるため、この本で数学の復習している。</p>
<p> </p>
<div class="freezed">
<div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4478104514/hatena-blog-22/"><img class="hatena-asin-detail-image" title="統計学が最強の学問である[数学編]――データ分析と機械学習のための新しい教科書" src="https://images-fe.ssl-images-amazon.com/images/I/51p4aPUyeOL._SL160_.jpg" alt="統計学が最強の学問である[数学編]――データ分析と機械学習のための新しい教科書" /></a>
<div class="hatena-asin-detail-info">
<p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4478104514/hatena-blog-22/">統計学が最強の学問である[数学編]――データ分析と機械学習のための新しい教科書</a></p>
<ul>
<li><span class="hatena-asin-detail-label">作者:</span> 西内啓</li>
<li><span class="hatena-asin-detail-label">出版社/メーカー:</span> <a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C0%A5%A4%A5%E4%A5%E2%A5%F3%A5%C9%BC%D2">ダイヤモンド社</a></li>
<li><span class="hatena-asin-detail-label">発売日:</span> 2017/12/21</li>
<li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li>
<li><a href="http://d.hatena.ne.jp/asin/4478104514/hatena-blog-22" target="_blank" rel="noopener">この商品を含むブログ (3件) を見る</a></li>
</ul>
</div>
<div class="hatena-asin-detail-foot"> </div>
</div>
</div>
<p> </p>
<p>物理ノートにメモしながら学んでいるので、自分の勉強ログとしてここにあげておきます。</p>
<p> </p>
<p><img class="hatena-fotolife" title="f:id:arakaji-yuu:20180920142951j:image" src="https://cdn-ak.f.st-hatena.com/images/fotolife/a/arakaji-yuu/20180920/20180920142951.jpg" alt="f:id:arakaji-yuu:20180920142951j:image" /></p>
<p> </p>
<p><img class="hatena-fotolife" title="f:id:arakaji-yuu:20180920143026j:image" src="https://cdn-ak.f.st-hatena.com/images/fotolife/a/arakaji-yuu/20180920/20180920143026.jpg" alt="f:id:arakaji-yuu:20180920143026j:image" /></p>
<p><img class="hatena-fotolife" title="f:id:arakaji-yuu:20180920143040j:image" src="https://cdn-ak.f.st-hatena.com/images/fotolife/a/arakaji-yuu/20180920/20180920143040.jpg" alt="f:id:arakaji-yuu:20180920143040j:image" /></p>
<p><img class="hatena-fotolife" title="f:id:arakaji-yuu:20180920143048j:image" src="https://cdn-ak.f.st-hatena.com/images/fotolife/a/arakaji-yuu/20180920/20180920143048.jpg" alt="f:id:arakaji-yuu:20180920143048j:image" /></p>
<p><img class="hatena-fotolife" title="f:id:arakaji-yuu:20180920143104j:image" src="https://cdn-ak.f.st-hatena.com/images/fotolife/a/arakaji-yuu/20180920/20180920143104.jpg" alt="f:id:arakaji-yuu:20180920143104j:image" /></p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
-----
--------
AUTHOR: arakaji-yuu
TITLE: 目標: 2018.09〜2018.12中にWeb、ブロックチェーン、機械学習の技術を組み合わせたシステムを実装できるようになる
BASENAME: 2018/09/18/094216
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 09/18/2018 09:42:16
-----
BODY:
<p>今年も残り3ヶ月半ほど。</p>
<p>やりたいこともたくさんありますがなかなかそれを達成することもできていないので、ブログに目標を記録しておいて、あとで振り返るとする。</p>
<p>振り返って恥ずかしい感じにならないように頑張るぞ！</p>
<p> </p>
<h3>2018.09〜2018.12中にWeb、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D6%A5%ED%A5%C3%A5%AF%A5%C1%A5%A7%A1%BC%A5%F3">ブロックチェーン</a>、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B5%A1%B3%A3%B3%D8%BD%AC">機械学習</a>の技術を組み合わせたシステムを実装できるようになる</h3>
<p>これが残りの今年の、僕のエンジニアとしての目標です。</p>
<p> </p>
<p>なぜこの目標かというと僕はいまWebアプリケーションエンジニアとしてはある程度のスキルは持ってきたのですが、Web技術を更に深掘りしつつも新たなパライダイムシフトとなるテク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%CE%A5%ED">ノロ</a><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B8%A1%BC">ジー</a>も追いかけないとエンジニアとして次のステージにいけないと考えていますし、なにより<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D6%A5%ED%A5%C3%A5%AF%A5%C1%A5%A7%A1%BC%A5%F3">ブロックチェーン</a>や<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B5%A1%B3%A3%B3%D8%BD%AC">機械学習</a>という技術が、これまではできなかったことが出来るようになるという大きな変化をもたらす技術のため身につけることが純粋にワクワクするからです。</p>
<p> </p>
<h4>基本戦略1: 基礎を積み上げる</h4>
<p>僕のエンジニアとしていままでは<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D4%A5%E5%A1%BC%A5%BF%A5%B5%A5%A4%A5%A8%A5%F3%A5%B9">コンピュータサイエンス</a>やエンジニアリングの基礎なく今必要な上辺の技術だけを都度都度学びながらやってきましたが、それだけだと自分の技術力が薄っぺらいものになっている実感があります。</p>
<p>なので、今回はわからないことがあれば時間をかけてでも基礎<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%AB%A4%E9%A4%B7">からし</a>っかりと積み上げて勉強していきます。</p>
<p> </p>
<h4>基本戦略2: アウトプット・プロジェクトドリブン</h4>
<p>学んだことは小さい単位でも良いのでアウトプットしていく。基礎的なものであればブログに書く、誰かのメンターをしながら教える、発表するなどで外に伝えれるように理解する。</p>
<p>また学んだ技術を実際に使うプロジェクトを作る or 参加することで手を動かしながら解像度高く学びのサイクルを高速にまわしていく。</p>
<p> </p>
<h4>基本戦略3: 深夜の時間を毎日投資する</h4>
<p>いまは子育て中ということもありなかなかまとまった時間が取れないが、子どもが寝て片付け、夜<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B4%A5%CF%A5%F3">ゴハン</a>なども済んだ夜の11時から寝るまでの間はある程度自由に使えるのでその時間を投資していく。</p>
<p>23時から2時までを定期積立投資のように、この目標のための自己投資として時間を使うことにする。</p>
<p> </p>
<p> </p>
<h4>最後に</h4>
<p>速度の速いテク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%CE%A5%ED">ノロ</a><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B8%A1%BC">ジー</a>の分野にてかつスタートアップという世界に身をおいているので、3ヶ月っていう時間は体感的には他の分野の一年かそれ以上の時間に近いと思っていて、なので一年後にはこうなりたいという目線で3ヶ月間の目標を設定した。</p>
<p>この目標を達成できるように日々を丁寧に積み重ねていきたい。</p>
<p> </p>
<p>あと、ついでに3kgくらい痩せていたい。</p>
<p> </p>
<p> </p>
-----
--------
AUTHOR: arakaji-yuu
TITLE: CXDIVE 2018の参加レポート
BASENAME: 2018/09/13/112436
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 09/13/2018 11:24:36
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/a/arakaji-yuu/20180911/20180911094808.png
-----
BODY:
<p>CXDIVE 2018というイベントが東京で開催されており、これを知った瞬間に「行きたい！！」と思って参加してきました。</p>
<p> </p>
<p><iframe class="embed-card embed-webcard" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;" title="CX DIVE 2018｜株式会社プレイド" src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fcxdive.com%2F" frameborder="0" scrolling="no"></iframe><cite class="hatena-citation"><a href="https://cxdive.com/">cxdive.com</a></cite></p>
<p> </p>
<p>この記事では具体的なセッションの内容というよりもセッションを聞いた上で僕が理解したこと、考えたことなどを整理して共有しています。そのため実際の発表内容とずれている部分もあるかと思いますが、その点はご了承ください。</p>
<p>  </p>
<h3>森ビル 杉山さんと チームラボ 猪子さんのセッション</h3>
<p><iframe class="embed-card embed-blogcard" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;" title="CXDIVE 2018: 森ビル 杉山さんと チームラボ 猪子さんのセッション「チームラボ・ボーダレスで目指した、これからの顧客体験」 - ゆーじのろぐ" src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Farakaji.hatenablog.com%2Fentry%2F2018%2F09%2F12%2F064531" frameborder="0" scrolling="no"></iframe><cite class="hatena-citation"><a href="http://arakaji.hatenablog.com/entry/2018/09/12/064531">arakaji.hatenablog.com</a></cite></p>
<p> </p>
<h3>Media x CX : NewsPicks 小野晶子さんのセッション「なぜ今、メディアはコミュニティづくりに注力するのか？」</h3>
<p><iframe class="embed-card embed-blogcard" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;" title="CXDIVE 2018 | Media x CX : NewsPicks 小野晶子さんのセッション「なぜ今、メディアはコミュニティづくりに注力するのか？」 - ゆーじのろぐ" src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Farakaji.hatenablog.com%2Fentry%2F2018%2F09%2F12%2F065013" frameborder="0" scrolling="no"></iframe><cite class="hatena-citation"><a href="http://arakaji.hatenablog.com/entry/2018/09/12/065013">arakaji.hatenablog.com</a></cite></p>
<p> </p>
<h3>Commerce x CX: 株式会社ウツワ ハヤカワ五味さんのセッション「当事者視点の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B5%A5%A4%A5%C8">インサイト</a>と、当事者では気づき得ない発見について」</h3>
<p><iframe class="embed-card embed-blogcard" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;" title="CXDIVE 2018 | Commerce x CX: 株式会社ウツワ ハヤカワ五味さんのセッション「当事者視点のインサイトと、当事者では気づき得ない発見について」 - ゆーじのろぐ" src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Farakaji.hatenablog.com%2Fentry%2F2018%2F09%2F12%2F065540" frameborder="0" scrolling="no"></iframe><cite class="hatena-citation"><a href="http://arakaji.hatenablog.com/entry/2018/09/12/065540">arakaji.hatenablog.com</a></cite></p>
<p> </p>
<h3>AR x CX :  <a class="keyword" href="http://d.hatena.ne.jp/keyword/Niantic">Niantic</a>, inc 須賀健人さんのセッション「外に出て、繋がる。拡張された現実世界がもたらす価値」</h3>
<p><iframe class="embed-card embed-blogcard" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;" title="CXDIVE 2018 | AR x CX :  Niantic, inc 須賀健人さんのセッション「外に出て、繋がる。拡張された現実世界がもたらす価値」 - ゆーじのろぐ" src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Farakaji.hatenablog.com%2Fentry%2F2018%2F09%2F12%2F065813" frameborder="0" scrolling="no"></iframe><cite class="hatena-citation"><a href="http://arakaji.hatenablog.com/entry/2018/09/12/065813">arakaji.hatenablog.com</a></cite></p>
<p> </p>
<h3>WITH ALS 武藤さんのセッション「ALSの困難から発明を。BORDERLESS EXPERIENCEをすべての人に」</h3>
<p> </p>
<p><iframe class="embed-card embed-blogcard" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;" title="CXDIVE 2018 | WITH ALS 武藤さんのセッション「ALSの困難から発明を。BORDERLESS EXPERIENCEをすべての人に」 - ゆーじのろぐ" src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Farakaji.hatenablog.com%2Fentry%2F2018%2F09%2F12%2F071614" frameborder="0" scrolling="no"></iframe><cite class="hatena-citation"><a href="http://arakaji.hatenablog.com/entry/2018/09/12/071614">arakaji.hatenablog.com</a></cite></p>
<p> </p>
-----
--------
AUTHOR: arakaji-yuu
TITLE: CXDIVE 2018 | WITH ALS 武藤さんのセッション「ALSの困難から発明を。BORDERLESS EXPERIENCEをすべての人に」
BASENAME: 2018/09/12/071614
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 09/12/2018 07:16:14
-----
BODY:
<p>CXDIVE 2018というイベントが東京で開催されており、これを知った瞬間に「行きたい！！」と思って参加してきました。</p>
<p> </p>
<p><iframe class="embed-card embed-webcard" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;" title="CX DIVE 2018｜株式会社プレイド" src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fcxdive.com%2F" frameborder="0" scrolling="no"></iframe><cite class="hatena-citation"><a href="https://cxdive.com/">cxdive.com</a></cite></p>
<p> </p>
<p>この記事では具体的なセッションの内容というよりもセッションを聞いた上で僕が理解したこと、考えたことなどを整理して共有しています。そのため実際の発表内容とずれている部分もあるかと思いますが、その点はご了承ください。</p>
<p> </p>
<h3>WITH ALS 武藤さんのセッション「ALSの困難から発明を。BORDERLESS EXPERIENCEをすべての人に」</h3>
<p>ALSという体の筋肉が除々に硬直化して動かなくなっていくという病気を27歳で患ってしまった武藤さんが現在どのような活動をしているか、活動を通してどういう世界を実現しようとしているかという話でした。</p>
<h3> </h3>
<h3><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C0%A5%A4%A5%D0%A1%BC%A5%B7%A5%C6%A5%A3">ダイバーシティ</a>を持った人にもBORDERLESSな体験を</h3>
<p>彼はALSを発症する前にDJを始めたのですが、症状が進んでいくにつれて手が自由に動かせなくなった。そこでJIS MEMEというカメラ型デ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%B9">バイス</a>を使って眼球の動きでDJ・VJプレイが出来るアプリを共同開発した。</p>
<p> </p>
<p>その他、手の不自由によってできなくなった家の電気や鍵の開けしめ、そして<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%DE%A5%DB">スマホ</a>のカメラ撮影なども<a class="keyword" href="http://d.hatena.ne.jp/keyword/JINS">JINS</a> MEMEを使って操作できるようにした。</p>
<p> </p>
<p>この活動について<a class="keyword" href="http://d.hatena.ne.jp/keyword/Youtube">Youtube</a>に動画が上がっていたので参考としてリンクを共有しておきます。</p>
<p> </p>
<p><iframe src="//www.youtube.com/embed/LJuDXBaVY2A" width="560" height="315" frameborder="0" allowfullscreen=""></iframe><br /><a href="https://youtube.com/watch?v=LJuDXBaVY2A">[NEWS] 「眼で奏でるミュージックフィルムを」WITH ALS 武藤将胤が描く未来</a></p>
<h4>すべての人がバリューを感じるプロダクトデザイン</h4>
<p>ALSの患者の方でも、そうでない方でもカッコいいと思える服を作りたいという思いから「BORDERLESS WEAR 01」というブランドも立ち上げている。</p>
<p> </p>
<p><iframe class="embed-card embed-webcard" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;" title="01 BORDERLESS WEAR" src="https://hatenablog-parts.com/embed?url=https%3A%2F%2F01borderlesswear.stores.jp%2F" frameborder="0" scrolling="no"></iframe><cite class="hatena-citation"><a href="https://01borderlesswear.stores.jp/">01borderlesswear.stores.jp</a></cite></p>
<p> </p>
<p>特徴として以下の様な特徴をもっている。</p>
<p>・着ていて楽なスウェット素材</p>
<p>・ジャケットのボタンはマグネット式になっており、簡単に着脱可能に</p>
<p>・袖口に<a class="keyword" href="http://d.hatena.ne.jp/keyword/IC%A5%AB%A1%BC%A5%C9">ICカード</a>ポケットがついており、キャッシュレス決済が簡単にできる</p>
<p> </p>
<p>このブランドを作ったときに意識したのが「ALS患者の人もそうでない人も関係なく、すべての人にバリューを感じるプロダクトデザイン」で、確かに上記の特徴は体に特に不自由なところの無い僕でも「良いな！」という感じる価値になっている。</p>
<p> </p>
<p>いまの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B9%E2%CE%F0%B2%BD%BC%D2%B2%F1">高齢化社会</a>において、障害を持っていなかった人も高齢になって体に不自由が出てくる人も多くなる。このような時代においてボーダレスな価値を以下に提供していくかは重要な課題だなと感じたセッションでした。</p>
<p> </p>
<h4>ホームオートメーション化の本質的な価値は「操作の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A1%BC%A5%D5%A5%A7%A5%A4%A5%B9">インターフェイス</a>を自由にすることにある」</h4>
<p>これはセッションで直接語られたことではなく僕が考えたことです。</p>
<p>いまホームオートメーションという文脈で、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AD%A1%BC%A5%ED%A5%C3%A5%AF">キーロック</a>が<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%DE%A5%DB">スマホ</a>で解錠できる、電気のON/OFFを声で操作できるなどの製品が出てきています。</p>
<p>正直「そこまでする必要あるのか？」と思うことが多かったのですが、今回のセッションを聞いたあとに考えると、これらのホームオートメーション化のプロダクトの価値は操作を<a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a>化することにより、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A1%BC%A5%D5%A5%A7%A5%A4%A5%B9">インターフェイス</a>を声にもできる、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%DE%A5%DB">スマホ</a>でもできる、それ以外にも変更可能となり、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A1%BC%A5%D5%A5%A7%A5%A4%A5%B9">インターフェイス</a>が人に最適化できることに価値があるのだと気づきました。</p>
<p> </p>
<p>いままでの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A1%BC%A5%D5%A5%A7%A5%A4%A5%B9">インターフェイス</a>はスイッチ操作が主流で、それは手を使えない、目が見えない人にはかなり不便なモノだったのですが、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A1%BC%A5%D5%A5%A7%A5%A4%A5%B9">インターフェイス</a>を自由にすることでそのような人にも最適な<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A1%BC%A5%D5%A5%A7%A5%A4%A5%B9">インターフェイス</a>を提供できるようになります。</p>
<p> </p>
<p>いままでこの辺の技術には興味が薄かったのですが、この「操作の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A1%BC%A5%D5%A5%A7%A5%A4%A5%B9">インターフェイス</a>を自由にする」価値に気づいたことで、かぜん興味がでるきっかけにこのセッションがなりました。</p>
-----
--------
AUTHOR: arakaji-yuu
TITLE: CXDIVE 2018 | AR x CX :  Niantic, inc 須賀健人さんのセッション「外に出て、繋がる。拡張された現実世界がもたらす価値」
BASENAME: 2018/09/12/065813
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 09/12/2018 06:58:13
-----
BODY:
<p>CXDIVE 2018というイベントが東京で開催されており、これを知った瞬間に「行きたい！！」と思って参加してきました。</p>
<p> </p>
<p><iframe class="embed-card embed-webcard" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;" title="CX DIVE 2018｜株式会社プレイド" src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fcxdive.com%2F" frameborder="0" scrolling="no"></iframe><cite class="hatena-citation"><a href="https://cxdive.com/">cxdive.com</a></cite></p>
<p> </p>
<p>この記事では具体的なセッションの内容というよりもセッションを聞いた上で僕が理解したこと、考えたことなどを整理して共有しています。そのため実際の発表内容とずれている部分もあるかと思いますが、その点はご了承ください。</p>
<p> </p>
<h3>AR x CX :  <a class="keyword" href="http://d.hatena.ne.jp/keyword/Niantic">Niantic</a>, inc 須賀健人さんのセッション「外に出て、繋がる。拡張された現実世界がもたらす価値」</h3>
<h4>ARとは「世界に、見えていない情報を付加して現実世界を拡張する」こと</h4>
<p>ARとはなにか？という話になると、カメラで取った現実世界に映像が重なるものを思い浮かべると思うが、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Niantic">Niantic</a>社の考えだとARとは「世界に、見えていない情報を付加して現実世界を拡張すること」と広義に考えているそう。</p>
<p> </p>
<p>例として、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Google">Google</a> Mapは人間の目には見えない範囲の情報を表示して行き先まで案内してくれるがこれもある意味ARといえる、という考え方らしい。</p>
<p> </p>
<h4><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DD%A5%B1%A5%E2%A5%F3GO">ポケモンGO</a>の面白さは「共有性」と「共通性」にある</h4>
<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DD%A5%B1%A5%E2%A5%F3GO">ポケモンGO</a>がリリースされて<a class="keyword" href="http://d.hatena.ne.jp/keyword/SNS">SNS</a>上では現実世界を写したカメラの映像に<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DD%A5%B1%A5%E2%A5%F3">ポケモン</a>が映る ARモードの写真が溢れかえった。</p>
<p>これはゲーム体験を<a class="keyword" href="http://d.hatena.ne.jp/keyword/SNS">SNS</a>シェアしやすい、したくなる「共有性」が設計されたもので<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DD%A5%B1%A5%E2%A5%F3GO">ポケモンGO</a>が一気に広まる要因にもなった。</p>
<p> </p>
<p>共通性というのは<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DD%A5%B1%A5%E2%A5%F3GO">ポケモンGO</a>のイベントが行われるときに顕著に現れる。</p>
<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DD%A5%B1%A5%E2%A5%F3GO">ポケモンGO</a>は、「誰かが見ている<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DD%A5%B1%A5%E2%A5%F3">ポケモン</a>は、同じ場所にいるすべてのユーザーが見ることができる」という特徴があります。この共通性により、同じ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DD%A5%B1%A5%E2%A5%F3">ポケモン</a>をユーザー同士で協力して捕まえる「レイドバトル」であったり、特定の地域にレア<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DD%A5%B1%A5%E2%A5%F3">ポケモン</a>が出現するというイベントが実現でき、ユーザー同士で同じ体験をしたことを語り合うというユーザー体験が作れるようになりました。</p>
<p> </p>
<h4><a class="keyword" href="http://d.hatena.ne.jp/keyword/Niantic">Niantic</a>社のライバルは「<a class="keyword" href="http://d.hatena.ne.jp/keyword/VR">VR</a> 」！？</h4>
<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Niantic">Niantic</a>はミッションとして、「AR技術を使って人をもっと外に動かす」ということを考えている。それは歩くことは健康にも良いし、自分の周りの世界のことをNiancticのゲーム体験を通してもっと知ってほしいという考えから。</p>
<p>会場からの「御社にとって競合・脅威となるような企業やテク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%CE%A5%ED">ノロ</a><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B8%A1%BC">ジー</a>などはあるか？」という質問に対して、「特別に競合などを意識してはいないが、あえて上げるとすると<a class="keyword" href="http://d.hatena.ne.jp/keyword/VR">VR</a>など座って映像をみているだけで面白い体験を出来るようなテク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%CE%A5%ED">ノロ</a><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B8%A1%BC">ジー</a>は、ARを使って外にユーザーを連れ出したい<a class="keyword" href="http://d.hatena.ne.jp/keyword/Niantic">Niantic</a>としてはライバルと言えるかもしれない」という返答していました。</p>
<p> </p>
-----
--------
AUTHOR: arakaji-yuu
TITLE: CXDIVE 2018 | Commerce x CX: 株式会社ウツワ ハヤカワ五味さんのセッション「当事者視点のインサイトと、当事者では気づき得ない発見について」
BASENAME: 2018/09/12/065540
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 09/12/2018 06:55:40
-----
BODY:
<p>CXDIVE 2018というイベントが東京で開催されており、これを知った瞬間に「行きたい！！」と思って参加してきました。</p>
<p> </p>
<p><iframe class="embed-card embed-webcard" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;" title="CX DIVE 2018｜株式会社プレイド" src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fcxdive.com%2F" frameborder="0" scrolling="no"></iframe><cite class="hatena-citation"><a href="https://cxdive.com/">cxdive.com</a></cite></p>
<p> </p>
<p>この記事では具体的なセッションの内容というよりもセッションを聞いた上で僕が理解したこと、考えたことなどを整理して共有しています。そのため実際の発表内容とずれている部分もあるかと思いますが、その点はご了承ください。</p>
<p> </p>
<h3>Commerce x CX: 株式会社ウツワ ハヤカワ五味さんのセッション「当事者視点の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B5%A5%A4%A5%C8">インサイト</a>と、当事者では気づき得ない発見について」</h3>
<h4>事実よりもどう知覚されているかが重要</h4>
<p>このセッションのメインテーマとして「バイアス」について語られていました。</p>
<p>同じ事実でもそれを見る人によってどう知覚されるかが違う。ターゲットとなる顧客の持っているバイアスを理解せずにビジネスを行っても成功しないということを参考例を出しながら教えてくれました。</p>
<p> </p>
<p>特に面白かった例として、中国展開しようとするアパレルブランドの例がありました。</p>
<p> </p>
<p>日本だとスタイルの良いヨーロッパ・<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%E1%A5%EA">アメリ</a>カ系の外国人がモデルをするアパレルブランドの広告がよくありますが、日本人だとそれを見て「かっこいい！！！」となるところが、中国人だと「これは自分たちのためのブランドじゃない、だから見る必要がない」と知覚されてまったく興味を示さないそうです。</p>
<p> </p>
<p>このようにバイアスを理解せずに宣伝したことにより、商品は良かったかもしれないのにビジネス展開に失敗するというケースが多いため、ターゲットを決めたらそのターゲットがどういうバイアスをもって世界を見ているのかを知った上で戦略を練るのが重要ということでした。</p>
<p> </p>
<h4>その人の持つバイアスを理解するには、その人の生きてきた環境を理解する</h4>
<p>バイアスを理解する上で、そのバイアスというのはどこからくるかを考えないといけないのですが、そこで安易に性別・年齢・国籍だけで判断するのは間違っていて、その人が生きてきた環境を理解するのが重要で、環境を理解すればバイアスを推測して理解出来る手助けになります。</p>
<p> </p>
<p>会場の方から「人が持っているバイアスを理解するために、どのようなことを意識しているか？」という質問に対しては、「昔は意見が違う人のことをバカにしてしまう傾向があったが、いまはなぜこの人はこういう意見を言うのか？を考えるようにしている」と答えていました。その人と自分との意見の違いがどんな環境の違いから生まれているのかを考えることでバイアスを理解したコミュケーションが取れるようになったそうです。</p>
<p> </p>
<p>僕がいまJOINしているPaykeという会社においては訪日外国人、特に台湾の方がユーザー数が多いことから彼らがどういうバイアスを持って世界を見ているのかを知ることは非常に重要なので、中国語や台湾の文化、歴史、いま台湾内でなにが起こっているのかをキャッチアップしていかないといけないなと実感しました。</p>
<p> </p>
-----
--------
AUTHOR: arakaji-yuu
TITLE: CXDIVE 2018 | Media x CX : NewsPicks 小野晶子さんのセッション「なぜ今、メディアはコミュニティづくりに注力するのか？」
BASENAME: 2018/09/12/065013
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 09/12/2018 06:50:13
-----
BODY:
<p>CXDIVE 2018というイベントが東京で開催されており、これを知った瞬間に「行きたい！！」と思って参加してきました。</p>
<p> </p>
<p><iframe class="embed-card embed-webcard" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;" title="CX DIVE 2018｜株式会社プレイド" src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fcxdive.com%2F" frameborder="0" scrolling="no"></iframe><cite class="hatena-citation"><a href="https://cxdive.com/">cxdive.com</a></cite></p>
<p> </p>
<p>この記事では具体的なセッションの内容というよりもセッションを聞いた上で僕が理解したこと、考えたことなどを整理して共有しています。そのため実際の発表内容とずれている部分もあるかと思いますが、その点はご了承ください。</p>
<p> </p>
<h3>Media x CX : NewsPicks 小野晶子さんのセッション「なぜ今、メディアはコミュニティづくりに注力するのか？」</h3>
<h4> </h4>
<h4>NewsPicksのコアとなる価値、ニュースに求める2つの欲求</h4>
<p>NewsPicksを作るときにまずニュースに人が持っている欲求はなにかを掘り下げ大きく２つあると考えたそう。</p>
<p> </p>
<p>1. 読みたいニュースに出会える「発見」の欲求</p>
<p>2. 読んだニュースを理解できる「理解」の欲求</p>
<p> </p>
<p>この「発見」と「理解」の欲求を満たすサービスとしてNewsPicksは設計されていて、「発見」の欲求を満たすのが様々なメディアの記事が1アプリで見ることができる機能、「理解」の欲求を満たすのが、NewsPicksの記事に対して良質なコメントをしてくれるコミュニティの存在だそうです。</p>
<p> </p>
<h4>なぜいま様々なビジネスにおいてコミュニティづくりが重要視されているか？</h4>
<p>コミュニティづくりが重要視されている背景には3つの要因が指摘されていました。</p>
<p> </p>
<p>1. マス向けメッセージのノイズ化</p>
<p>2. 孤立する人々の急増</p>
<p>3. メンバーシップビジネスの勃興</p>
<p> </p>
<p>これらの背景から、広告に頼らず顧客と直接コミュニケーションを取り、孤立する人々の良質なつながりを作りたいという欲求を叶え、メンバーシップビジネス(定額課金)との強い親和性からコミュニティづくりがビジネスにおいても重要視されている。</p>
<p> </p>
<h4>コミュニティマネジメントの試行錯誤</h4>
<p>NewsPicksでは一時コミュニティマネジメントがうまく行っていないときがあり、その問題を解決するために専任のコミュニティマネージャーを導入した。</p>
<p>まず取り組んだのがコミュニティ関するルールづくりで、実際のユーザーさんとコミュケーションをとって「やってはいけないこと」を明文化した。</p>
<p> </p>
<p>コミュニティ運営の難しさは「不可逆性」にあり、もし運営側が行った施策が間違っていたとしてももう元の状態に戻すことはできない。</p>
<p>そのためコミュニティマネージャーは思い悩むのですが「CMX Hub」という世界的なコミュニティマネージャーの<a class="keyword" href="http://d.hatena.ne.jp/keyword/Facebook">Facebook</a> Groupがあり、そこで情報交換が行われ知見を学ぶことができる。</p>
<p><iframe class="embed-card embed-webcard" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;" title="CMX Hub" src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.facebook.com%2Fgroups%2Fcmxhub%2F" frameborder="0" scrolling="no"></iframe><cite class="hatena-citation"><a href="https://www.facebook.com/groups/cmxhub/">www.facebook.com</a></cite></p>
<h4>大きくなったコミュニティは小さく分割する</h4>
<p>人が群れだと認識出来る数は「150人」だと言われており、それ以上になると所属している意識が薄れてしまう。</p>
<p>そのため人数が大きくなったコミュニティの場合は、そのコミュニティを小さく細分化して運営するようにするとうまくいきやすい。</p>
<p> </p>
<p> </p>
-----
--------
AUTHOR: arakaji-yuu
TITLE: CXDIVE 2018: 森ビル 杉山さんと チームラボ 猪子さんのセッション「チームラボ・ボーダレスで目指した、これからの顧客体験」
BASENAME: 2018/09/12/064531
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 09/12/2018 06:45:31
-----
BODY:
<p>お台場にオープンしたteamLab Borderlessというデジタルアート施設についてのセッションで、森ビルは「東京を世界一の都市にする」というミッションを掲げており、世界で活躍するチームラボのアート作品を東京で見れるようにすればより大きな<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%D1%A5%AF">インパク</a>トがあるのではないかという想いと、新たなアート作品を作るためには巨大な常設施設が必要という考えがあったチームラボとのマッチングによってteamLab Borderlessは生まれたようです。</p>
<p> </p>
<p><iframe class="embed-card embed-webcard" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;" title="チームラボ ボーダレス お台場 公式サイト：森ビルデジタルアートミュージアム" src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fborderless.teamlab.art%2Fjp%2F" frameborder="0" scrolling="no"></iframe><cite class="hatena-citation"><a href="https://borderless.teamlab.art/jp/">borderless.teamlab.art</a></cite></p>
<p> </p>
<h4>コンセプト正しく理解してもらえるかでCXは変わる</h4>
<p>この施設が出来上がって、最初に関係者に対してお披露目したときに行ったアンケートでは結構不評が多く、その理由は「経路がわからずに迷ってしまう」「作品がどこにあるのかわからない」「知り合いが見たという作品が見れない」というものだったらしい。しかし、このアート作品のコンセプトを理解してもらうために入り口に「Wander, Explore and Discover ~ さまよい 探索し 発見する」というメッセージを入れると多くの人がコンセプトを理解して不満だった点がむしろ楽しい要因となるように顧客体験が変わったそうです。</p>
<p> </p>
<p><img class="hatena-fotolife" title="f:id:arakaji-yuu:20180911094808p:plain" src="https://cdn-ak.f.st-hatena.com/images/fotolife/a/arakaji-yuu/20180911/20180911094808.png" alt="f:id:arakaji-yuu:20180911094808p:plain" /></p>
<p> </p>
<p>アーティスト側としては意図して作ったものでも、理解してもらえないとCXとしては不満に変わることもある。ただ、正しく理解できるようなアプローチをとる同じ事象でも良いCXとなるという面白い事例でした。</p>
<p> </p>
<h4>デジタルアート x 沖縄という可能性</h4>
<p>このセッションを聞きながら僕が個人的に考えたのはデジタルアート x 沖縄の可能性でした。</p>
<p>沖縄はアジアの観光地として立地的も文化的にも大きなポテンシャルがあるが、そこにテク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%CE%A5%ED">ノロ</a><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B8%A1%BC">ジー</a>とアートの最先端が感じられるデジタルアート作品が見られるような施設・イベントなどがあれば観光資源としての可能性が高い。</p>
<p> </p>
<p>あと個人的な想いとして「沖縄を観光客だけでなく、クリエティブクラスがいきいきと活動できる島にしたい」というのがあり、ただ観光客が集まるだけでなくモノやコトを生み出す人たちが集まり、その人たちが作るモノでまた人が集まるというサイクルを作れたらより面白くなるんじゃないかと考えており、その意味でもデジタルアートの可能性にはとても惹かれました。</p>
<p> </p>
<p>いまはアプリケーションエンジニアとしてしか活動できていないですが、デジタルアートという分野も覗いてみたい、挑戦してみたいと思えたセッションになりました。</p>
<h3> </h3>
-----
--------
AUTHOR: arakaji-yuu
TITLE: プログラミングの開発効率を上げて速く実装するには
BASENAME: 2018/08/11/124356
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 08/11/2018 12:43:56
-----
BODY:
<p><blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">プログラミングの工程は簡単に分けるとThink、Write、Run、Testのステップがあって、そのサイクルをぐるぐる回している。個人としての開発効率を上げるには単純にそのサイクルの試行回数をへらすか1サイクル自体の速度を上げるかを考える。ここで言う開発効率は決まった機能を実装するまでのことをいう</p>&mdash; UG (@arakaji) <a href="https://twitter.com/arakaji/status/1027702394447060993?ref_src=twsrc%5Etfw">2018年8月9日</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>
<p> </p>
<p><blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">施行回数をへらすには、1回の施行で多くのことをやらないといけない。設計を最初で詳細まで考える。その設計を一気にコード化する。コード化した全体を動かしてテストする。ただそれを実行するには技術の詳細を正しく理解していることと、詳細まで設計し実装できる思考力と集中力が必要。</p>&mdash; UG (@arakaji) <a href="https://twitter.com/arakaji/status/1027703038092275713?ref_src=twsrc%5Etfw">2018年8月9日</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>
<p> </p>
<p><blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">それをうまくやるコツもいくつかある。<br>1. 高機能<a class="keyword" href="http://d.hatena.ne.jp/keyword/IDE">IDE</a>を使うことで単純なミスを減らしたり、補完をする<br>2. 機能を詳細設計まで設計・実装可能なレベルまで分割する<br>3. Testで失敗することも考慮して、はじめから多くのログを吐くようにしておく</p>&mdash; UG (@arakaji) <a href="https://twitter.com/arakaji/status/1027705049005211648?ref_src=twsrc%5Etfw">2018年8月9日</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>
<p> </p>
<p><blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">施行のサイクルを速くするのは、開発環境を整えることや設計の工夫により可能になる。<br>1. ハイスペック端末を使う<br>2. <a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E6%A5%CB%A5%C3%A5%C8%A5%C6%A5%B9%A5%C8">ユニットテスト</a>をできるようにする<br>3. REPLのある言語の場合は実装したプログラムだけをRunして検証する<br>4. UIの場合パラメータを渡すことで画面を再現できるように設計する</p>&mdash; UG (@arakaji) <a href="https://twitter.com/arakaji/status/1027706903919378437?ref_src=twsrc%5Etfw">2018年8月10日</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>
<p> </p>
<p><blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">「UIの場合パラメータを渡すことで画面を再現できるように設計する」は重要で、アプリのテストをするときテストしたい画面に移動し値を入力してやっとテストできるがその手間が大きい。UIも関数型な思想で必要なパラメータを引数で渡すと画面が再現可能にすると、テスト効率が大幅にあがる。</p>&mdash; UG (@arakaji) <a href="https://twitter.com/arakaji/status/1027707638195216385?ref_src=twsrc%5Etfw">2018年8月10日</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>
<p> </p>
<p><blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">実装速度を上げる工夫をまとめたけどこれは「実現したい機能が決まっている状態で速くそれを実装する」という話。僕は誰かが3日かかるものを5時間で実装できるというスキルを上がるのも大事だが、解決<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C9%D4%C7%BD">不能</a>な問題を解決できたり、問題と気づけてないものに問題だと気づける方が価値が高いと思ってる</p>&mdash; UG (@arakaji) <a href="https://twitter.com/arakaji/status/1027709017060044800?ref_src=twsrc%5Etfw">2018年8月10日</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>
<p> </p>
-----
--------
AUTHOR: arakaji-yuu
TITLE: プログラミングの実装スピードを早くするためにはThink、Write、Run、Testの試行回数を減らす工夫が重要
BASENAME: 2018/08/09/175816
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 08/09/2018 17:58:16
-----
BODY:
<p>スタートアップでエンジニアとして働いていてやはり何よりも求められるのは開発スピードです。</p>
<p> </p>
<p>以下に速く価値あるプロダクトを作ってデリバリーするかが永遠の課題で、そのために業界ではDevOpsが重要ということになっていますが、今回するのは組織レベルでの開発スピードや開発効率ではなく、1人のエンジニアが決まった機能を以下に速く実装するかというためにどういう工夫が必要かを考えています。</p>
<p> </p>
<p>一応のいまのところの結論ではタイトルどおり「Think、Write、Run、Testの試行回数を減らす工夫が重要」って言う当たり前のことになり、そのための工夫をここに並べておきます。</p>
<p> </p>
<h4>プログラミングは主に4つの工程をぐるぐる回している</h4>
<p>例えばブログ記事へのいいね機能を作るとします。</p>
<p>そのときに</p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
-----
--------
AUTHOR: arakaji-yuu
TITLE: JavaKuecheリモートもくもく会をして、子育てしながらも学び・コミュニティ活動をやる形のヒントが見えてきた。
BASENAME: 2018/08/04/111902
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 08/04/2018 11:19:02
IMAGE: https://images-fe.ssl-images-amazon.com/images/I/51A0paY-AJL._SL160_.jpg
-----
BODY:
<p>JavaKuecheでほぼ週一木曜日にリモート<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%E2%A4%AF%A4%E2%A4%AF%B2%F1">もくもく会</a>というものをやっています。</p>
<p> </p>
<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%E2%A4%AF%A4%E2%A4%AF%B2%F1">もくもく会</a>というのは、特定の場所に集まってそれぞれが好きなことをもくもく作業して、最後に成果報告をするというような小さいミニ勉強会のようなものです。</p>
<p> </p>
<p>ただJavaKuecheのメンバーはいま県外にいる方がいたり、僕は子供がいるのでなかなか夜外に出づらいということで、その<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%E2%A4%AF%A4%E2%A4%AF%B2%F1">もくもく会</a>をリモートで行っています。</p>
<p> </p>
<p>やり方はというと、appear.inというビデオ<a class="keyword" href="http://d.hatena.ne.jp/keyword/MTG">MTG</a>の<a class="keyword" href="http://d.hatena.ne.jp/keyword/Web%A5%B5%A1%BC%A5%D3%A5%B9">Webサービス</a>を使って参加者をつなぎ、そこで集まって今日やることはじめに宣言し、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%E2%A4%AF%A4%E2%A4%AF%B2%F1">もくもく会</a>の終わりにまた成果報告をするという感じで進めています。</p>
<p> </p>
<p>19:30から行ったのですが、ぼくは19:00から子供のお風呂に入れてご飯を用意し、19:30にイベントが始まると最初の挨拶だけして子供の食事に戻り、19:45からまたオンラインに戻ってもくもくを開始するという風に参加しました。</p>
<p> </p>
<p>このように子供相手をギリギリまでやりながらも勉強会に参加できるのは、リモートでやる最大のメリットです。</p>
<p> </p>
<p>僕は今回、自分が開発しているCollaboというプロジェクト共有サービスがまだ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%DE%A5%DB">スマホ</a>対応していなかったのでそれをこの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%E2%A4%AF%A4%E2%A4%AF%B2%F1">もくもく会</a>で対応しました。</p>
<p>前はPC画面しか用意していなかったのですが、いまは<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%DE%A5%DB">スマホ</a>でも使えるレベルのデザインにできたと思います。</p>
<p> </p>
<p><iframe class="embed-card embed-webcard" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;" title="Collabo" src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.collabo.fun%2F" frameborder="0" scrolling="no"></iframe><cite class="hatena-citation"><a href="https://www.collabo.fun/">www.collabo.fun</a></cite></p>
<p> </p>
<p>僕以外の参加者の方は<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AB%A5%A4%A5%BC%A5%F3">カイゼン</a>ジャーニーという本を読んでいた方がいてその内容をシェアしてもらったり、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Google">Google</a> Colaboratoryを使って統計分析の勉強をしていてその話をシェアしてもらったりしました。</p>
<p>自分がいままで興味をもったことがないことに取り組んでいる人の話を聞いて、情報のインデックスが付けることができるのも、一人でやるのではなく誰かと一緒に<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%E2%A4%AF%A4%E2%A4%AF%B2%F1">もくもく会</a>をするメリットでもあります。</p>
<p> </p>
<div class="freezed">
<div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798153346/hatena-blog-22/"><img class="hatena-asin-detail-image" title="カイゼン・ジャーニー たった1人からはじめて、「越境」するチームをつくるまで" src="https://images-fe.ssl-images-amazon.com/images/I/51A0paY-AJL._SL160_.jpg" alt="カイゼン・ジャーニー たった1人からはじめて、「越境」するチームをつくるまで" /></a>
<div class="hatena-asin-detail-info">
<p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798153346/hatena-blog-22/">カイゼン・ジャーニー たった1人からはじめて、「越境」するチームをつくるまで</a></p>
<ul>
<li><span class="hatena-asin-detail-label">作者:</span> 市谷聡啓,新井剛</li>
<li><span class="hatena-asin-detail-label">出版社/メーカー:</span> <a class="keyword" href="http://d.hatena.ne.jp/keyword/%E6%C6%B1%CB%BC%D2">翔泳社</a></li>
<li><span class="hatena-asin-detail-label">発売日:</span> 2018/02/07</li>
<li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li>
<li><a href="http://d.hatena.ne.jp/asin/4798153346/hatena-blog-22" target="_blank">この商品を含むブログ (2件) を見る</a></li>
</ul>
</div>
<div class="hatena-asin-detail-foot"> </div>
</div>
</div>
<p> </p>
<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Google">Google</a> Colaboratory</p>
<p><a href="https://colab.research.google.com/notebooks/welcome.ipynb">https://colab.research.google.com/notebooks/welcome.ipynb</a></p>
<p> </p>
<p>子供ができて子育てしながらも、エンジニアとしての学びのサイクルを作ったり、コミュニティ活動したりするというのはいまの課題でもあるのですが、「リモート勉強会」というのはその解決策になるとだんだん思えてきたので、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%E2%A4%AF%A4%E2%A4%AF%B2%F1">もくもく会</a>以外でもリモートで参加できる勉強会・コミュニティ活動を自分のためにももっとやっていきたいと思います。</p>
<p> </p>
<p> </p>
-----
--------
AUTHOR: arakaji-yuu
TITLE: 3ヶ月後の未来のために今日の自分を生きてみる
BASENAME: 2018/08/02/091510
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 08/02/2018 09:15:10
-----
BODY:
<p>自分はとても意思が弱い人間で、ほんとはもっと勉強したいしもっとコードを書きたいし子どもや家族のために時間を使いたいしその他のやりたいことがあるのに、昨日はなぜか<a class="keyword" href="http://d.hatena.ne.jp/keyword/%BF%CA%B7%E2%A4%CE%B5%F0%BF%CD">進撃の巨人</a>の漫画を夜11時から一気読みして深夜3時まで起きてしまった。</p>

<p>ほんとにやりたいこと、やるべきことがあるのに、いまの感情・衝動を優先して正しい行動ができていない...</p>

<p>それを解決するために「3ヶ月後の未来のために今日の自分を生きてみる」というのをやってみたいとおもう。</p>

<p>今日の自分の行動は、3ヶ月後の未来のための投資である。</p>

<p>今日の自分がここにあるのは3ヶ月前の自分の行動の結果である。</p>

<p>そう考えると、重要な行動を正しく評価し実行できるような気がしてくる。</p>

<p>3ヶ月という期間は、自分がリアルに想像できる未来の上限がいまのところ3ヶ月が限度だからだ。</p>

<p>IT業界で、かつ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D9%A5%F3%A5%C1%A5%E3%A1%BC%B4%EB%B6%C8">ベンチャー企業</a>、スタートアップ企業にいるという職業柄か、あまりに変化のスピードが早くてそれより先の未来がいまの自分の力だと想像できないからだ。</p>

<p>そしていま、3ヶ月後先の自分がちゃんと楽しめるように<a class="keyword" href="http://d.hatena.ne.jp/keyword/%BF%CA%B7%E2%A4%CE%B5%F0%BF%CD">進撃の巨人</a>の26巻を予約注文してあげた。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4065121833/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/516ew3e3%2BbL._SL160_.jpg" class="hatena-asin-detail-image" alt="進撃の巨人(26) (講談社コミックス)" title="進撃の巨人(26) (講談社コミックス)"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4065121833/hatena-blog-22/">進撃の巨人(26) (講談社コミックス)</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> <a class="keyword" href="http://d.hatena.ne.jp/keyword/%EB%DD%BB%B3%C1%CF">諫山創</a></li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> <a class="keyword" href="http://d.hatena.ne.jp/keyword/%B9%D6%C3%CC%BC%D2">講談社</a></li><li><span class="hatena-asin-detail-label">発売日:</span> 2018/08/09</li><li><span class="hatena-asin-detail-label">メディア:</span> コミック</li><li><a href="http://d.hatena.ne.jp/asin/4065121833/hatena-blog-22" target="_blank">この商品を含むブログ (1件) を見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: 「デザイン思考」のワークショップで学んだユーザーインタビューを実践してみた。
BASENAME: 2018/07/27/091249
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 07/27/2018 09:12:49
-----
BODY:
<p>前回ブログでも書いたんですが、ワークショップで「デザイン思考」について学んだので、そこで重要だと学んだ「ユーザーインタビュー」について実践してみました。</p>

<p>ちなみに前回の記事はこちら。</p>

<p><a href="http://arakaji.hatenablog.com/entry/2018/07/23/105643">Okinawa Dialog&#x306E;&#x30C7;&#x30B6;&#x30A4;&#x30F3;&#x601D;&#x8003;&#x306E;&#x30EF;&#x30FC;&#x30AF;&#x30B7;&#x30E7;&#x30C3;&#x30D7;&#x306B;&#x884C;&#x3063;&#x3066;&#x304D;&#x307E;&#x3057;&#x305F;&#x3002; - &#x3086;&#x30FC;&#x3058;&#x306E;&#x308D;&#x3050;</a></p>

<p>今回は自分が現在開発中のプロジェクト共有サービス「Collabo」について、実際非営利組織で人材育成やイベント運営を行っている方にインタビューさせていただきました。</p>

<p>具体的な質疑応答内容は差し控えますが、Collaboの核である「だれでも見えるオープンな状態プロジェクト管理をおこなう」ということについてはあまり魅了を感じていないことがわかりました。</p>

<p>ユーザーインタビューを通して再認識したのが、そもそもクローズドないまの状態で必要な人にLINEのグループや<a class="keyword" href="http://d.hatena.ne.jp/keyword/Facebook">Facebook</a><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E1%A5%C3%A5%BB%A5%F3%A5%B8%A5%E3%A1%BC">メッセンジャー</a>に入れてその中でコミュニケーションとるということで十分で、それをわざわざオープンにすることで発生するリスクを考慮するとメリットが見えないということでした。</p>

<p>また、やはりフルオープンにすることには大きな問題が発生しうるので、細かな権限管理の重要性に気づきました。</p>

<p>今回のインタビューについてわかったことをまとめると以下のようになります。</p>

<ul>
<li>オープンにするということ自体には少し興味がある。</li>
<li>しかし、デメリットを超えるほどのメリットが見えない(情報統制、既存ツールで事足りている)</li>
<li>オープンにしていいものと、してはいけないものを細かく管理できる権限管理は必須</li>
<li>オープンにしたことによる<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BB%A5%F3%A5%C6%A5%A3%A5%D6">インセンティブ</a>設計が必要</li>
</ul>


<p>特にプロジェクトをオープンにすることによる<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BB%A5%F3%A5%C6%A5%A3%A5%D6">インセンティブ</a>は改めて重要だなと気づきました。</p>

<p>よくCollaboを説明する上で「ソフトウェア開発における<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AA%A1%BC%A5%D7%A5%F3%A5%BD%A1%BC%A5%B9">オープンソース</a>の文化のように、様々なプロジェクトに誰もが参加してコラボレーションを行えるようにする」という風に説明するのですが、ソフトウェア開発においては、そもそもオープンにしないと使ってもらえないだとか、バグ報告だけでなくバグ修正などもオープンにすることで得られるなどの、オープンにする<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BB%A5%F3%A5%C6%A5%A3%A5%D6">インセンティブ</a>がすでに設計されていることに気づきました。</p>

<p>Collaboで運営されるプロジェクトにおいても、そこで運営することによる明確な<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BB%A5%F3%A5%C6%A5%A3%A5%D6">インセンティブ</a>を意図的に設計して組み込んでいかないといけないので、これは当初思い描いていたよりも難しい課題だなと再認識しました。</p>

<p>Collaboにおける課題は「既存ソフトウェアを超える利便性」、「オープンとクローズドを簡潔にコン<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A5%ED%A1%BC%A5%EB">トロール</a>可能にする」、「オープンにプロジェクトを行う<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BB%A5%F3%A5%C6%A5%A3%A5%D6">インセンティブ</a>設計(<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D6%A5%ED%A5%C3%A5%AF%A5%C1%A5%A7%A1%BC%A5%F3">ブロックチェーン</a>・<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%AF">トーク</a>ンエコノミーを取り入れる？)」ということが、今回のユーザーインタビューで見えてきたので、やはりやってみてよかったと思います。
今後のプロジェクトにおいてもデザイン思考を取り入れた<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B3%AB%C8%AF%A5%D7%A5%ED%A5%BB%A5%B9">開発プロセス</a>をどんどん回していきたいとおもいます。</p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: Okinawa Dialogのデザイン思考のワークショップに行ってきました。
BASENAME: 2018/07/23/105643
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 07/23/2018 10:56:43
-----
BODY:
<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Facebook">Facebook</a>フィードにデザイン思考に関するイベントがあることを知り、興味があるにはしていたが実際申し込んではいなかったんですが、朝起きて台風の暴風域を抜けたということを知り、せっかくなので行ってみるか！と当日に申し込みして参加しました。</p>

<p><a href="https://www.facebook.com/events/2041796319404525/">&#x30C7;&#x30B6;&#x30A4;&#x30F3;&#x601D;&#x8003; &#x301C;&#x30E6;&#x30FC;&#x30B6;&#x30FC;&#x4E2D;&#x5FC3;&#x306E;&#x30D7;&#x30ED;&#x30C0;&#x30AF;&#x30C8;&#x958B;&#x767A;&#x301C;</a></p>

<p>サンフランシスコにて大企業や企業家向けにユーザー中心のものづくりやピッチ指導をしているという我<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C6%E1%C7%C6">那覇</a>若菜さんが講師となり、そもそもデザインってなんだっけ？デザイン思考っていうのはどういうこと？デザイン思考を用いてものづくりや改善プロセスのやり方について学びました。</p>

<h1>デザインとは？</h1>

<p>デザインとは「目的のための計画そのもの。常にヒトが中心にあり、誰かの生活を豊かにしようとする」というもの。</p>

<p>あとデザインには４つのレイヤーがある。
-  グラフィクデザイン
- インダストリアルデザイン
- インタラクションデザイン
- エンバイラメンタルデザイン</p>

<p>Web制作の現場にあるデザイナーとかだと<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B0%A5%E9%A5%D5%A5%A3%A5%C3%A5%AF%A5%C7%A5%B6%A5%A4%A5%F3">グラフィックデザイン</a>をやっているヒトが多いと思うけど、それはデザインの一部で、問題を解決するためにその問題が発生しうる環境自体をデザインするっていうのもデザイナーの領域らしい。</p>

<p>超一流デザイナーは、かなり広範囲な知識とスキルが求められるな。</p>

<h1>デザイン思考とは？</h1>

<p>デザイン思考とはなにか？という話でもちろん問題解決するためのプロセスは教えてもらったが、まず<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%F3%A5%C9%A5%BB%A5%C3%A5%C8">マインドセット</a>を変えることが何より重要ということに言っていました。</p>

<h2>まず「共感」する</h2>

<p>まず、ユーザーに「共感」し、相手の話を聞きながら、そのヒトがどのようになぜ行動するのか？ニーズはなんなのか？などの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B5%A5%A4%A5%C8">インサイト</a>を得ます。</p>

<p>このとき、「同情」ではなく「共感」するように、と強調していて、同情は「かわいそう〜」と相手の気持ちを推測して終わるが、共感は「悲しかったね〜」とホントに相手の気持ちに成るような違いがあるそうです。</p>

<h2>問題定義</h2>

<p>そのヒトに共感して<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B5%A5%A4%A5%C8">インサイト</a>を得たら、次は本質的に何が問題なのかを見つけ出す「問題定義」を行います。</p>

<h2>アイディア出し</h2>

<p>「問題定義」された問題に対しての解決策をともかく質より量でどんどん出していきます。
そのときのコツとして、否定しない、実現性を考えずぶっ飛んだ発想をする、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DD%A5%B9%A5%C8%A5%A4%A5%C3%A5%C8">ポストイット</a>に書き出して視覚化する、アイディアは文字だけでなく絵でも書くなどがありました。</p>

<h2>プロトタイプ化</h2>

<p>アイディア出しで挙げられたものから選定して、プロトタイプを制作します。
このプロトタイプは出来るだけ低コストでかつすばやく作れるものにすることにより、様々な可能性を試せ、かつ時間と経費の節約になるそうです。</p>

<h2>テスト</h2>

<p>試作したプロトタイプについて、実際のユーザーにユーザーテストをしてフィードバックを得ます。このプロセスによって、そもそもの問題定義が間違っていないか、また解決法としているアイディアが間違っていないかなどを検証できます。
もし、方向性があっていればもう少しプロトタイプの精度を上げていく。
アイディアが間違っていれば違うアイディアでプロトタイプをしてユーザーテストする。
問題定義が間違っていればそこからやり直すというふうにプロセスを何度も行き来しながら、製品開発・問題解決を進めていきます。</p>

<h1>ワークショップについて</h1>

<p>デザイン思考の概要を学んだあと、次は実際にデザイン思考のプロセスを実践してみるワークショップを行いました。</p>

<p>お題は「飛行機で旅行に行く体験をリデザインする」というもので、飛行機の予約をするところから目的地に到着して旅行するまでのプロセスなかの問題点を見つけ出して、問題解決のアイディアを出していこうというものでした。</p>

<p>やり方としてはまず二人一組のペアになり、ユーザーインタビューをしながら飛行機での旅行体験に関わる不満の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B5%A5%A4%A5%C8">インサイト</a>を得ます。その後得られた<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B5%A5%A4%A5%C8">インサイト</a>から問題定義を行い、アイディア出しをしてその時点で相手にそのアイディアをぶつけてフィードバックを得ます。
そのフィードバックからアイディアを一つにしぼり、そのアイディアのプロトタイプとして<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DD%A5%B9%A5%C8%A5%A4%A5%C3%A5%C8">ポストイット</a>に絵や説明を書いて、相手にまた説明し、フィードバックを得るというのを繰り返すというものでした。
すべてのプロセスが終わったあとにいくつかのグループが自分たちのアイディアを発表し、我<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C6%E1%C7%C6">那覇</a>さんがそれに対してフィードバックを行いました。</p>

<p>僕がパートナーの方にインタビューしたとき、最初は「荷物が多くてキャリーバックを持って移動するのが大変で、コインロッカーを使うのだがそれを見つけるのも取りに行くのも大変」という話を聞き、最初はコインロッカーを増やすとか探しやすくという方向性で考えていました。
パートナーの方は女性だったのですが、よくよく問題を深掘りすると「多くなる荷物のもとは、洋服と化粧品」、「化粧品はとくにいつも自分が使っている物を使いたいけど旅行サイズの小さいものはないから、大きいサイズのものを全部持っていく必要がある」など他の問題があることが発見できました。</p>

<p>その<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B5%A5%A4%A5%C8">インサイト</a>から問題定義を「旅行時にもっていかないといけない荷物が多いこと」という定義にして、解決策として「服と化粧品のインスタントレンタルアプリ」というものにしました。</p>

<p>それは、旅行先のホテルで使いたい服と化粧品をアプリで選び、ホテルの住所を入力すると、数時間以内にその服と化粧品を届けてくれて旅行期間中レンタルできるというものです。これによって、旅行期間中に持たないといけない荷物の中から服と化粧品をなくせるというサービスです。</p>

<p>このアイディアをパートナーにプレゼンしてフィードバックを得たのが、「化粧品はレンタルだといやなので使い切りにしてほしい」というものだったので、次のプロトタイプのブラッシュアップのタイミングでは化粧品は滞在日数分を小分け使い切りパックにして提供するという風に改善できました。</p>

<h1>これからの自分の活動にどう活かすか？</h1>

<p>いま働いているPaykeのプロダクト開発にも活かしていきたいと思いますし、特に今自分でもプロジェクト共有サービスの<a href="http://www.collabo.fun">Collabo</a>というサービスを開発しているので、それにはすぐに活用出来ると思います。</p>

<p>これを作るときに想定していたユーザーがいるので、実際にいまのプレビュー版を見てもらいその後のアップデートをどうしていくかを説明した上で、実際に使いたいと思うかどうか、フィードバックを得るためにユーザーインタビューをまずしていきたいと思います。</p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: 付箋
BASENAME: 2018/07/14/205954
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 07/14/2018 20:59:54
-----
BODY:
<p>僕の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DE%A1%BC">プログラマー</a>としての師匠と思っている前職の上司と久しぶりに飲む機会があったのですが、そこでこんなものをもらいました。</p>
<p> </p>
<p> </p>
<p><img class="hatena-fotolife" title="f:id:arakaji-yuu:20180714205051j:image" src="https://cdn-ak.f.st-hatena.com/images/fotolife/a/arakaji-yuu/20180714/20180714205051.jpg" alt="f:id:arakaji-yuu:20180714205051j:image" /></p>
<p> </p>
<p>これが何かというと3-4年前にチームでやりたいことを付箋に貼って共有するということをやっていて、それをずっと持っていてくれてこの機会に渡してくれました。</p>
<p> </p>
<p>3-4年前から考えていたこのサービス、忙しいことを言い訳にして全然開発出来なかったのですが、今年の5月ごろに一念発起して開発スタートしてやっとプレビュー版を公開するところまではこれました。</p>
<p> </p>
<p>プレビュー版を解除するのに必要な開発リストも決まってきたのでさらに本腰入れて進めていきます。</p>
<p> </p>
<p>あと昔の自分、スペル間違ってるぞ。</p>
-----
--------
AUTHOR: arakaji-yuu
TITLE: Collaboという個人プロダクトを公開して1週間たちました。
BASENAME: 2018/07/06/093543
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 07/06/2018 09:35:43
-----
BODY:
<p>いま個人プロダクトとしてCollaboという<a class="keyword" href="http://d.hatena.ne.jp/keyword/Web%A5%B5%A1%BC%A5%D3%A5%B9">Webサービス</a>を開発していて、プレビュー版として6月28日に公開しました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.collabo.fun%2F" title="Collabo" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.collabo.fun/">www.collabo.fun</a></cite></p>

<h1>Collaboとは？</h1>

<p>このサービスを一言で表すと「プロジェクト共有サービス」です。</p>

<p>自分のプロジェクトを立ち上げ、そのビジョンを共有し、イシュー(課題)を共有して、オープンな場でコミュニケーションを取りながらプロジェクトを進めていけるサービスです。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DE%A1%BC">プログラマー</a>のコミュニティでは「<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AA%A1%BC%A5%D7%A5%F3%A5%BD%A1%BC%A5%B9">オープンソース</a>」という文化があって、ソフトウェアの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9">ソースコード</a>をオープンに共有することで誰でもその開発プロジェクトに参加でき、それによって様々なソフトウェアが生まれ進化し、現代のテク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%CE%A5%ED">ノロ</a><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B8%A1%BC">ジー</a>を支えています。</p>

<p>僕が持っていた仮説は、「<a class="keyword" href="http://d.hatena.ne.jp/keyword/OSS">OSS</a>のように個人や団体、企業が持っているプロジェクト自体をオープンにすることでより多くの多様なプロジェクトが生まれ、そこから多くの成功するプロジェクトも増えるのではないか？」というものです。</p>

<p>その仮説を証明するためにこのプロダクトを公開し、現在も開発しています。</p>

<h1>1週間たった現状報告</h1>

<p>プレビュー版を公開して1週間たった現状はこんな感じです。</p>

<p>ユーザー数: 8
プロジェクト数: 3
コメント数: 15</p>

<p>正直現状はサー<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D3%A5%B9%A5%B3">ビスコ</a>ンセプト自体への興味というより、顔見知りが僕の作ったものに興味があって見てもらっている状態ですw</p>

<p>また、「ログインできない！！」という致命的なバグも報告されました^^;</p>

<p>現状復旧したのですが、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%CF%A5%C3%A5%AB%A1%BC">ハッカー</a>ズチャンプルーのある日までには公開したいということでデバック足りない状態で「エイヤ！」でリリースしたので、案の定根本的な問題を見過ごしていました。。。反省です>&lt;</p>

<h1>今後の動きについて</h1>

<p>長期的にあーしたい、こーしたいというのはたくさんあるのですが、現在は仕事しながらのサイドプロジェクトですのでそこまでリソースは費やせません。</p>

<p>なので以下の1点だけを基本方針と定めて進めていきます。</p>

<ul>
<li>KPIであるコメント数の成長率(既存コメント数対する新規のコメント数の割合)を毎週1%超えることを目指して意思決定・行動する</li>
</ul>


<p>KPIとしてユーザー数やプロジェクト数ではなく、コメント数を定めた理由は、それがもっとも既存ユーザーの利用頻度の多い機能のためです。</p>

<p>ユーザー数やプロジェクト数は、その気になれば広告を回したり<a class="keyword" href="http://d.hatena.ne.jp/keyword/SNS">SNS</a>でバズらせることで一時的に増やすことは可能ですが、コメント数は実際にサービスが意図どおりに利用されていないと増えない数字なのでこちらをKPIに設定しました。</p>

<p>ちなみに今日時点のコメント数が15のため、来週までに一つでも新規のコメントがあれば6%の成長率という大幅に目標を超過して達成です！やったね！！</p>

<h1>7月中に実装予定の機能</h1>

<p>とりあえず以下の機能・改修を優先して開発する予定です。</p>

<ul>
<li>プロジェクトに更新(Issueの追加、コメントなど)があったときの通知機能(メール、Slack連携)</li>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%DE%A5%DB">スマホ</a>対応のデザイン</li>
<li>ノート機能(Issueは課題を共有してコミュニケーションする機能だが、ノートはプロジェクトに関連する情報などを書いてためておき、あとから見直すためのストック情報のための機能)</li>
</ul>


<p>もしこういう修正がしてほしい、こんな機能がほしい、Collaboを使ってもらうためにこういう施策をうったらどうだ？ など思いつきましたら、CollaboのIssueに投稿していただけると<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B4%BF%B4%EE">歓喜</a>して対応しますのでよろしくお願いしますm(_ _ ;)m</p>

<p><a href="https://www.collabo.fun/projects/1?tab=issues">https://www.collabo.fun/projects/1?tab=issues</a></p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: ハッカーズチャンプルー2018という最高のカンファレンスの運営として参加しました！
BASENAME: 2018/07/03/092107
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 07/03/2018 09:21:07
-----
BODY:
<p>2018年6月30日(土)に<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%CF%A5%C3%A5%AB%A1%BC">ハッカー</a>ズチャンプルー2018が行われ、今回私は運営として参加させていただきました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fhackers-champloo.org%2F2018%2Fprogram.html" title="カンファレンスの部 プログラム – Hackers Champloo" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://hackers-champloo.org/2018/program.html">hackers-champloo.org</a></cite></p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%CF%A5%C3%A5%AB%A1%BC">ハッカー</a>ズチャンプルーは僕は2014年の回から参加者として毎年参加させてもらっており、毎回毎回勉強になるとともに楽しく参加しておりました。</p>

<p>前回の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%CF%A5%C3%A5%AB%A1%BC">ハッカー</a>ズチャンプルー2017のときのクロージングで「<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%CF%A5%C3%A5%AB%A1%BC">ハッカー</a>ズチャンプルー継続の危機」という、運営のコ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%E1%A5%F3%A5%D0%A1%BC">アメンバー</a>が忙しくなってなかなか稼働できすに大変だった、次回も開催できるかわからないという話を聞き、その後の懇親会に参加したときにその運営メンバーの一人から「来年はお前もやるんだよw」と言われてその年の運営Tシャツをもらったことで、大好きな<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%CF%A5%C3%A5%AB%A1%BC">ハッカー</a>ズチャンプルーを今度は運営していく側に入っていかないと！という思いで今回は運営として参加しました。</p>

<h1>運営として参加する<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%CF%A5%C3%A5%AB%A1%BC">ハッカー</a>ズチャンプルーが一番楽しかった！</h1>

<p>今回の運営は学生メンバーが多く入って大活躍してくれたおかげもあり、僕は正直そこまで動けていなかったのですが唯一できた仕事は登壇者の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%B5%A5%A4">アサイ</a>ンでした。</p>

<p>登壇者をだれにするかっていうのは完全に運営メンバーが「話を聞きたい！！」という人を呼べるので、僕は以前から好きな言語Clojureを実際にプロダクションで使っていてかつオンライン上でアウトプットしている あやぴーさん の話を聞きたいということで今回登壇をお願いしました。</p>

<p>今回あやぴーさんの<a class="keyword" href="http://d.hatena.ne.jp/keyword/Clojure">Clojure</a>の話を聞け、前夜祭・後夜祭で交流できただけで僕としては最高の体験だったのですが、その後他のゲストの方とお話したときに「<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%CF%A5%C3%A5%AB%A1%BC">ハッカー</a>ズチャンプルーはすごかった！デザインの話、関数型・<a class="keyword" href="http://d.hatena.ne.jp/keyword/Lisp">Lisp</a>系言語の話、Goによるゲームの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D9%A5%F3%A5%C1%A5%DE%A1%BC%A5%AF">ベンチマーク</a>の話、Vtuberの話、エンジニアとしてのキャリアのエモい話など、こんなに多様で質の高い話を聞ける機会はなかなかない！」と褒めていただきました！</p>

<p>今回運営メンバーは県内のいろんなコミュニティの方が参加して、それぞれが俺得のゲストを呼べたことでまさに「チャンプルー」なカンファレンスが実現した最高に面白いカンファレンスになったと思います！</p>

<p>ほんとうによかった！！！</p>

<h1>来年はLTと運営を！</h1>

<p>今回の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%CF%A5%C3%A5%AB%A1%BC">ハッカー</a>ズチャンプルーで心残りはいくつかネタは仕込んでいたのに登壇できなかったことで、そこもできるときっともっと楽しめると思うので来年は運営とLTを両方やっていきたいと思います！</p>

<p>また来年もよろしくお願いしますー！</p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: これからはマンパワーで解決する戦略を取った時点で負けパターンになるんだろうな〜
BASENAME: 2018/04/07/070143
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 04/07/2018 07:01:43
-----
BODY:
<p>日本は人口のボーナス期が終わって人口現象は進んでいるし、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B9%E2%CE%F0">高齢</a>化も進んでいる。</p>

<p>いままでは経済成長の夢もあったから、労働時間を残業によって増やすことや労働人数を増やすことで解決できた問題も多かったと思うけど、これからはそうはいかないんだろうな。</p>

<p>いろんな課題や問題、またやりたいことがあるときに<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DE%A5%F3%A5%D1%A5%EF%A1%BC">マンパワー</a>(人手を増やす、残業によって労働時間を増やす)で解決する方法を取った時点で、そもそもその<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DE%A5%F3%A5%D1%A5%EF%A1%BC">マンパワー</a>が確保出来なかったり、確保したとしても一時的なモノだったりして負けるパターンになっていくんだろう。</p>

<p>やることをより価値が高いものに絞る、やり方も自動化・仕組み化を行い効率的に行う、少ない労力で価値を大きく増やせるように<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EC%A5%D0%A5%EC%A5%C3%A5%B8">レバレッジ</a>をかけるなど、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DE%A5%F3%A5%D1%A5%EF%A1%BC">マンパワー</a>に頼るよりもより高度な戦略が必要になるので、それが出来るように日々仕事をしていきたい。</p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: 2023年までに沖縄に100億円規模のテクノロジースタートアップ経済圏を作る
BASENAME: 2018/02/19/023411
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 02/19/2018 01:34:30
-----
BODY:
<p>いまは2018年2月19日、これから約5年間かけて僕が達成したいビジョンがこれです。</p>

<p>「2023年までに沖縄に100億円規模のテクノロジースタートアップ経済圏を作る」</p>

<p>まだ何者でもなく大した実績もない僕がこのようなビジョンをインターネットの海に晒すのは少し抵抗あるのですが、今の世の中は実力や実績がある人ではなくビジョンのある人に人もお金も集まるということがここ最近わかってきたので、ちょっとだけバカになってビジョンを語ってみたいと思います。</p>

<h1>なぜこのビジョンを達成したいのか</h1>

<p>達成したい理屈は色々あります。沖縄の基地/観光依存の経済をなんとかしたい、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DE%A1%BC">プログラマー</a>などの<a class="keyword" href="http://d.hatena.ne.jp/keyword/IT%B5%BB%BD%D1">IT技術</a>者の低賃金の問題を解決したい、沖縄から優秀な人材が東京などの都市に流出するのを減らしたいなど、綺麗事は多々あるのですが、やっぱり一番の理由は単純です。</p>

<p>「僕自身が、沖縄で働くのが面白いと思えるような環境を作るため！」</p>

<p>沖縄は気候はいいし、僕自身は生まれも育ちも沖縄なので家族がいて、そして結婚して子どももいるのでたぶん結構な確率で沖縄でこれからも過ごすと思います。</p>

<p>ただ沖縄生活するのにはいいですが働くとなると、個人的にはあんまりおもしろくない。</p>

<p>やっぱり<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DE%A1%BC">プログラマー</a>として働くからには、世の中を大きくUPDATEするような価値あるサービスを生み出したい、そしてそこそこお金持ちになりたいという欲があるんですが、やっぱりそういう仕事が生まれるのは東京がメインでついで京都や福岡などが多く、沖縄ではかなり少ないです。</p>

<p>最近は僕の所属している会社も含め、そのような大きなチャレンジが出来る会社もちょこちょこ生まれ初めているのですが、まだまだ足りません。</p>

<p>沖縄には優秀なエンジニアやそれを育むコミュニティが、他の地方に比べてある方だと思っています。
他の地方の方や東京でエンジニアコミュニティを見て回っている人などから聞いてもそう答えてくれたので多分合っているはず。</p>

<p>ただそこで育まれた技術が発揮出来るような現場や評価して払える賃金テーブルが用意されていないため、高い技術力を持つ尖った人材が沖縄から出ていくか、もしくは<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EA%A1%BC%A5%E9%A5%F3%A5%B9">フリーランス</a>として独立して分散してしまい、個人としては強いが集団として大きな価値が生み出せないという問題があると思います。</p>

<p>分散してしまった優秀な人材を集結させて有力な魅力あるスタートアップを数多く生み出す、そのスタートアップに魅力を感じた県外の優秀な人材が沖縄に集まってくる、そしてその方々があらたなスタートアップを生み出す、そうすると魅力ある多様なスタートアップ企業、多様な人材があつまり、僕自身が沖縄で働くことがよりたのしくなるという目論見です。</p>

<h1>どのように達成するのか</h1>

<p>「100億円規模のテクノロジースタートアップ経済圏」とあるように、1社の大きなスタートアップを生み出すのではなく、数社または数十社のスタートアップを同時多発的に生み出さないといけない。これらすべてを僕が創業者やるなんて完全に無理ゲーなので仕組みがいる。</p>

<p>そこで知ったのが「STARTUP STUDIO」という仕組みだ。</p>

<p>「STARTUP STUDIO」とはスタートアップに必要な様々な機能(BizDev、デザイン、開発、マーケッター、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%A1%A5%A4%A5%CA%A5%F3%A5%B9">ファイナンス</a>、etc...)に必要な人材を内製で抱え込み、そのリソースを使って数多くのスタートアップを生み出す組織のことです。</p>

<p>そのスタートアップが軌道にのれば分社化し独立して成長を目指し、もし失敗したら撤退するがそのメンバーはSTARTUP STUDIOに戻り、ノウハウは蓄積したままあらたなスタートアップに挑戦するという仕組みになっています。</p>

<p>この仕組みを作れば数多くのスタートアップを生み出しながら失敗から学んだことを次のスタートアップに活かして成功確率を上げるということが可能になるため、僕のビジョンにぴったりな手段といえます。</p>

<p>しかし、この「STARTUP STUDIO」を作る僕自身がスタートアップの成功経験がないのに他のスタートアップを生み出すことは出来ません。</p>

<p>なので、僕は今年は現職のスタートアップで成功するためのプロダクトを開発を見を持って学びつつ、その後は自分のスタートアップを作るためのプロダクト開発にも取組ます。</p>

<h1></h1>

-----
--------
AUTHOR: arakaji-yuu
TITLE: 目標設定の期待値を一致させるの大事(WANTかMUSTか)
BASENAME: 2018/02/06/100023
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 02/06/2018 10:00:23
-----
BODY:

-----
--------
AUTHOR: arakaji-yuu
TITLE: 自分が知らないということがプロダクトの価値を上げられないリスクとなる
BASENAME: 2018/02/05/032443
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 02/05/2018 03:24:43
-----
BODY:
<p>うちの会社の役員と情報収集についての話になったときに、「自分が何かを知らないということは、それによって会社が成長出来ないというリスクになると気づいて、めちゃくちゃ意識して情報収集するようになった」という話を聞いたのを思い出した。</p>

<p>その時も思ったけどそれはプロダクトを作っているエンジニアには特に言えることで、自分が新しい技術を知らないことでプロダクトの価値を上げられないというのはかなりもったいない。</p>

<p>良いプロダクトを届けるためには、日々勉強が必要です。</p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: 「Java One 2017 報告会 In Okinawa」が今年も無事開催できました。ご協力して頂いた皆様ありがとうございます！
BASENAME: 2018/01/22/000752
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 01/22/2018 00:07:52
-----
BODY:
<p>2018年1月20日(土)、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Java">Java</a> Kücheで毎年行っている「<a class="keyword" href="http://d.hatena.ne.jp/keyword/Java">Java</a> One 報告会 in Okinawa」の2017年版を行いました。</p>

<p>このイベントは、毎年サンフランシスコで行われる<a class="keyword" href="http://d.hatena.ne.jp/keyword/Java">Java</a>の世界的なイベントである「<a class="keyword" href="http://d.hatena.ne.jp/keyword/Java">Java</a> One」に参加した方々をお招きして、最新の<a class="keyword" href="http://d.hatena.ne.jp/keyword/Java">Java</a>に関する情報をキャッチアップする場として開催しております。</p>

<p>県外のゲストとして今年は4人の豪華メンバーに来ていただきました。</p>

<ul>
<li>伊藤 敬(@itakash)さん <a class="keyword" href="http://d.hatena.ne.jp/keyword/%C6%FC%CB%DC%A5%AA%A5%E9%A5%AF%A5%EB">日本オラクル</a>株式会社</li>
<li>寺田 佳央(@yoshioterada)さん 日本<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%AF%A5%ED%A5%BD%A5%D5%A5%C8">マイクロソフト</a> テクニカル<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%D0%A5%F3%A5%B8%A5%A7%A5%EA%A5%B9%A5%C8">エバンジェリスト</a></li>
<li>山本 裕介(@yusuke)さん Samuraism Inc. <a class="keyword" href="http://d.hatena.ne.jp/keyword/%C2%E5%C9%BD%BC%E8%C4%F9%CC%F2">代表取締役</a></li>
<li>きしだ なおき(@kis)さん LINE Fukuoka株式会社</li>
</ul>


<p>うん、今振り返ってもやっぱりすごい<a class="keyword" href="http://d.hatena.ne.jp/keyword/Java">Java</a>スターばかりです^^;</p>

<p>会場は去年と同じ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B2%AD%C6%EC%B2%CA%B3%D8%B5%BB%BD%D1%C2%E7%B3%D8%B1%A1%C2%E7%B3%D8">沖縄科学技術大学院大学</a>で行いました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/a/arakaji-yuu/20180121/20180121233104.jpg" alt="f:id:arakaji-yuu:20180121233104j:plain" title="f:id:arakaji-yuu:20180121233104j:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/a/arakaji-yuu/20180121/20180121232903.jpg" alt="f:id:arakaji-yuu:20180121232903j:plain" title="f:id:arakaji-yuu:20180121232903j:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/a/arakaji-yuu/20180121/20180121232928.jpg" alt="f:id:arakaji-yuu:20180121232928j:plain" title="f:id:arakaji-yuu:20180121232928j:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>今年から<a class="keyword" href="http://d.hatena.ne.jp/keyword/Java">Java</a> Kücheの会長業を引き継ぎましたので、今回のイベントでは僕が司会／進行を行いました。</p>

<p>あんまり司会などやる機会もないので、かなり緊張してだいぶカミカミではあったのですが、大きなトラブルなく(小さなトラブルはいくつもありましたがｗ)なんとかイベントを終えることができました>&lt;</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/a/arakaji-yuu/20180121/20180121233658.jpg" alt="f:id:arakaji-yuu:20180121233658j:plain" title="f:id:arakaji-yuu:20180121233658j:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%BE%E5%B5%AD">上記</a>で述べた県外ゲストの方以外にも県内のクオリサイトテクノロジーズさんのエンジニアの方々にも講演していただいたのですが、僕が今回印象に残った話は<a class="keyword" href="http://d.hatena.ne.jp/keyword/JDK">JDK</a>のリリースサイクルの変更についてです。</p>

<p>いままでの<a class="keyword" href="http://d.hatena.ne.jp/keyword/JDK">JDK</a>のリリースサイクルは2年毎にひとつのメジャーバージョンを上げるという方針(しかし機能開発が遅れて結局伸びる)だったのですが、今回からは6ヶ月毎のメジャーアップデート、しかもその間にできた機能のみをふくめてリリースされるという方針(基本的にアップデートが遅れることは発生しない)ということでした。</p>

<p>僕のいままでのイメージだと<a class="keyword" href="http://d.hatena.ne.jp/keyword/Java">Java</a>はお堅い言語で言語の進化も遅いというイメージだったのですが、今後は進化のスピードが加速していくと期待でき楽しみな反面、そのリリースサイクルでバージョン毎の互換性をどの程度維持するのかなどは少し心配になりました。</p>

<p>イベントの運営の立場として、今回大変ありがたく感じたのは参加者の出席率です。
なんと、83名の申し込み者のうち参加者が75名という90%近い出席率でした！！！</p>

<p>勉強会などのイベントを運営するときに一番困るのが出席率が低くなってしまう問題で大体70~80%も来てくれると良い数字になるのですが、90%もの出席率はかなり素晴らしい数字です。それだけ参加者の方々に期待して頂いているイベントだと感じ、来年以降の開催にも大きな励みになりました！</p>

<p>今回のイベントに登壇してくださった皆様、参加してくださった皆様、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Java">Java</a> Kücheの活動を応援してくださるスポンサー企業の皆様、会場提供してくださった<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B2%AD%C6%EC%B2%CA%B3%D8%B5%BB%BD%D1%C2%E7%B3%D8%B1%A1%C2%E7%B3%D8">沖縄科学技術大学院大学</a>さん、そしてこのイベントの企画／運営において全面協力してくださっているクオリサイトテクノロジーズさんのおかげで今年も無事JavaOne報告会 In Okinawaを開催することが出来ました。誠にありがとうございます！</p>

<p>また次回も、沖縄の<a class="keyword" href="http://d.hatena.ne.jp/keyword/Java">Java</a>コミュニティの一大イベントとしてJavaOne 2018 報告会を開催できるように努力いたしますので、そのときはまたご協力よろしくお願いいたします！</p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: JAZUG沖縄のCognitive Servicesハンズオンに参加しました。
BASENAME: 2017/12/03/075605
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 12/03/2017 07:56:05
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/a/arakaji-yuu/20171203/20171203074649.png
-----
BODY:
<p>2017年12月3日に<a href="http://www.gbic.jp/incubate/">Gwave Incubate</a>で行われた、<a href="https://jazug-okinawa.connpass.com/event/71378/">Cognitive Servicesのハンズオン</a>に参加してきました。</p>

<p>講師として<a class="keyword" href="http://d.hatena.ne.jp/keyword/Microsoft">Microsoft</a>の大森彩子さんがきていただき、まず最初にCognitiveServiceとは何ぞや？という軽い説明があり、その後はハンズオンで参考にする手順書の通りにツールの説明をして頂いてすぐハンズオンに入りましたが、今回ありがたかったのは、ハンズオンの資料を<a class="keyword" href="http://d.hatena.ne.jp/keyword/C%23">C#</a>版とnodejs版の2パターン用意していただいていたことで、そのおかげで<a class="keyword" href="http://d.hatena.ne.jp/keyword/C%23">C#</a>書いたことのない僕でも参加することができました^^</p>

<p>ハンズオンの内容はAzureの<a href="https://customvision.ai/">customvision.ai</a>を使って写真から食べ物を判定するモデルを作り、それを<a href="https://dev.botframework.com/">Bot Framework</a>から使って画像をチャットに上げるとその食べ物がなにか判定する<a class="keyword" href="http://d.hatena.ne.jp/keyword/bot">bot</a>を作るということをまずやってみて、そのあとに自分のアイディアをもとにオリジナルの<a class="keyword" href="http://d.hatena.ne.jp/keyword/bot">bot</a>を作ってみるという内容でした。</p>

<p>ハンズオンの最後の方では参加者が作ったオリジナルボットの発表が行われ、インスタジェニックな写真を判定するボットや犬に関するクイズの答えを写真で投稿して正解かどうか判定するボット、他には<a href="http://ajitoya.net/">あじとや</a>というカレー屋さんのカレーを見分けるボットなどいろんなおもしろいボットが発表されました。</p>

<p>ちなみにぼくは、人の画像をアップしてもらってその写真が自分の子だった場合だけ大絶賛してくれるという「親バカ<a class="keyword" href="http://d.hatena.ne.jp/keyword/Bot">Bot</a>」を作りました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/a/arakaji-yuu/20171203/20171203074635.png" alt="f:id:arakaji-yuu:20171203074635p:plain" title="f:id:arakaji-yuu:20171203074635p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/a/arakaji-yuu/20171203/20171203074649.png" alt="f:id:arakaji-yuu:20171203074649p:plain" title="f:id:arakaji-yuu:20171203074649p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>ハンズオンが終わり懇親会で他の参加者ともたくさん話したんですが、「勉強会に参加するときに話聞くだけだと懇親会行かないとなかなか他の参加者や講師と交流する機会がないけど、ハンズオンはそれだけでも面白いしハンズオンしながら他の参加者や講師に相談したりしながら交流できるので楽しい」というのを良く聞きました。</p>

<p>話を聞くのもいいけど、やっぱり自分でコードを書きながら、みんなでワイワイやるのは楽しいよなー^^</p>

<p>今回企画してくれたJAZUG沖縄と講師してくださった大森さん、会場提供してくれた<a href="https://www.ryukyu-i.co.jp/">琉球インタラクティブ</a>さんには感謝です！
ありがとうございました！！</p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: 情報共有の価値観の違いとマネジメント手法の違いはリンクする
BASENAME: 2017/11/12/201818
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 11/12/2017 20:18:18
-----
BODY:
<p>組織内での情報共有をどのレベルでするのかは、どのような組織でありたいか、そしてどのようなマネジメント手法を良しとするのかにリンクするな〜と最近考えていたのでそのまとめです。</p>

<h1>オープンな情報共有とマクロマネジメント</h1>

<p>会社のメンバーがそれぞれ目標達成するための方法を自分で考えて実行できる組織にしたいとする。</p>

<p>そのためにはオープンな情報共有の文化が必要。</p>

<p>なぜなら、手に入る情報が部署や役職によって差がある場合、その情報が手に入らない人は正しい判断ができないからだ。</p>

<p>逆にいうと、オープンな情報共有の文化を作れば、マネジメントは会社全体の方向性を示すこととなり、それを達成する方法は各々のチーム、個人が考えて行動していくことなる。</p>

<p>個人が考えて行動するためマネージャーの思った通りに行かないこともある。ただその個人に裁量があるため、意思決定のスピード、実行のスピードも速くなり、マネージャーの技量を超えた成果を出せることもできるだろう。</p>

<h1>クローズドな情報共有とマイクロマネジメント</h1>

<p>逆にタスクや戦略などはすべてマネージャー層が決めて、それを無駄なく早く実行できる組織にしたいとする。</p>

<p>その場合はオープンな情報共有の文化は必要なく、タスクの共有や進捗の共有のみでよくなる。</p>

<p>なぜなら、あらゆることをドキュメントに残して共有するのは手間がかかるし、すべての情報に誰もがアクセスできるようになると皆が意思決定に参加可能になるため考える時間が発生する。そうすると実行することに迷いや混乱が生まれる可能性があるからだ。</p>

<p>組織全体の情報を把握しているのがマネージャー層のみになるため正しい判断ができるのはマネージャーということになり、他のメンバーはその判断の実行のみ集中することができる。</p>

<p>それによって情報共有が必要なのはマネージャー層のみになるため情報共有するコストは下がるが、タスク決めから<a class="keyword" href="http://d.hatena.ne.jp/keyword/%BF%CA%C4%BD%B4%C9%CD%FD">進捗管理</a>や細かい判断まですべてマネージャがやらないといけないためマイクロマネジメントすることになる。</p>

<p>マイクロマネジメントするためマネージャー層が決めたことを確実に実行できる可能性が高まるし予期しないことが起きる心配も少ない。
ただ逆にいうと想定を超えるような成果が発生することもないといえる。</p>

<h1>個人としては...</h1>

<p>どちらにもメリット・デメリットあるし、その組織がどうありたいかを元にどうするべきか決めたらいいと思う。</p>

<p>ただ個人としては、自分の裁量が増えるような体制の方が成果は出しやすいしモチベーションが上がりやすい。
あと優秀な人(もしくは優秀だと思っている人)ほど自分で意思決定したいと思うので、マイクロマネジメントな組織で優秀な人を集めるには相当強いリーダーシップがないといけなくて、そっち方が組織の成果を高める上で、難易度が高いんじゃないかと考えてる。</p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: 子育てはじめて約2ヶ月が立ちましたので、近況を記録
BASENAME: 2017/10/29/232949
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 10/29/2017 23:29:49
-----
BODY:
<p>息子が生まれて約2ヶ月がたちました。
いろいろ思うことや考えていることがあるので、まとめておきます。</p>

<h2>沐浴は結構たいへん</h2>

<p>赤ちゃんをお風呂に入れることを沐浴といって、いまはボクが担当しています。
沐浴はベビーバスに入れて行っているのですが、赤ちゃんが思っているよりも重くて片手で支えて片手で洗うのが結構たいへんです。</p>

<p>使っているベビーバスの頭の部分にクッションがついていて安心してベビーバスに寝かしながら洗えるので、これを買って正解でした。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B003LBSLMY/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/41iz120qvfL._SL160_.jpg" class="hatena-asin-detail-image" alt="永和 新生児用ベビーバス 498111" title="永和 新生児用ベビーバス 498111"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B003LBSLMY/hatena-blog-22/">永和 新生児用ベビーバス 498111</a></p><ul><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> 永和</li><li><span class="hatena-asin-detail-label">メディア:</span> Baby Product</li><li> <span class="hatena-asin-detail-label">クリック</span>: 9回</li><li><a href="http://d.hatena.ne.jp/asin/B003LBSLMY/hatena-blog-22" target="_blank">この商品を含むブログ (1件) を見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<h2>料理をするようになりました。</h2>

<p>妻の方がどうしても赤ちゃんの世話の負担が大きくなるので、代わりにボクがご飯をつくるようになりました。
いままで生きてきてまともに自炊することがなかったのですが、いまはほぼ毎日自炊しています。</p>

<p>ただ知っているレシピはもちろんほとんどないので、<a href="https://www.kurashiru.com/">kurashiru</a>という料理アプリを使っています。</p>

<p>このアプリが比較的簡単でかつ美味しいレシピを動画で見れるので、料理をやったことがないボクでもなんとか楽しく料理が出来ています。
やっぱり手順を動画で見れるっていうのは、普段ほとんど料理をしていない人にとっては料理のハードルが下がるので良いのですねｗ</p>

<p>いま一番使っているアプリで中の人になりたいぐらいですw</p>

<h2>子育て中に会社での残業は、まあできない</h2>

<p>上で書いたように子供の沐浴と自分のご飯をつくるのを家に帰ってきてからやっているので、いま基本19時くらいには帰宅しています。
残業したとしても20時くらいに帰るのですが、それでもだいぶ遅くに帰ってきた感じです。</p>

<p>しかも子供を寝かしつけたあとかなり静かにしていないと起きちゃうので、夜遅く帰ってくるのもアウトです。</p>

<p>その状態で遅くまで会社に残って仕事をする生活はボクには出来ないなと実感しています。</p>

<p>それだけやってもやっぱり妻の方が負担は大きく、夜中に子供が起きちゃうときの世話はボクを寝かしておいてくれて、妻だけで対応してくれています。</p>

<p>そのおかげでなんとか仕事には支障はきたさずに生活出来ていますが、今の時代に子育てや家事を女性に任せっきりするような男になりたくないし、何よりそんな姿を息子にも見せたくないので、もっとパートナーとして上手く家事を分担していきたいと考えています。</p>

<p>あとエンジニアらしく、テクノロジーを使って効率化していきたいですね。</p>

<h2>コードを書く時間や勉強時間をどのように作っていくか</h2>

<p>仕事をする時間や自分が自由に使える時間がやっぱり減ってしまうので、どうしてもコードを書いたり新しいことを勉強する時間が少なくなってしまいます。</p>

<p>それでもやりたい個人プロジェクトや技術についての勉強なんかもやっていかないと楽しくないので、どうその時間を確保するかが今の課題です。</p>

<p>仕事の効率化を上げて仕事の時間で勉強したり、Code Write Everydayなんかをやったりして上手くInputとOutputの効率を上げていかないといけないですね。</p>

<h2>子供が生まれて自然に長期的な視点を持てるようになった</h2>

<p>IT業界の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D9%A5%F3%A5%C1%A5%E3%A1%BC">ベンチャー</a>やスタートアップっていう、3ヶ月先すらどうなっているかわからないとていう環境にずっといる影響か、10年後20年後のことを考えることがほとんどなかったんですが、子供が生まれるとその子が成長する10年後20年後を自然に考えるようになりました。</p>

<p>それまでは自分のピークは30代くらいだと思っていて、それまでに大きな成果をださないとという考えだったんですが、子供が大人になったときに「お父さん昔はこんなことやってすごかったんだぞ」なんて昔話をせずにそのときに一番すごい状態に持っていきたいと思いました。</p>

<p>そのためにはエンジニアとして流行りを追うばかりでなく、今後は基礎をしっかり固めたり、難しいが価値のある挑戦をどんどんしたりして自力をしっかりつけていきたいと思うし、エンジニアリングだけでなく<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%C0%A5%AF%A5%C8%A5%DE%A5%CD%A5%B8%A5%E1%A5%F3%A5%C8">プロダクトマネジメント</a>や経営のところまで進んでいきたいと思うようになってきました。</p>

<p>いまの仕事をしながらプロダクト作ってそのマネジメントとかやっていけるといいですが、、、がんばります^^;</p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: 子育てはじめて約2ヶ月が立ちました。
BASENAME: 2017/10/29/211542
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 10/29/2017 21:15:42
-----
BODY:
<p>息子が生まれて約2ヶ月がたちました。
いろいろ思うことや考えていることがあるので、まとめておきます。</p>

<h2>料理をするようになりました。</h2>

<h2>沐浴は結構たいへん</h2>

<h2>子育て中に残業はまあできない</h2>

-----
--------
AUTHOR: arakaji-yuu
TITLE: 沖縄のプログラマーコミュニティ「Java Küche」の会長をさせて頂くことになりました。
BASENAME: 2017/10/09/161611
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 10/09/2017 16:16:11
-----
BODY:
<p>2017年10月7日に行われたイベント「<a href="https://java-kuche.doorkeeper.jp/events/65072">&#x3044;&#x307E;&#x6CE8;&#x76EE;&#x306E;Microsoft&#x6700;&#x65B0;&#x30C6;&#x30AF;&#x30CE;&#x30ED;&#x30B8;&#x30FC;&#x3092;&#x30AD;&#x30E3;&#x30C3;&#x30C1;&#x30A2;&#x30C3;&#x30D7; ~ Azure&#x3001;Cognitive Services&#x3001;Xamarin ~ - Java K&uuml;che | Doorkeeper</a>」の中でも報告させていただきましたが、沖縄の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DE">プログラマ</a>コミュニティ「<a class="keyword" href="http://d.hatena.ne.jp/keyword/Java">Java</a> Küche」の会長をさせて頂くことになりました。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Java">Java</a> Kücheは2006年7月から続く歴史あるコミュニティで、僕で4代目の会長になります^^</p>

<p>これから一年、他の役員の皆さんに支えてもらいながら、いままで繋いできたコミュニティの文化を継続させつつ、さらに沖縄のエンジニアの皆さんが楽しく、そして何より自分自身が楽しめるようなコミュニティ活動をしていきたいと思いますのでどうぞ宜しくお願い致します！</p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: 「いま注目のMicrosoft最新テクノロジーをキャッチアップ ~ Azure、Cognitive Services、Xamarin ~」というイベントで企画運営・登壇をしてきました。
BASENAME: 2017/10/09/112422
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 10/09/2017 11:24:22
-----
BODY:
<p>2017年10月7日(土)に<a class="keyword" href="http://d.hatena.ne.jp/keyword/Java">Java</a> Küche主催の「いま注目の<a class="keyword" href="http://d.hatena.ne.jp/keyword/Microsoft">Microsoft</a>最新テクノロジーをキャッチアップ ~ Azure、Cognitive Services、Xamarin ~」と題した勉強会を企画運営し、登壇もしてきました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fjava-kuche.doorkeeper.jp%2Fevents%2F65072" title="いま注目のMicrosoft最新テクノロジーをキャッチアップ ~ Azure、Cognitive Services、Xamarin ~" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://java-kuche.doorkeeper.jp/events/65072">java-kuche.doorkeeper.jp</a></cite></p>

<h1>なぜ<a class="keyword" href="http://d.hatena.ne.jp/keyword/Microsoft">Microsoft</a>テクノロジーに関する勉強会を開いたのか？</h1>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Java">Java</a> Kücheというコミュニティでは1年に1回、自分たちの活動内容や予算をどのように使ったのか、そして次の一年をどのように活動するのかというに報告をコミュニティに行う「総会」というイベントを行うのですが、そのイベント時に一緒にどのような勉強会をしたいかというアイディア出しを行いました。</p>

<p>そのときに、近年の<a class="keyword" href="http://d.hatena.ne.jp/keyword/Microsoft">Microsoft</a>が発表してきた様々の技術についての興味があるがキャッチアップできるような勉強会が沖縄だとないことや、つい最近からXamarinやAzureなどの<a class="keyword" href="http://d.hatena.ne.jp/keyword/Microsoft">Microsoft</a>テクノロジーを仕事に使い始めたメンバーがい<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%BF%A4%B3">たこ</a>とから、じゃあ自分たちでキャッチアップするための勉強会を開催しようと企画をしました。</p>

<h1>イベント内容について</h1>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Microsoft">Microsoft</a>のすべてのテクノロジーを網羅することは難しいため、Webアプリケーションを乗せるPaaSとしてAzure、様々なAI・<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B5%A1%B3%A3%B3%D8%BD%AC">機械学習</a>の技術がサービスとして提供され気軽に利用できるCognitive Services、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Android">Android</a>・<a class="keyword" href="http://d.hatena.ne.jp/keyword/iOS">iOS</a>のモバイルアプリを<a class="keyword" href="http://d.hatena.ne.jp/keyword/C%23">C#</a>で両方同時に開発することができるXamarinの3つに絞ってセッションを用意しました。</p>

<p>登壇者にはエクセルソフトセールスエンジニアでXamarinコミュニティJXUG主宰でもある田淵 義人さん、日本<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%AF%A5%ED%A5%BD%A5%D5%A5%C8">マイクロソフト</a>株式会社のテクニカル<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%D0%A5%F3%A5%B8%A5%A7%A5%EA%A5%B9%A5%C8">エバンジェリスト</a>の大森 彩子さんのお二人にわざわざ沖縄まで来ていただきました。</p>

<p>そしてAzureについては仕事でAzureを採用しているぼくが登壇させて頂きました。</p>

<h2>Xamarin概要と活用方法</h2>

<iframe src="//www.slideshare.net/slideshow/embed_code/key/nZQFqyUlW1Up23" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/ytabuchi/xamarin-80547953" title="Xamarin概要と活用方法" target="_blank">Xamarin概要と活用方法</a> </strong> from <strong><a href="https://www.slideshare.net/ytabuchi" target="_blank">Yoshito Tabuchi</a></strong> </div></p>

<p>田淵さんの発表では、Xamarinが使われている事例やそもそものXamarinがどういうテクノロジーなのか、そしてXamarinの使い所などを話して頂きました。</p>

<p>個人的にはXamarin.FormsとXamarin.<a class="keyword" href="http://d.hatena.ne.jp/keyword/iOS">iOS</a> / Xamarin.<a class="keyword" href="http://d.hatena.ne.jp/keyword/Android">Android</a>との使い分けのポイントが知れたのが良くて、やっぱりXamarin.Formsでサクッと<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AF%A5%ED%A5%B9%A5%D7%A5%E9%A5%C3%A5%C8%A5%D5%A5%A9%A1%BC%A5%E0">クロスプラットフォーム</a>アプリが作れるときがXamarinの力が発揮できる<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E6%A1%BC%A5%B9%A5%B1%A1%BC%A5%B9">ユースケース</a>なんだろうなと思いました。</p>

<h2>はじめてのAzure App Service for <a class="keyword" href="http://d.hatena.ne.jp/keyword/linux">linux</a> と Web App for Containers</h2>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.evernote.com%2Fshard%2Fs379%2Fsh%2Ff32a41e8-290a-43ae-a186-2cb3a23bf4aa%2F5942a92148cf1cff" title="はじめてのAzure App Service for linux と Web App for Containers" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.evernote.com/shard/s379/sh/f32a41e8-290a-43ae-a186-2cb3a23bf4aa/5942a92148cf1cff">www.evernote.com</a></cite></p>

<p>次は僕が「はじめてのAzure App Service for <a class="keyword" href="http://d.hatena.ne.jp/keyword/linux">linux</a> と Web App for Containers」という題名で登壇させていただきました。</p>

<p>今年の9月に公式版となったAzure App Service for <a class="keyword" href="http://d.hatena.ne.jp/keyword/linux">linux</a>とWeb App for Containersについての概要と実際にAzureの管理画面を使いながらWeb App for Containersのアプリをデプロイしていくデモを行いました。</p>

<p>デモを選んだ理由ですが、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B2%AD%C6%EC%B8%A9">沖縄県</a>内の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%A6%A5%C9">クラウド</a>事情は<a class="keyword" href="http://d.hatena.ne.jp/keyword/AWS">AWS</a>が一番多く、一部GoogleCloudPlatformを使っている方もおられるのですがAzureを採用している事例を聞い<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%BF%A4%B3">たこ</a>とがなかったので、この機会に管理画面の使い方やAzure独自の概念についての説明を実際に動くデモを通してお伝えしたいと考えたからです。</p>

<p>実際に会場にいらしたら方はAzureを使っている方は32人中2~3人程度で、実際のデモを見せる事ができてよかったな〜と思います。
一部デモが動かないところがあって大成功とはいえないですが。。。^^;<br/>
次回また頑張ります。</p>

<h2>AIを手軽に使える時代がやってきた！"<a class="keyword" href="http://d.hatena.ne.jp/keyword/%BF%CD%B9%A9%C3%CE%C7%BD">人工知能</a>パーツ" Congnitive Services 入門</h2>

<iframe src="//www.slideshare.net/slideshow/embed_code/key/kfSFJ7i9Hk9tM5" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/ayomori/java-kche-introducing-cognitive-services20171007" title="Java Küche Introducing Cognitive Services_20171007" target="_blank">Java Küche Introducing Cognitive Services_20171007</a> </strong> from <strong><a href="https://www.slideshare.net/ayomori" target="_blank">Ayako Omori</a></strong> </div></p>

<p>大森さんの発表では、Cognitive Servicesで作られたアプリケーションのデモから、そもそも誤解されがちなAIとは何ぞやという話、そして多種多様なCognitive Servicesの紹介や利用例などを説明していただきました。</p>

<p>AIというと「たくさんデータをいれたら良い感じの答えを出してくれるすごいやつでしょ？」という勘違いをしてしまいがちだったんですが、AIの定義の正しい説明をしっかり説明していただき、ちゃんと理解をすることができたので面白かったです。</p>

<p>あとなによりも、AI時代の開発者のあり方「#早く面白いことやったヤツが優勝」という<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D1%A5%EF%A1%BC%A5%EF%A1%BC%A5%C9">パワーワード</a>を頂いたので、僕もCognitive Servicesを触ってみておもろいものを作っていきたいと思います^^*</p>

<h1>さいごに</h1>

<p>わざわざ沖縄まで講師としてやってきていただいた田淵さん、大森さんほんとにありがとうございました！！</p>

<p>沖縄に限らず地方だとどうしても技術の多様性が乏しく、今回のような<a class="keyword" href="http://d.hatena.ne.jp/keyword/Microsoft">Microsoft</a>テクノロジーに精通した話を聞く機会が少なかったのでお二人にこのような機会をつくって頂けたのはとてもありがたかったです！</p>

<p>また、イベントに参加して頂いた方もありがとうございました！</p>

<p>これからも沖縄ではなかなか話をする機会が少ない登壇者をお招きして、沖縄にいるエンジニアがまず楽しく、そしてスキル上達の手助けにもなるイベントを企画していきたいと思いますのでどうぞ宜しくお願いします！</p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: 息子が誕生し、晴れてパパになりました。
BASENAME: 2017/09/03/115055
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 09/03/2017 11:24:03
-----
BODY:
<p>9月1日に無事息子が誕生しパパになりました！</p>

<p>予定日を1週間も過ぎてしまっていたので医師の提案で入院して陣痛促進剤を飲み始め、それから20時間ほどの陣痛、そして最後は帝王切開によりなんとか母子ともに健康に出産を終える事ができました。</p>

<p>この子が無事生まれることができたのは、僕が陣痛のサポートのために休暇をいただきたいとお願いすると快く送り出して応援してくれた現職のPaykeのみなさんや、そもそも僕と妻の出会いのきっかけとなり応援してくれた前職の職場のみなさん、そして支えてくれた家族や友達のおかげです。本当にありがとうございます！！！</p>

<p>妊娠・出産時に旦那である<a class="keyword" href="http://d.hatena.ne.jp/keyword/%CB%CD%A4%CB%A4%C7%A4%AD%A4%EB%A4%B3%A4%C8">僕にできること</a>は少なかったのですが、これからは家事・育児ともに二人で支え合って良い家族にしていこうと思います。</p>

<p>今後も皆さんの助けを借りることも多いと思いますが、これからもよろしくお願いいたします(<em> </em>*)</p>

<p>PS. エンジニアは子供ができるとコードを書いたり勉強する時間が減って成長が遅くなるという話をたまに聞きますが、愛する妻と子供がいるからこそさらにエンジニアとしても成長できるように頑張ります！</p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: Webアプリケーションプログラムにおいて、「良いコードを書く」ための基本的な方針
BASENAME: 2017/05/30/234002
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 05/30/2017 23:40:02
-----
BODY:
<p>自分は<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク</a>を用いてWebアプリを書くことが多いのですが、その上で可能限り「良いコード」を書くように心がけています。</p>

<p>ただ、この「良いコード」というのがかなりの曲者で、プログラミングにおいてのイディオム的なことから<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AA%A5%D6%A5%B8%A5%A7%A5%AF%A5%C8%BB%D8%B8%FE">オブジェクト指向</a>の話、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%B6%A5%A4%A5%F3%A5%D1%A5%BF%A1%BC%A5%F3">デザインパターン</a>や<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0%B8%C0%B8%EC">プログラミング言語</a>においてのベストプラクティス、使用している<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク</a>のベストプラクティス、さらに広げると<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3">ドメイン</a>駆動設計の話までかなり広い範囲が含まれてしまいます。</p>

<p>チームによっての技術レベルや目標としているものはもちろん違うので、基本的には現場現場で話し合って自分達の目指す「良いコード」を定義することが重要になるでしょう。</p>

<p>今回はMCV<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク</a>を使ってWebアプリケーションを良いコードで書く上で、どの現場でも理解できて、かつ実践できるであろう私の頭にある「良いコードを書く」ための基本的な方針をまとめてみました。</p>

<p>まとめる上で、出来る限り<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AA%A5%D6%A5%B8%A5%A7%A5%AF%A5%C8%BB%D8%B8%FE">オブジェクト指向</a>や<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%F3%A5%BF%A1%BC%A5%D7%A5%E9%A5%A4%A5%BA">エンタープライズ</a><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3">アーキテクチャ</a>などの用語を使わないように意識しています。</p>

<p>特に真新しいことはなにもなく、当たり前になっているとは思いますが、自分の頭の中を吐き出すためにこのブログを使おうかと。</p>

<h1>基本的な方針</h1>

<h2>１．やっていることが違うコードは分離して名前をつける</h2>

<p>管理画面などを<a class="keyword" href="http://d.hatena.ne.jp/keyword/MVC">MVC</a><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク</a>で開発をしていてたまーにあるのが、おなじURLにPOSTされていても送信されてくるデータによって新規作成になったり、更新になったり、または違うテーブルのデータを更新する処理にかわったりすることです。これは管理画面を作る際に関連のある２つのテーブルのデータを<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E6%A1%BC%A5%B6%A5%D3%A5%EA%A5%C6%A5%A3">ユーザビリティ</a>のために一つの画面で更新できるようにした場合に発生します。</p>

<p>この時に愚直にコントローラー内の一つのアクションにすべての処理を書いていくと、コードが長くなりますし不用意に別の役割をしているコードに依存した処理を書いてしまいバグの温床になることがあります。</p>

<p>出来るだけ違うことをおこなうアクションは別にする。
もしUX上別に出来ない事がある場合はおなじアクションを叩くにしても内部上では別のメソッドを分離して、そのメソッドに処理を行わせるようにしています。</p>

<p>もちろんこれはコントローラーだけではなく、その他のプログラムにおいても同じです。</p>

<p>分離したメソッド名を適切な名前にすると、その名前をみるだけで何をしているのかわかるので可読性も上がります。</p>

<h2>２.　どこに責任を持たせるのかを決める</h2>

<p>例えば商品を表現するDBのテーブルproductsがあり、各商品の識別子(ID)は企業名を表すアルファベット二文字(PKやITなど)とインクリメンタルの数値の8桁でないといけないというルールがあるとする。</p>

<p>そのようなルールがあったときに、商品の作成処理をおこなうControllerで毎回ID作成のためのロジックを書くのはコードの重複が増える上に<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DE%A1%BC">プログラマー</a>がルールを常に覚えていないといけないため問題です。</p>

<p>その問題を避けるため、商品の識別子を作成するためのメソッドを定義し、商品識別子の作成ロジックの責任はこのメソッドのみに持たせます。</p>

<p>責任を持たせるメソッドを定義することによりコードの重複が減り、かつビジネス上のルールをコードで表現することで可読性が上がります。</p>

<h2>3.　Web以外のインターフェースがあることを意識する</h2>

<p>Webアプリケーション開発において<a class="keyword" href="http://d.hatena.ne.jp/keyword/MVC">MVC</a><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク</a>を使って開発をしているとき、注意をせずに開発をすると重要な<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D3%A5%B8%A5%CD%A5%B9%A5%ED%A5%B8%A5%C3%A5%AF">ビジネスロジック</a>がコントローラー側に漏れていく事が多くあります。しかしControllerはWebのRequestとResponseが交わる場所になるので、ここに<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D3%A5%B8%A5%CD%A5%B9%A5%ED%A5%B8%A5%C3%A5%AF">ビジネスロジック</a>を書くとWebのRequestとResponseに依存したプログラムになってしまいがちです。</p>

<p>そんなときに困るのが、同じような機能を提供する別の画面を作ったり、WebのUIではなくWebAPIを作ったり、または<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%DE%A5%F3%A5%C9%A5%E9%A5%A4%A5%F3">コマンドライン</a>のタスクを作ったりなど別のインターフェースから同一の機能を提供しようとしたときに、ロジックを抽出するのが難しくなってしまいます。</p>

<p>そのため、重要な<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D3%A5%B8%A5%CD%A5%B9%A5%ED%A5%B8%A5%C3%A5%AF">ビジネスロジック</a>を書くときには常に今のUIとは別のUI・インターフェースから使われるときのことも意識し、Controllerから分離してコードを書きます。</p>

<h2>4.  小さなプログラムを組み合わせて大きなプログラムを書く</h2>

<p>大きなプロダクト一塊にして書くよりも小さなプログラムを作って細かく分割し、それを組み合わせて大きな機能を作ります。</p>

<p>そうすることで依存性も低く再利用性も高い小さいなコード群がたくさん生まれ、別の機能を作るときにそれらのコードを使ってより早く開発することができます。</p>

<h1>おわりに</h1>

<p>もちろん上記以外にも考えることは多いのですが、私が特に意識しているのがこの４つです。</p>

<p>こういうのを「単一責任の法則」的な法則名で意思疎通できると、話は早いんだろうなー。</p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: PHPのループで書くと約30時間かかる大量の画像アップロード処理を、Clojureのcore.asyncで1時間以下に短縮できた話。
BASENAME: 2017/05/24/094710
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 05/24/2017 09:47:10
-----
BODY:
<p>1つの<a class="keyword" href="http://d.hatena.ne.jp/keyword/VPS">VPS</a>で動いている既存システムのAzureへの移行を進めています。</p>

<p>その上で既存サーバーに入っている画像ファイルをBLOBストレージ(Azureのオブジェクトストレージ、<a class="keyword" href="http://d.hatena.ne.jp/keyword/AWS">AWS</a>でいうS3)に移すという作業が必要になりました。</p>

<p>最初はバックアップから画像ファイルをループでひとつづつアップロードする処理を<a class="keyword" href="http://d.hatena.ne.jp/keyword/PHP">PHP</a>でシンプルに書きました。</p>

<pre class="code" data-lang="" data-unlink>require_once &#39;vendor/autoload.php&#39;;

use WindowsAzure\Common\ServicesBuilder;
use MicrosoftAzure\Storage\Common\ServiceException;

// Create blob REST proxy.
$connectionString = &#34;&#34;;
$blobRestProxy = ServicesBuilder::getInstance()-&gt;createBlobService($connectionString);

// imagesディレクトリから画像ファイルを取得
$images = getImagesFromDirectory(&#39;images&#39;);

 foreach($files as $file){
        $blob_name =  $path = &#34;images/&#34;.$file;
        try {
            $content = fopen($path, &#34;r&#34;);
            $blobRestProxy-&gt;createBlockBlob(&#39;imgcontainer&#39;, $blob_name, $content);
        }catch(Exception $e){
            echo &#34;Exception Occers: &#34;.$path;
            echo &#34;\n&#34;;
            $code = $e-&gt;getCode();
            $error_message = $e-&gt;getMessage();
            echo $code.&#34;: &#34;.$error_message.&#34;\n&#34;;
        }
}
</pre>


<p>最初は100枚だけで試してみたんですが、100枚をアップロードするだけで50秒ほどの時間がかかりました。
ただ画像ファイルはその時点で約23万枚ほどあり、単純計算でざっくり30時間ぐらいか<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%AB%A4%EB%A4%C8">かると</a>わかりました。</p>

<p>つらい。。。</p>

<p>30時間はつらい。。。</p>

<p>覚悟を決めて30時間ぶん回ししてもよかったのですが、「もし間違いがあった場合にまた30時間やるの辛い」
、「画像はいまも増えていくので再アップロードも必要になる」という理由から、なんとかもっと速く終わるようにプログラムを変えることにしました。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/PHP">PHP</a>は基本同期処理のプログラムなので、上記のやり方だとファイルアップロードの待ち時間の間処理が止まってしまいます。
その待ち時間が<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DC%A5%C8%A5%EB%A5%CD%A5%C3%A5%AF">ボトルネック</a>だということは目に見えていたので、複数プロセス、非同期処理に変えてアップロードの待ち時間も<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A5%F3">バン</a><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A5%F3">バン</a>他のファイルをアップロードするように変えれば確実に速くなります。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/PHP">PHP</a>でそのような処理を書く方法もあると思いますが、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Clojure">Clojure</a>という言語のcore.asyncを使うと簡単に実装できるということを知っていたので<a class="keyword" href="http://d.hatena.ne.jp/keyword/Clojure">Clojure</a>で実装し直すことにしました。</p>

<p>core.asyncとは、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Clojure">Clojure</a>で並行プログラミングをするときによく使われるライブラリです。
協調スレッドという軽量なスレッド(ネイティブスレッドではない)を作り、channel経由でスレッド間の通信を安全に行い非同期処理を行うプログラムを書くことができます。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/golang">golang</a>を使ったことがある人には、goroutineと同じようなものだと考えるとわかりやすいと思います。</p>

<p>今回の画像アップロード処理を<a class="keyword" href="http://d.hatena.ne.jp/keyword/Clojure">Clojure</a>のcore.asyncで書き直すと以下のようになりました。</p>

<pre class="code" data-lang="" data-unlink>(ns azure-storage-clj.core
  (:require [clojure.java.io :as io]
            [clojure.core.async :as as
             :refer [&gt;! &lt;! &gt;!! &lt;!! go chan buffer go-loop
                     close! thread alts! alts!! timeout]]
            [clojure.tools.logging :as log])
  (:import [com.microsoft.azure.storage CloudStorageAccount]))

(def connection-str &#34;&#34;)

(def storage-account (CloudStorageAccount/parse connection-str))

(def blob-client (.createCloudBlobClient storage-account))

(def blob-container (.getContainerReference blob-client &#34;imgcontainer&#34;))

// 画像を置いてあるディレクトリ以下からファイルだけを取得する
(def filelist (filter #(.isFile %)
                      (file-seq (io/file &#34;resources/images&#34;))))

(defn image-upload [file]
  (let [f-source file
        filename (.getName file)
        blob (.getBlockBlobReference blob-container (str &#34;images&#34; &#34;/&#34; filename))]
    (.upload blob
             (new java.io.FileInputStream f-source)
             (.length f-source))))

(defn files-upload []
  (let [file-chan (chan 100) ;; バッファ100のチャネルをつくる] 
    ;; チャネルからファイルをとり、アップロードする協調スレッドを100個つくる
    (doseq [n (range 100)]
      (go-loop []
        (let [f (&lt;! file-chan)]
          (do
            (log/debug &#34;image-upload : &#34; f) // ログ出力
            (image-upload f))) ;; 画像アップロード
        (recur)))
    ;; 画像ファイルのリストをひたすらチャネルに入れていく
    (for [f filelist]
      (&gt;!! file-chan f))))

</pre>


<p>処理は以下のようなイメージです。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/a/arakaji-yuu/20170524/20170524091829.png" alt="f:id:arakaji-yuu:20170524091829p:plain" title="f:id:arakaji-yuu:20170524091829p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>この実装を朝の4時くらい起きて実装し、100枚、500枚と試してみて大分速くなることは確認できたので、
一気に全ファイル対象にして実行して<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C6%F3%C5%D9%BF%B2">二度寝</a>へと向かいました(それが5時ごろ)。</p>

<p>7時くらいに目が覚めてPCの様子を伺うと、なんともう完了しているではありませんか。。。</p>

<p>ログを見ると約1時間程度で終わっていたようです。</p>

<p>感無量。。。。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Clojure">Clojure</a>を使うことで並行処理を簡単に実現できて、結果タスクにかかる時間も短縮できました。
やはりいろんな<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D1%A5%E9%A5%C0%A5%A4%A5%E0">パラダイム</a>の言語を知っておくとその時々の問題にあった手段を選べるのでいいですね。</p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: 第10回 Apache Cordova勉強会 @ Sony City Osakiに参加してきました！
BASENAME: 2017/03/22/233004
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 03/22/2017 23:30:04
-----
BODY:
<p>今日は別件でアポがあって東京出張に来ていたのですが、上手くスケジュールが重なって(というか重ねて)  <a href="https://cordova.connpass.com/event/52255/">第10回 Apache Cordova勉強会</a> に参加してきました。</p>

<p>アシアル株式会社の田中さんによる「Vue 2についての発表（仮)」にはじまり、(株)<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%A4%A5%A2%A5%A4%A5%A8%A5%CC">ジェイアイエヌ</a>の佐藤さんによる「WEBエンジニアの可能性を広げる<a class="keyword" href="http://d.hatena.ne.jp/keyword/JINS">JINS</a> MEMEのアプリ開発」、最後に<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%BD%A5%CB%A1%BC">ソニー</a>ネットワークコミュニケーションズ㈱ の緒方さんによる「Cordova を使って本気で商用ハイブリッドアプリケーション開発をやってみた」という発表をして、その後に懇親会という流れでイベントは進みました。</p>

<p>みなさん興味深いお話をして頂きとても楽しかったのですが、個人的に一番<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%D1%A5%AF">インパク</a>トがあったのが緒方さんよる発表で、開発したアプリを見せて頂いたのでしたがUI/UX、アニメショーンの動きなどがとてもハイブリッドアプリで作ったとは思えない程の完成度でとても衝撃を受けました。</p>

<p>Cordova使ったハイブリッドアプリの開発者なら誰もが「ハイブリッドアプリだからネイティブアプリのような体験は作れない」と諦めてしまいがちですが、「ユーザーにはネイティブもハイブリッドも関係ない、ユーザーの期待値はネイティブ」、「ハイブリッドアプリのメリットはネイティブをそれぞれ作る以上の生産性、そこを失ってはいけない」とクオリティと生産性を両立させるための高い基準を設定し、それを達成するために行ったさまざま工夫やノウ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%CF%A5%A6">ハウ</a>を今回の発表や懇親会でのコミュケーションを通して共有して頂きました。</p>

<p>スケジュール、技術的制約、高い達成基準などがあるなかでしっかりとそれを達成するために開発に向き合う姿勢はエンジニアとして尊敬するとともに、現在のモバイルアプリの環境であればネイティブにも遜色ないUXをCordovaでも作れるという可能性を見せて頂けたとても良い会になりました。</p>

<p>Cordovaを使ったハイブリッドアプリ開発、がんばろ！！</p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: 2017年3月1日をもって、琉球インタラクティブからPayke(ペイク)に転職しました
BASENAME: 2017/03/09/131104
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 03/09/2017 13:11:04
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/a/arakaji-yuu/20170309/20170309114130.jpg
-----
BODY:
<p>2017年2月28日を持って4年間働いていた<a href="https://www.ryukyu-i.co.jp/">琉球インタラクティブ</a>を卒業し、<a href="http://payke.co.jp/">Payke</a>に転職しました。
沖縄のネット系<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D9%A5%F3%A5%C1%A5%E3%A1%BC">ベンチャー</a>から沖縄のアプリ系スタートアップへの転職という形になります。</p>

<h1>前職について</h1>

<p>初めて<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DE%A1%BC">プログラマー</a>として職をついたのがこの会社だったのですが、<a class="keyword" href="http://d.hatena.ne.jp/keyword/EC%A5%B5%A5%A4%A5%C8">ECサイト</a>、公共施設の予約システム、<a class="keyword" href="http://d.hatena.ne.jp/keyword/WordPress">WordPress</a>を使ったサイト構築、エンジニア向けイベント情報サービスの機能開発や沖縄の求人サービスの開発など様々な<a class="keyword" href="http://d.hatena.ne.jp/keyword/Web%A5%B5%A1%BC%A5%D3%A5%B9">Webサービス</a>開発にメインのエンジニアとして入る事ができ技術力をとても鍛える事ができました。</p>

<p>また最後の1年半はバイトや外部パートナー含めて最大10名のエンジニアチームのマネジャーも経験させて頂きました。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D9%A5%F3%A5%C1%A5%E3%A1%BC">ベンチャー</a>特有の急激な環境の変化や無茶振り、抜擢人事などはいろんな意味で大変なことも多いですが、
たとえ問題が起きても誰か一人の責任にせずに、誰もが協力して問題解決に取り組む文化、
プロセスは担当者に任せて結果重視で評価することで、様々なプロセスを担当者レベルでどんどん改善出来る文化、
結果を出している人は報酬やランクアップを通して積極的に評価する文化などは
自分のこれからのキャリアを作る上での大事な下地になったともに、個人的にとても働きやすい会社でした。</p>

<p>最終出社日の記念写真
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/a/arakaji-yuu/20170309/20170309114130.jpg" alt="f:id:arakaji-yuu:20170309114130j:plain" title="f:id:arakaji-yuu:20170309114130j:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>自分は新たなチャレンジのために卒業しましたが、もし沖縄でも<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D9%A5%F3%A5%C1%A5%E3%A1%BC">ベンチャー</a>の荒波に揉まれてジェットコースターのようなキャリアを歩みたいという方はぜひ<a href="https://www.ryukyu-i.co.jp/recruit/">琉球インタラクティブのリクルート</a>を覗いてみて下さい^^*</p>

<h1>なぜPaykeに転職したのか</h1>

<p>自分のエンジニアとしてスキルやキャリアを高めるために新たな環境に身をおきたいと思い、半年程かけて転職活動を粛々として行っていまして、その間様々な<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D9%A5%F3%A5%C1%A5%E3%A1%BC%B4%EB%B6%C8">ベンチャー企業</a>やスタートアップから声をかけていただきました。</p>

<p>どの会社も非常に優秀なエンジニアが揃っていたりとても魅力的なプロダクトが揃っていたのですが、Paykeを選んだ理由が一番課題や可能性が多くておもしろいと感じたからです。</p>

<p>Paykeのサービスはアプリでバーコードをスキャンすると、その商品情報が多言語で閲覧できるというインバウンド向けサービスなのですが、
メインのユーザーが訪日外国人であるためいつも自分が使うアプリとは違う視点で考えて開発しないといけないことや、
大量のスキャンデータや商品情報を扱うためのデータ分析基盤を作ること、
スキャンして表示する商品情報の数が数百~数千万、または億まで行ったときに出来ることや
スキャン時得られる商品情報をよりユーザーに最適化した情報を出せるようにすることなど、
現時点で様々な課題と可能性があり、そこにエンジニアとして挑戦することに強い魅力を感じてJoinすることに決めました。</p>

<p>自分の技術力を高めてプロダクトに反映し、機会があればその経験をシェアしていきたいと思います。
今後ともよろしくお願いします。</p>

<p>オフィスの風景</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/a/arakaji-yuu/20170307/20170307193608.jpg" alt="f:id:arakaji-yuu:20170307193608j:plain" title="f:id:arakaji-yuu:20170307193608j:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>初出社日の満面の笑み</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/a/arakaji-yuu/20170301/20170301110039.jpg" alt="f:id:arakaji-yuu:20170301110039j:plain" title="f:id:arakaji-yuu:20170301110039j:plain" class="hatena-fotolife" itemprop="image"></span></p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: アラサーのこれからの人生で重視すること
BASENAME: 2018/04/07/070226
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 09/23/2016 08:05:17
-----
BODY:
<p>いままで若手のつもりでずっと来ていましたが、知らぬまにアラサーの年になっていました。</p>

<p>個人的にこれから年末年始にかけて、様々な人生の転機になるような決断をいくつかしていく予定です。
そのときに間違った決断をしないように、今後の人生で重視する価値観を整理しておこうと思います。</p>

<h1>家族との時間が何より大事</h1>

<p>自分が一番幸せを感じるのは家族とゆっくりご飯を食べることで、その時間が人生において何より重要です。
テレビやDVDを見たり、一緒に仕事の話をしたり、次の休みに何をしようか相談したり。</p>

<p>そういう時間が何より幸せなのです。</p>

<p>いままでは自分のことを幸せよりも成功を重視するタイプの人間だと思っていたんですが、
どうやら成功よりも幸せを重視するタイプの人間だったようです。</p>

<p>なので、これからは家族とちゃんと過ごせる時間を確保できるような働き方をしていきます。</p>

<h1>少ないことをして多く得る( Less is More )</h1>

<p>重要なことはほんとのところは多くない。
自分と自分の大事な人にとって重要なことのみを行い、それ以外のことは出来る限りしない。</p>

<p>仕事も経験やお金のために色々なことに手を出すよりも、いま重要だと思える仕事のみ注力してそこからより深く多くの経験やお金を得られるようにしたい。</p>

<p>これからの時代、というか現時点でも<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B0%A5%ED%A1%BC%A5%D0%A5%EB%B2%BD">グローバル化</a>やAIによって他で安くできることはどんどん置き換えられていく。
その流れのなかでたくさんの簡単なことを出来ても意味を持たないので、数は少ないけど出来る人の少ない重要なことを解決できる仕事をして多くのものを得られるように注力していく。</p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: 今期からJava Kücheの副会長を引き継ぎました
BASENAME: 2016/08/02/050952
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 07/31/2016 15:01:19
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/a/arakaji-yuu/20160731/20160731145314.jpg
-----
BODY:
<p>今期の総会から<a href="http://java-kuche.org/">JavaKüche</a>の副会長を引き継ぎました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/a/arakaji-yuu/20160731/20160731145314.jpg" alt="f:id:arakaji-yuu:20160731145314j:plain" title="f:id:arakaji-yuu:20160731145314j:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>前任の<a href="https://twitter.com/Yutaka_Kinjyo">@Yutaka_Kinjyo</a>さんから「もっと副会長の立場を利用して活動出来る人がやったほうがいい」ということで、自分に引き継がせて頂きました。よろしくお願いします。</p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: 受託開発は狩り、自社サービス開発は稲作
BASENAME: 2016/07/17/145341
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 07/17/2016 14:53:41
IMAGE: https://i.ytimg.com/vi/yAt1LBR2pJo/hqdefault.jpg
-----
BODY:
<p>昨日ふと思っただけなんですが、受託開発は狩りっぽくて自社サービスは稲作っぽいなと。</p>

<p>受託開発がメインの場合は狩りをしている感覚で、自分の獲物がたくさんいる領域を探したり、大きな獲物を数多く確実に捕らえられるように牙を磨いている。大きな狩りに成功すればしばらくは安泰ですが、しっかり次の獲物を探しておかないといけないので、ずっと研ぎ澄ましている感じ。</p>

<p>自社サービスがメインの場合は稲作している感覚で、実りが出るまでは辛いんだけど実りが出るようになれば安定的に食料にありつけるようになる。ひとつの稲作に成功したらそれである程度食料は確保できるので、今度は違う種類の食材に挑戦したり、より大きく収穫できるように工夫していく。</p>

<p>なんでそんなことを思ったかというと、ただ偶然に<a class="keyword" href="http://d.hatena.ne.jp/keyword/YouTube">YouTube</a>でレキシっていう人の「狩りから稲作へ」っていう曲を聞いたからなんですが。</p>

<iframe width="420" height="315" frameborder="0" allowfullscreen="" src="//www.youtube.com/embed/ViXwEsAFTNI"></iframe>


<p><br><a href="https://youtube.com/watch?v=ViXwEsAFTNI">狩りから稲作へ</a></p>

<p>あ、特に結論のようなものはないですよ？</p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: チャットだけが仕事のメインコミュニケーションツールだと問題が出てくるのでプロジェクト管理ツールも使おう。
BASENAME: 2016/06/18/230125
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 06/18/2016 23:01:25
-----
BODY:
<p>自分のいまの仕事環境だとメインのコミュニケーションツールに<a href="http://www.chatwork.com/ja/">ChatWork</a>を使っています。それ自体は良いことでプロジェクト毎にチャットグループを作ってそこでコミュニケーションを行うことでメールや口頭だけコミュニケーションを取るよりも素早く情報共有ができるし、あとで困ったときに検索することもできるのでとても便利です。</p>

<p>ただ業務上Webの受託開発がメインで、お仕事もおかげ様でたくさん頂けているので普通に10、20のプロジェクトのチャットグループが同時進行で動いています。
それだけのチャットが同時動いているとあまりにも情報過多で、仕事に集中する時間をとることも難しくなってきます。</p>

<p>チャットがメインのコミュニケーションの中で仕事する上で色々問題点が上がってきたのでまとめてました。</p>

<h3>コミュニケーションがチャットグループにしか紐付いていない。</h3>

<p>チャットだとチャットグループ一つにつきスレッドが一つです。
一つのプロジェクトで一つのチャットグループの場合、そのプロジェクトに関わる様々なタスクに関する議論を一つのスレッドでおこなうことになります。
これにより、特定のことで議論が活発になっているときにはそれが収まるまで他の話をしたい人は待っていたり、逆に割って入ることで議論が追いづらくなります。</p>

<h3>タスク管理が貧弱</h3>

<p>当たり前ですがチャットはチャットなので、タスク管理機能はついていてもおまけのようなものです。
チャットで仕事を依頼したあとも結局それを管理するためにはエクセルなり、タスク・プロジェクト管理ツールが必要なります。</p>

<h3>未読消化するために時間がかかる</h3>

<p>仕事上でのタスクの依頼や情報共有、細かいやり取りなどがすべてチャット上に集約されるとものすごい量の投稿数になります。
プロジェクト管理ツールなどでタスクに紐付いたコメントとしてやり取りする場合にはそのタスクに関わる人のみがコメントを読めば済みますが、チャットだとチャットグループに入っている人全員が読むことになります。
その投稿が重要かどうかも読むまでわからないので、結果自分には関係の少ないもの読まなくてはならず、そのために手を止めてしまいます。</p>

<h3>一つの解決方法として<a href="http://www.backlog.jp/">BackLog</a>の併用</h3>

<p>いま挙げた問題点を解消するために自分がメインで入るプロジェクトでは積極的にBackLogというプロジェクト管理ツールを使い始めました。</p>

<h3>コミュニケーションが課題に紐付く</h3>

<p>BackLogは各プロジェクトの中に課題というのを登録します。そしてその課題を誰かに依頼したり、議論があればその課題上にコメントすることでコミュニケーションを行います。そのため話が課題に紐付いていることがわかりやすいのでコミュニケーションがやりやすくなります。</p>

<h3>タスク管理がしっかりできる</h3>

<p>BackLogはプロジェクト管理ツールでベースとなる活動は課題を登録することです。その課題の担当がだれが、期限はいつか、優先度はどれくらいかなどが設定できるのでタスク管理をしっかりチームで行うことができます。まあプロジェクト管理ツールなんで当たり前ですが。</p>

<h3>情報が整理されてノイズが減る</h3>

<p>タスクの依頼はBackLogで課題を登録して担当者を割り振ることで行います。
課題に関する追加情報や議論があればBackLogの課題上でコメントし、伝えたい人にNotificationを送ることもできます。
プロジェクト全体に関わる情報でストックして見直したい情報、メンテナンスし続ける情報などはBackLogの<a class="keyword" href="http://d.hatena.ne.jp/keyword/WIKI">WIKI</a>にまとめておく事ができます。
それ以外の話や緊急な話のみChatでやり取りするので、情報が自然に整理されてノイズとなる情報がやっていきます。</p>

<h2>終わりに</h2>

<p>チャットだけだとどんどん未整理に膨らんでいく情報をプロジェクト管理ツールを使うことである程度整理して扱うことができ、結果的に自分の実作業に集中する時間が取りやすくなりました。
いまは自分がメインで入る仕事だけで使っているから上手くいっているだけで、これを全プロジェクトで行うとまた違う問題が出てきそうな気がしますが概ね正しいアプローチだとも思うので、徐々に普及活動もしていこうかなとも思っております。</p>

-----
COMMENT:
AUTHOR: yutaka_kinjyo
IP: 121.106.32.96
DATE: 06/19/2016 09:15:41
流していきたいフロー型の情報と、ためておきたいストック型の情報という分け方ができると思います。チャットはフロー型の情報のやり取りに向いてますね。チケット管理ツールなどはストック型の情報を管理することに向いてますね。特性が違うので使い分ける必要があるということですね。
-----
--------
AUTHOR: arakaji-yuu
TITLE: JAWS Festa Kyusyu 2015 というイベントで発表してきました。
BASENAME: 2015/11/08/201053
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 11/08/2015 20:10:53
-----
BODY:
<p>ブログを書くまでが勉強会ということで、少しおそくなりましたがブログを書きます。</p>

<p>題名の通り、<a href="http://jft2015.jaws-ug.jp/">JAWS Festa 2015 | &#x4E5D;&#x5DDE;IT&#x7523;&#x696D;&#x9769;&#x547D;</a>というイベントで発表してきました。</p>

<p>このイベントは「九州IT<a class="keyword" href="http://d.hatena.ne.jp/keyword/%BB%BA%B6%C8%B3%D7%CC%BF">産業革命</a>」というテーマのもと<a class="keyword" href="http://d.hatena.ne.jp/keyword/AWS">AWS</a>を基盤とするさまざま事例や最新技術に触れると同時に、全国から集まる<a class="keyword" href="http://d.hatena.ne.jp/keyword/AWS">AWS</a>ユーザーと交流するのが目的のイベントとなっていて、
自分は「九州事例<a class="keyword" href="http://d.hatena.ne.jp/keyword/Trac">Trac</a>」という枠で<a class="keyword" href="http://d.hatena.ne.jp/keyword/AWS">AWS</a>の活用事例を発表してきました。</p>

<h4>九州事例<a class="keyword" href="http://d.hatena.ne.jp/keyword/Trac">Trac</a> 「<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%A6%A5%C9">クラウド</a>ネイティブが行なういまどき<a class="keyword" href="http://d.hatena.ne.jp/keyword/Web%A5%B5%A1%BC%A5%D3%A5%B9">Webサービス</a>開発」</h4>

<p>発表内容は、自分がいま開発しているJobAntennaという沖縄の求人サイトを<a class="keyword" href="http://d.hatena.ne.jp/keyword/AWS">AWS</a>を使って構築しているので、そこで<a class="keyword" href="http://d.hatena.ne.jp/keyword/AWS">AWS</a>を前提したことで出来たことをピックアップして紹介しているような内容です^^</p>

<iframe src="//www.slideshare.net/slideshow/embed_code/key/zSmGiFB5mwCMg5" width="425" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/yuujiarakaki/web-54724545" title="クラウドネイティブが行なういまどきWebサービス開発" target="_blank">クラウドネイティブが行なういまどきWebサービス開発</a> </strong> from <strong><a href="//www.slideshare.net/yuujiarakaki" target="_blank">Yuuji Arakaki</a></strong> </div></p>

<p><iframe src="//hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.jobantenna.jp%2F" title="沖縄のお仕事を面白くする求人情報を集めた就活・転職サイト−JobAntenna(ジョブアンテナ)" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.jobantenna.jp/">www.jobantenna.jp</a></cite></p>

<h4>九州事例座談会「九州の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%A6%A5%C9">クラウド</a>事情って？」</h4>

<p>発表が終わって油断していたら、九州事例座談会「九州の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%A6%A5%C9">クラウド</a>事情って？」というセッションがあることを当日知り、大した準備も出来ないままセッションがスタートしました^^;</p>

<p>ちゃんと沖縄の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%A6%A5%C9">クラウド</a>事情が伝えらればよかったですが、心配です・・・</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/a/arakaji-yuu/20151108/20151108194231.jpg" alt="f:id:arakaji-yuu:20151108194231j:plain" title="f:id:arakaji-yuu:20151108194231j:plain" class="hatena-fotolife" itemprop="image"></span></p>

<h4>懇親会</h4>

<p>懇親会は100名程が参加する、超大規模な懇親会でした！！</p>

<p>こんな規模の懇親会に参加するのも始めてですし、スタート同時にLT大会が始まって懇親会時間の3/4はほぼLTを聞いている時間になったのも初めてでした^^;</p>

<p>さすが<a class="keyword" href="http://d.hatena.ne.jp/keyword/JAWS">JAWS</a>に参加している方々、みんなLTの内容も秀逸で聞いているだけでビールが進みましたねw</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/a/arakaji-yuu/20151103/20151103184903.jpg" alt="f:id:arakaji-yuu:20151103184903j:plain" title="f:id:arakaji-yuu:20151103184903j:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/a/arakaji-yuu/20151103/20151103184857.jpg" alt="f:id:arakaji-yuu:20151103184857j:plain" title="f:id:arakaji-yuu:20151103184857j:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>自分の場合こういう懇親会に参加するのは若干の人見知りが出てしまうので苦手なんですが、今回は登壇者の一人となったおかげもあって、スタッフの方や同じ九州事例<a class="keyword" href="http://d.hatena.ne.jp/keyword/Trac">Trac</a>で発表をしていた方、また自分の発表を聞いて質問してきてくれる方などもいてくれて、人見知りでも懇親会を大いに楽しめて色んな人と出会う事ができました。</p>

<p>今回のイベントを運営してくれた方々、自分を発表者に推薦してくれた先輩方に本当に感謝です！！</p>

<h4>さいごに</h4>

<p>今回この<a class="keyword" href="http://d.hatena.ne.jp/keyword/JAWS">JAWS</a> Festa Kyusyu 2015に参加して得たことは3つ。</p>

<ul>
<li>発表は大変だけど、リターンも多いのでこれからも機会があれば挑戦したい！</li>
<li>懇親会で自分の発表を聞いていただいた方に「あの発表が出来るくらいなら<a class="keyword" href="http://d.hatena.ne.jp/keyword/AWS">AWS</a> 認定ソリューションアーキテクト – アソシエイトぐらいならすぐ取れるよ！」といって頂いたので真に受けて取りたい！！</li>
<li>起業に成功して<a class="keyword" href="http://d.hatena.ne.jp/keyword/IPO">IPO</a>すると、旅人になれるらしい！！！</li>
</ul>


<p>ではでは〜^^/</p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: slimからJSの世界にデータをjsonで渡す
BASENAME: 2015/07/30/094033
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 07/30/2015 09:40:33
-----
BODY:
<p>いまWebのフロントエンド開発において、JSで一部のHTMLを動的に構築することが増えてきた。
JSでデータからHTMLを構築する場合、そのデータの部分はやっぱり<a class="keyword" href="http://d.hatena.ne.jp/keyword/json">json</a>の方が扱いやすい。</p>

<p>自分は<a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails</a>のテンプレートエンジンにslimを使っているので、slimでJSの世界に<a class="keyword" href="http://d.hatena.ne.jp/keyword/json">json</a>を渡す方法を考えたので書いておく。</p>

<h1>htmlのdata-attributeに<a class="keyword" href="http://d.hatena.ne.jp/keyword/json">json</a>を渡す</h1>

<p>こんな感じ。</p>

<pre class="code" data-lang="" data-unlink>div.data-getter data-getter=@value.to_json

javascript:
  var value = JSON.parse($(&#39;.data-getter&#39;).attr(&#39;data-getter&#39;));
</pre>


<h1>jsにデータ受け取り用のglobal変数を作って、そこに渡す</h1>

<p>こんな感じ。</p>

<pre class="code" data-lang="" data-unlink>javascript:
  DataGetter = {};
  DataGetter.value = #{raw @value.to_json}

</pre>


-----
--------
AUTHOR: arakaji-yuu
TITLE: フロントエンドJSの設計を考える
BASENAME: 2015/08/26/110059
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 08/26/2015 11:00:59
-----
BODY:
<h1>フロントエンドJSの設計を考える</h1>

<p>フロントエンドでの<a class="keyword" href="http://d.hatena.ne.jp/keyword/JavaScript">JavaScript</a>は片手間で書いていると構造持たない<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%D1%A5%B2%A5%C3%A5%C6%A5%A3%A5%B3%A1%BC%A5%C9">スパゲッティコード</a>を量産してしまいます。
それを防ぐために設計を行なうのですが、自分の観測範囲ではReactやAngularJSなど特定の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク</a>を使った設計指針的なものは良く見かけるのだが、普通の素の<a class="keyword" href="http://d.hatena.ne.jp/keyword/JavaScript">JavaScript</a>に小さいライブラリを組み合わせた場合の設計方法が見つからなかった。</p>

<p>いま自分が行っているプロジェクトを通して、自分なりのフロントエンドJSの設計指針のようなものが出来てきたので今回のブログを通して考えをまとめていきたい。</p>

<p>設計という言葉には色んな意味が含まれていますが、ここで扱う設計とは「アプリケーションの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9">ソースコード</a>をどのように構造化するか」という意味での設計です。<a class="keyword" href="http://d.hatena.ne.jp/keyword/MVC">MVC</a>ではモデルとビューとコントローラーを分けて記述するとかいうやつです。</p>

<h1>なぜ設計するのか</h1>

-----
--------
AUTHOR: arakaji-yuu
TITLE: DOMを扱うオブジェクトのスパゲッティ化を防ぐ工夫
BASENAME: 2015/08/24/110527
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 08/24/2015 10:49:33
-----
BODY:
<h1>はじめに</h1>

<p>フロントエンドの<a class="keyword" href="http://d.hatena.ne.jp/keyword/Javascript">Javascript</a>を書くとき、最初は簡単な要件だからと<a class="keyword" href="http://d.hatena.ne.jp/keyword/jQuery">jQuery</a>などを使って簡単に書いてしまいます。
最初はそれでいいのだが、やりたいことが増えていくにつれてだんだんとプログラムも複雑化していきあっという間に<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%D1%A5%B2%A5%C3%A5%C6%A5%A3%A5%B3%A1%BC%A5%C9">スパゲッティコード</a>を産んでしまいます。</p>

<p>本来はそれを防ぐためにVue.jsやReactなどのモダンなライブラリを使っていくのですが、今回はあえてライブラリを使わずにどう複雑化を防いでいくか考えてみます。</p>

<h1>前提条件</h1>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/JavaScript">JavaScript</a>をファイル毎に役割を分けて整理し、かつ本番用には1ファイルにまとめるためにbrowserifyを使います。構造化</p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: プロダクトを評価する側と実装する側の意識の違い
BASENAME: 2015/08/11/150210
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 08/11/2015 15:02:10
-----
BODY:

-----
--------
AUTHOR: arakaji-yuu
TITLE: メール認証の仕組み、SPF(Sender Policy Framework)とは
BASENAME: 2015/08/05/140630
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 08/05/2015 12:19:57
-----
BODY:
<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Amazon">Amazon</a>のメール送信サービスである<a class="keyword" href="http://d.hatena.ne.jp/keyword/Amazon">Amazon</a> SES(Simple Email Service)を使おうと思って、サービスの説明を読んでいるときにSender Policy Frameworkという言葉でてきました。
その意味をちゃんと理解しておきたいと思ったのでまとめておきます。</p>

<h1><a class="keyword" href="http://d.hatena.ne.jp/keyword/SPF">SPF</a>(Sender Policy Framework)とは</h1>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/SPF">SPF</a>とは、電子メールの送信元<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3">ドメイン</a>が偽られていないかを検査するための仕組みです。</p>

<p>メール送信で使用される<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%C8%A5%B3%A5%EB">プロトコル</a>である<a class="keyword" href="http://d.hatena.ne.jp/keyword/SMTP">SMTP</a>はメールアドレスを自由に設定することが出来るため、簡単に送信先を偽った「なりすましメール」を簡単に送ることができてしまいます。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/SPF">SPF</a>はこのようななりすましを防ぐために<a class="keyword" href="http://d.hatena.ne.jp/keyword/DNS">DNS</a>を使って認証を行なう技術です。</p>

<h2>どのような仕組みか</h2>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/SPF">SPF</a>に対応したメール受信サーバはメール受信時にそのメールの送信元となっている<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3">ドメイン</a>の<a class="keyword" href="http://d.hatena.ne.jp/keyword/SPF">SPF</a>情報を<a class="keyword" href="http://d.hatena.ne.jp/keyword/DNS">DNS</a>で問い合わせします。送信元のサーバが<a class="keyword" href="http://d.hatena.ne.jp/keyword/SPF">SPF</a>情報で許可されていない場合は、送信<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3">ドメイン</a>が詐称されたと判断して受信を拒否するなどの処理をおこないます。</p>

<h2><a class="keyword" href="http://d.hatena.ne.jp/keyword/DNS">DNS</a>に<a class="keyword" href="http://d.hatena.ne.jp/keyword/SPF">SPF</a>レコードはどのように登録するのか</h2>

<p>先に<a class="keyword" href="http://d.hatena.ne.jp/keyword/SPF">SPF</a>情報は<a class="keyword" href="http://d.hatena.ne.jp/keyword/DNS">DNS</a>のTXTレコードに記述します。</p>

<p>設定例は以下:</p>

<pre class="code" data-lang="" data-unlink>        IN     MX  10     mail.example.com
        IN     TXT        “v-spf1 mx ~all&#34;
mail    IN     A          11.22.33.44
</pre>


<p>設定内容は以下のような意味になります。</p>

<pre class="code" data-lang="" data-unlink>v=spf1</pre>


<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/spf">spf</a>の宣言を指定している。1は<a class="keyword" href="http://d.hatena.ne.jp/keyword/spf">spf</a>情報のバージョン1を使うことを宣言している。
バージョン1を指定することで、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Sender%20ID">Sender ID</a>との互換性を保持するメリットがあるので一般的にはspf1とするのが普通らしいです。</p>

<pre class="code" data-lang="" data-unlink>mx</pre>


<p>この<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3">ドメイン</a>のメールアドレスは、ここでmxレコードに指定しているホストから送信されるという宣言をしている。</p>

<pre class="code" data-lang="" data-unlink>~all</pre>


<p>先の指定内容はほぼ全部という意味になる。</p>

<pre class="code" data-lang="" data-unlink>-all</pre>


<p>このように指定すると、完全全部という意味になる。もしmxレコードに指定しているホスト以外からメールを送信されていた場合は<a class="keyword" href="http://d.hatena.ne.jp/keyword/SPF">SPF</a>認証結果がFailとなり<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%D1%A5%E0%A5%E1%A1%BC%A5%EB">スパムメール</a>と判断されるようです。</p>

<h1>まとめ</h1>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/SPF">SPF</a>とは、メール送信者が、誰かに自分のメール送信アドレスを偽られて<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%D1%A5%E0%A5%E1%A1%BC%A5%EB">スパムメール</a>を送信されないように、自分のメール送信アドレスを登録している<a class="keyword" href="http://d.hatena.ne.jp/keyword/DNS">DNS</a>サーバーにどのIPからメールを送信しているかを記述する仕組みのことです。
またメール受信サーバーによっては<a class="keyword" href="http://d.hatena.ne.jp/keyword/SPF">SPF</a>情報が<a class="keyword" href="http://d.hatena.ne.jp/keyword/DNS">DNS</a>に登録されていないと<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%D1%A5%E0%A5%E1%A1%BC%A5%EB">スパムメール</a>と判断することもあるようなのでメール送信サービスを行なうときは<a class="keyword" href="http://d.hatena.ne.jp/keyword/SPF">SPF</a>対応も考慮しないといけないですね。</p>

<h1>参考リンク</h1>

<p><a href="http://server-setting.info/blog/sender-policy-framework.html">http://server-setting.info/blog/sender-policy-framework.html</a>
<a href="https://www.nic.ad.jp/ja/basics/terms/spf.html#two">https://www.nic.ad.jp/ja/basics/terms/spf.html#two</a></p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: RackサーバーのPumaについて調べてみる
BASENAME: 2015/08/03/200502
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 08/03/2015 20:05:02
IMAGE: http://cdn-ak.f.st-hatena.com/images/fotolife/a/arakaji-yuu/20150803/20150803143727.png
-----
BODY:
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/a/arakaji-yuu/20150803/20150803143727.png" alt="f:id:arakaji-yuu:20150803143727p:plain" title="f:id:arakaji-yuu:20150803143727p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<h1>はじめに</h1>

<p>いま開発中の<a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails</a>アプリケーションのRackサーバーは最初<a class="keyword" href="http://d.hatena.ne.jp/keyword/Unicorn">Unicorn</a>を使っていたのですが、諸々の事情でPumaの方を使いたいということになった。
まだリリースもしていないのでやるなら早めに変えちゃおうということでPumaについて調べてみた。</p>

<h1>Pumaとは</h1>

<p>Pumaとはスピードと並列性を追求した<a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby</a>のWebサーバーです。
<a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby</a>でWebサーバーを作るときの標準となっているRackに対応したライブラリになっています。</p>

<h2>スレッドベースのWebサーバー</h2>

<p>Pumaではリクエストの並列処理を実現するためにスレッドを利用しています。
リクエストを処理するためのスレッドを予めスレッドプールに指定した数だけ用意しておきます。リクエストが来るとそのスレッドに処理を任せることでスレッドベースの並列処理を行っています。</p>

<h2><a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby</a>の処理系について</h2>

<p>Pumaではスレッド用いるため、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby</a>の処理系はRubinusや<a class="keyword" href="http://d.hatena.ne.jp/keyword/JRuby">JRuby</a>を推奨していますが、<a class="keyword" href="http://d.hatena.ne.jp/keyword/MRI">MRI</a>(<a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby</a>標準の処理系)でも利用することが可能です。</p>

<h3><a class="keyword" href="http://d.hatena.ne.jp/keyword/MRI">MRI</a>におけるスレッドの扱い</h3>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/MRI">MRI</a>でのスレッドはGlobal <a class="keyword" href="http://d.hatena.ne.jp/keyword/Interpreter">Interpreter</a> Lockという機能によって利用が制限されています。
Global <a class="keyword" href="http://d.hatena.ne.jp/keyword/Interpreter">Interpreter</a> Lockとは「同時には一つのスレッドしか動かないようにする」というものです。</p>

<p>たとえばRubiusのようにスレッドによる並列処理をサポートしている処理系では3つのスレッドを立ち上げて処理を行った場合、同時に処理をおこないます。
ただし<a class="keyword" href="http://d.hatena.ne.jp/keyword/MRI">MRI</a>はGlobal <a class="keyword" href="http://d.hatena.ne.jp/keyword/Interpreter">Interpreter</a> Lockのよって3つのスレッドを立ち上げて処理を行っても一度に一つのスレッドしか処理をおこないません。1つのスレッドが処理をおこなっている最中にBlocking IO(ファイルやの書き込みやTwitterAPIを叩くなど)によって待ち時間が発生したタイミングで別スレッドに切り替えて処理を進めます。</p>

<h1>使い方</h1>

<h2>起動</h2>

<p>Pumaを起動する場合、以下のコマンドを実行します。</p>

<pre class="code" data-lang="" data-unlink>$ bundle exec puma</pre>


<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/rails">rails</a>の場合、以下のコマンドでも実行可能です。</p>

<pre class="code" data-lang="" data-unlink>$ bundle exec rails s Puma</pre>


<p>もしサーバーをデーモンとして実行したい場合は<code>-d</code>オプションを付けましょう</p>

<pre class="code" data-lang="" data-unlink>$ bundle exec puma -d</pre>


<p>設定ファイルを指定する場合は<code>-C</code>オプションのあとに設定ファイルへのパスを指定します。</p>

<pre class="code" data-lang="" data-unlink>$ bundle exec puma -C config/puma.rb</pre>


<h2>停止</h2>

<p>Pumaを停止するにはプロセスに対して<code>QUIT</code>シグナルを送ります。
<code>rails s Puma</code>で起動した場合のデフォルトのpidファイルは<code>tmp/pids/server.pid</code>にありますので、そこに記載されているプロセスIDに対してシグナルを送信します</p>

<pre class="code" data-lang="" data-unlink>$ kill -QUIT `(cat tmp/pids/server.pid)`</pre>


<p>設定ファイルconfig/puma.rbを指定して起動した場合、その設定ファイルから*.pidファイルを探せるので<code>pumactl</code>というコマンドを使って簡単に停止することもできます。</p>

<pre class="code" data-lang="" data-unlink>$ bundle exec pumactl halt</pre>


<h2>再起動</h2>

<p>Pumaの再起動はhot restartに対応しています。
hot restartとはnginxや<a class="keyword" href="http://d.hatena.ne.jp/keyword/unicorn">unicorn</a>と同様にサーバーのソケットを開いたままリスタートすることを可能にします。それにより、ユーザーからのリクエストを待たせる事なくサーバーを再起動して新しいバージョンのアプリケーションに切り替える事ができます。</p>

<p>hot restartするにはpumaのプロセスに対して<code>SIGUSR2</code>シグナルを送信します。</p>

<pre class="code" data-lang="" data-unlink>$ kill -SIGUSR2 `(cat tmp/pids/server.pid)`</pre>


<p>設定ファイルを指定した実行した場合、pumactlで再起動をかけることも出来ます。</p>

<pre class="code" data-lang="" data-unlink>$ bundle exec pumactl restart</pre>


<h1>設定ファイル</h1>

<p>puma起動時のオプションの指定である程度カスタマイズできるがやはり設定ファイルに書いて起動する方が管理しやすいです。
pumaの設定ファイルでなにをどう設定できるかまとめておきます。</p>

<p>ちなみに設定ファイルのサンプルはpumaの<a class="keyword" href="http://d.hatena.ne.jp/keyword/github">github</a><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EC%A5%DD%A5%B8%A5%C8%A5%EA">レポジトリ</a>の<a href="https://github.com/puma/puma/blob/master/examples/config.rb">puma/examples/config.rb</a>から手に入ります。</p>

<h2>environment</h2>

<p>pumaをどの環境で動作させるかを指定します。デフォルトは'development'になっています。
<a class="keyword" href="http://d.hatena.ne.jp/keyword/rails">rails</a>で使う場合は<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B4%C4%B6%AD%CA%D1%BF%F4">環境変数</a><a class="keyword" href="http://d.hatena.ne.jp/keyword/RAILS">RAILS</a>_ENVを直接environmentに指定するのが良いと想います。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synComment"># Set the environment in which the rack's app will run. The value must be a string</span>
<span class="synComment">#</span>
<span class="synComment"># The default is &quot;development&quot;.</span>
<span class="synComment">#</span>
<span class="synComment"># environment 'production'</span>
environment <span class="synIdentifier">ENV</span>[<span class="synSpecial">'</span><span class="synConstant">RAILS_ENV</span><span class="synSpecial">'</span>] <span class="synComment"># Railsで使う場合</span>
</pre>


<h2>daemonize</h2>

<p>rackサーバーをデーモンにして起動するかどうかを設定します。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synComment"># Daemonize the server into the background. Highly suggest that</span>
<span class="synComment"># this be combined with &quot;pidfile&quot; and &quot;stdout_redirect&quot;.</span>
<span class="synComment">#</span>
<span class="synComment"># The default is &quot;false&quot;.</span>
<span class="synComment">#</span>
<span class="synComment"># daemonize</span>
<span class="synComment"># daemonize false</span>
daemonize <span class="synConstant">true</span>
</pre>


<h2>pidfile</h2>

<p>pidファイルを配置するパスを指定します。
<a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails</a>の場合、tmp/pids/puma.pidに配置するほうが良いと思います。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synComment"># Store the pid of the server in the file at &quot;path&quot;.</span>
<span class="synComment">#</span>
<span class="synComment"># pidfile '/u/apps/lolcat/tmp/pids/puma.pid'</span>
pidfile <span class="synSpecial">&quot;#{</span><span class="synType">Dir</span>.pwd<span class="synSpecial">}</span><span class="synConstant">/tmp/pids/puma.pid</span><span class="synSpecial">&quot;</span>
</pre>


<h2>state_path</h2>

<p>サーバー情報を記載したstateファイルを配置するパスを指定します。
stateファイルはpumactlコマンドでサーバーを操作するのに使用します。
<a class="keyword" href="http://d.hatena.ne.jp/keyword/rails">rails</a>の場合、特別このようなファイルを配置するディレクトリはないので今回はtmp/pids/以下に配置しておきます。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synComment"># Use &quot;path&quot; as the file to store the server info state. This is</span>
<span class="synComment"># used by &quot;pumactl&quot; to query and control the server.</span>
<span class="synComment">#</span>
<span class="synComment"># state_path '/u/apps/lolcat/tmp/pids/puma.state'</span>
state_path <span class="synSpecial">&quot;#{</span><span class="synType">Dir</span>.pwd<span class="synSpecial">}</span><span class="synConstant">/tmp/pids/puma.state</span><span class="synSpecial">&quot;</span>
</pre>


<h2>Cluster mode</h2>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%B9%A5%BF">クラスタ</a>モードとは<a class="keyword" href="http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4">複数</a>のワー<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AB%A1%BC%A5%D7">カープ</a>ロセスを起動し、そのプロセスそれぞれでスレッドプールを持ちリクエストを処理する仕組みです。
ワー<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AB%A1%BC%A5%D7">カープ</a>ロセスの数は以下のように指定します。
Workerの数をマシンが持つCore数を超えないように気をつけて下さい。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink>
<span class="synComment"># === Cluster mode ===</span>
<span class="synComment"># How many worker processes to run.</span>
<span class="synComment">#</span>
<span class="synComment"># The default is &quot;0&quot;.</span>
<span class="synComment">#</span>
workers <span class="synConstant">2</span>
</pre>


<h2>Thread Pool</h2>

<p>Pumaはスレッドによってリクエストを処理します。スレッドをスレッドプールに貯めておく数の下限から上限を指定することが出来ます。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synComment"># Configure &quot;min&quot; to be the minimum number of threads to use to answer</span>
<span class="synComment"># requests and &quot;max&quot; the maximum.</span>
<span class="synComment">#</span>
<span class="synComment"># The default is &quot;0, 16&quot;.</span>
<span class="synComment">#</span>
<span class="synComment"># threads 0, 16</span>
threads <span class="synConstant">16</span>, <span class="synConstant">16</span>
</pre>


<h2>bind</h2>

<p>サーバーをどのように接続するかを<a class="keyword" href="http://d.hatena.ne.jp/keyword/URI">URI</a>で指定できます。
シンプルに<a class="keyword" href="http://d.hatena.ne.jp/keyword/TCP">TCP</a>で接続する場合<code>tcp://0.0.0.0:80</code>、またWebサーバーの前段にnginxをなどを置き、そこから<a class="keyword" href="http://d.hatena.ne.jp/keyword/UNIX">UNIX</a> Socket経由で接続する場合は<code>unix:///var/run/puma.sock</code>のように指定します。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synComment"># Bind the server to &quot;url&quot;. &quot;tcp://&quot;, &quot;unix://&quot; and &quot;ssl://&quot; are the only</span>
<span class="synComment"># accepted protocols.</span>
<span class="synComment">#</span>
<span class="synComment"># The default is &quot;tcp://0.0.0.0:9292&quot;.</span>
<span class="synComment">#</span>
<span class="synComment"># bind 'tcp://0.0.0.0:9292'</span>
<span class="synComment"># bind 'unix:///var/run/puma.sock'</span>
<span class="synComment"># bind 'unix:///var/run/puma.sock?umask=0111'</span>
<span class="synComment"># bind 'ssl://127.0.0.1:9292?key=path_to_key&amp;cert=path_to_cert'</span>
bind <span class="synSpecial">'</span><span class="synConstant">unix:///var/share/sockets/puma.sock</span><span class="synSpecial">'</span>
</pre>


<h2>その他、なにが設定可能か調べるには</h2>

<p>上記で指定したこと以外にも設定可能な項目はあります。
それを調べるには<a href="https://github.com/puma/puma/blob/master/examples/config.rb">設定ファイルのサンプル</a>か、設定ファイルの<a href="https://github.com/puma/puma/blob/master/lib/puma/dsl.rb">DSLが定義されたファイル</a>を読んで探してみると大体何ができるか把握出来ます。</p>

<h1>参考URL</h1>

<p><a href="https://github.com/puma/puma">https://github.com/puma/puma</a></p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: 『問と解』何を書こうかな・・・
BASENAME: 2015/07/09/172450
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 07/09/2015 17:24:50
CATEGORY: 問と解
-----
BODY:

-----
--------
AUTHOR: arakaji-yuu
TITLE: Roswellで使ってみる
BASENAME: 2015/07/01/101350
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 07/01/2015 10:13:50
-----
BODY:
<p>色んな<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0%B8%C0%B8%EC">プログラミング言語</a>を遊びで触ることが多いのですが、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Common%20Lisp">Common Lisp</a>もやっています。</p>

<p>日本で<a class="keyword" href="http://d.hatena.ne.jp/keyword/Common%20Lisp">Common Lisp</a>とういうと<a href="http://blog.8arrow.org/">八発白中</a>というブログですが、そこで紹介されていた<a href="https://github.com/snmsts/roswell">Roswell</a>というプロダクトを使ってみました。</p>

<h1>インストール</h1>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Mac%20OS">Mac OS</a>なら<a class="keyword" href="http://d.hatena.ne.jp/keyword/brew">brew</a>でインストールできるらしい。</p>

<pre class="code" data-lang="" data-unlink>$ brew tap snmts/roswell
$ brew install roswell
</pre>


<h1>処理系をインストール</h1>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/ruby">ruby</a> でいうrbenvのように処理系をバージョン指定してインストール可能らしい。
とりあえずいまはバージョンどうでもいいので処理系のみ指定してインストールする。</p>

<pre class="code" data-lang="" data-unlink>$ ros install sbcl</pre>


<h1>Repl起動</h1>

<p>ros run コマンドでreplが起動出来る。</p>

<pre class="code" data-lang="" data-unlink>$ ros run 
* (+ 1 2 3)

6</pre>


<h1>雑感</h1>

<p>CommonLispを始めるときに処理系をインストールするのは結構面倒だったので、こういう<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB">ツール</a>はありがたいです。
(まあ、いうほど<a class="keyword" href="http://d.hatena.ne.jp/keyword/Lisp">Lisp</a>書いてないけど・・</p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: Sidekiqの利用時の注意点
BASENAME: 2015/07/02/102347
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 06/30/2015 10:55:59
-----
BODY:
<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails</a>で非同期タスクを実行する<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク</a>としてSidekiqを利用しているのですが、Sidekiqを本番環境で運用する注意しないといけない点を纒めておきました。</p>

<p>ただ、これらの内容は実際に運用した上での知見ではなく、<a href="https://github.com/mperham/sidekiq/wiki">公式WIKI</a>を読んだ内容を抜粋しているだけですのでご了承下さい。</p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: windows7でvagrantを使う
BASENAME: 2015/06/04/110512
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 06/04/2015 11:05:12
IMAGE: https://qiita-image-store.s3.amazonaws.com/1260/26205/68d4e773-a339-eca6-a1d5-7277c418f658.png
-----
BODY:
<h1>はじめに</h1>

<p>現在行っているプロジェクトで最初は自分一人エンジニアで開発を行っており開発環境に<a class="keyword" href="http://d.hatena.ne.jp/keyword/Vagrant">Vagrant</a>を利用していたのですが、この度<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DE%A1%BC%A5%AF%A5%A2%A5%C3%A5%D7">マークアップ</a>と連携する段階に入り、いままで自分の<a class="keyword" href="http://d.hatena.ne.jp/keyword/Mac">Mac</a>に<a class="keyword" href="http://d.hatena.ne.jp/keyword/vagrant">vagrant</a>で開発環境を作って開発してきたので、その環境を<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DE%A1%BC%A5%AF%A5%A2%A5%C3%A5%D7">マークアップ</a>の<a class="keyword" href="http://d.hatena.ne.jp/keyword/windows">windows</a>で再現するために<a class="keyword" href="http://d.hatena.ne.jp/keyword/windows">windows</a>で<a class="keyword" href="http://d.hatena.ne.jp/keyword/vagrant">vagrant</a>を使う方法を調査したのでまとめおきたいと思います。</p>

<h1><a class="keyword" href="http://d.hatena.ne.jp/keyword/vagrant">vagrant</a>とは</h1>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/vagrant">vagrant</a>とは仮想環境の起動、Stop、削除を<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%DE%A5%F3%A5%C9%A5%E9%A5%A4%A5%F3">コマンドライン</a>で簡単に操作でき、かつその仮想環境の設定(os、ネットワーク、メモリ割り当てなど)をVagrantfileという一つファイルで行なう事が出来る<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB">ツール</a>です。</p>

<p>このVagrantfileを共有することが簡単に仮想環境を構築できること、他の人と同じ開発環境を簡単に再現できることが魅力で使われている<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB">ツール</a>です。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/vagrant">vagrant</a>についての説明はよりわかりやすい説明がされている<a href="http://dev.classmethod.jp/server-side/virtual-box-vagrant/">ブログ</a>があるので、ここでの説明は省略します。</p>

<h1>インストール手順</h1>

<h2><a class="keyword" href="http://d.hatena.ne.jp/keyword/vagrant">vagrant</a> インストール</h2>

<p>まず<a href="http://www.vagrantup.com/downloads.html">公式サイト</a>からダウロードします。<a class="keyword" href="http://d.hatena.ne.jp/keyword/Windows">Windows</a>を選択して、ダウロードして下さい。</p>

<p>インストールしたファイルをダブルクリックして、あとは説明に従えば上手く行きます。</p>

<h2><a class="keyword" href="http://d.hatena.ne.jp/keyword/VirtualBox">VirtualBox</a>をインストール</h2>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/vagrant">vagrant</a>で利用する仮想環境を作るためにはなんらかの仮想化<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB">ツール</a>が必要です。ここでは自分も使っている<a class="keyword" href="http://d.hatena.ne.jp/keyword/VirtualBox">VirtualBox</a>を利用するのでインストールします。</p>

<p><a href="https://www.virtualbox.org/wiki/Downloads">公式サイトのダウロードページ</a>にある「<a class="keyword" href="http://d.hatena.ne.jp/keyword/VirtualBox">VirtualBox</a> 4.3.28 for <a class="keyword" href="http://d.hatena.ne.jp/keyword/Windows">Windows</a> hosts -> <a class="keyword" href="http://d.hatena.ne.jp/keyword/x86">x86</a>/<a class="keyword" href="http://d.hatena.ne.jp/keyword/amd64">amd64</a>」を選択してダウロードして下さい。</p>

<p><img src="https://qiita-image-store.s3.amazonaws.com/1260/26205/68d4e773-a339-eca6-a1d5-7277c418f658.png" alt="スクリーンショット 2015 06 02 15.46.05.png" /></p>

<p>ダウンロードしたファイルをクリックしたらインストールが始まります。ここも説明どおり進めていけば問題ありません。</p>

<h2><a class="keyword" href="http://d.hatena.ne.jp/keyword/VirtualBox">VirtualBox</a>のパスをユーザー<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B4%C4%B6%AD%CA%D1%BF%F4">環境変数</a>Pathに設定する</h2>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/vagrant">vagrant</a>が<a class="keyword" href="http://d.hatena.ne.jp/keyword/VirtualBox">VirtualBox</a>を使用するためにユーザー<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B4%C4%B6%AD%CA%D1%BF%F4">環境変数</a>Pathに<a class="keyword" href="http://d.hatena.ne.jp/keyword/VirtualBox">VirtualBox</a>のパスを設定する必要があります。
特別に変更せずに進めていれば、C:\Program Files\<a class="keyword" href="http://d.hatena.ne.jp/keyword/Oracle">Oracle</a>\<a class="keyword" href="http://d.hatena.ne.jp/keyword/VirtualBox">VirtualBox</a>にインストールされているはずなので確認して下さい。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/VirtualBox">VirtualBox</a>をインストールしたパスが確認できれば、それを<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B4%C4%B6%AD%CA%D1%BF%F4">環境変数</a>に設定します。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%B4%C4%B6%AD%CA%D1%BF%F4">環境変数</a>の設定するにはWindowボタン->Computer->System properties -> Change settingsとを辿ると以下の設定画面を表示させます。(画像は英語になっているので日本語に読みかえて下さい。)</p>

<p><img src="https://qiita-image-store.s3.amazonaws.com/1260/26205/ba1ba62d-f568-f186-cb22-7fe178817b30.png" alt="スクリーンショット 2015-06-02 16.29.28.png" /></p>

<p>画面の下にある「Environment Variables」ボタンをクリックすると<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B4%C4%B6%AD%CA%D1%BF%F4">環境変数</a>設定画面に入ります。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%B4%C4%B6%AD%CA%D1%BF%F4">環境変数</a>の設定画面には上部の「ユーザー<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B4%C4%B6%AD%CA%D1%BF%F4">環境変数</a>(User variables for ユーザー名)」と下部の「システム<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B4%C4%B6%AD%CA%D1%BF%F4">環境変数</a>(System variables)」があります。</p>

<p>ユーザー<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B4%C4%B6%AD%CA%D1%BF%F4">環境変数</a>のPathに先ほど確認した<a class="keyword" href="http://d.hatena.ne.jp/keyword/VirtualBox">VirtualBox</a>のPathを追加したのですが、もしすでにPathがあればすでに書かれている値の後に追記してください。
もしなければNewボタンをクリックして、新規に作成します。</p>

<p><img src="https://qiita-image-store.s3.amazonaws.com/1260/26205/2b4ef2f3-785d-b6b4-c566-bed0a54212b7.png" alt="スクリーンショット 2015-06-02 16.32.16.png" /></p>

<h2><a class="keyword" href="http://d.hatena.ne.jp/keyword/vagrant">vagrant</a>で仮想環境を立ち上げる</h2>

<p>インストール&amp;設定が上手くいったか確認するため、<a class="keyword" href="http://d.hatena.ne.jp/keyword/vagrant">vagrant</a>を使ってみる。</p>

<p>好きなディレクトリに移動して、以下のコマンドを実行してください。</p>

<pre class="code" data-lang="" data-unlink>$ vagrant init hashicorp/precise32</pre>


<p>成功するとVagrantfileが作成されます。
そのVagrantfileで定義された仮想環境を立ち上げるには以下のコマンドを実行します。</p>

<pre class="code" data-lang="" data-unlink>$ vagrant up</pre>


<p>上手くいけば指定された仮想環境のboxのインストールから立ち上げまで行ってくれます。</p>

<h4>注意点</h4>

<p>もし<a class="keyword" href="http://d.hatena.ne.jp/keyword/vagrant">vagrant</a> upしたときにエラーが発生し、「<a class="keyword" href="http://d.hatena.ne.jp/keyword/VirtualBox">VirtualBox</a>がインストールされていない」というエラーメッセージが表示された場合まだ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B4%C4%B6%AD%CA%D1%BF%F4">環境変数</a>Pathが<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%DE%A5%F3%A5%C9%A5%D7%A5%ED%A5%F3%A5%D7%A5%C8">コマンドプロンプト</a>に反映されていないのが原因かもしれません。
一度<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%DE%A5%F3%A5%C9%A5%D7%A5%ED%A5%F3%A5%D7%A5%C8">コマンドプロンプト</a>を再起動させると上手くいくかもしれないので試してみて下さい。(自分は<a class="keyword" href="http://d.hatena.ne.jp/keyword/Windows">Windows</a>自体を再起動したけど。。)</p>

<h1>課題</h1>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/vagrant">vagrant</a>で立ち上げた仮想環境に<a class="keyword" href="http://d.hatena.ne.jp/keyword/ssh">ssh</a>で簡単にログインできるコマンドで<a class="keyword" href="http://d.hatena.ne.jp/keyword/vagrant">vagrant</a> <a class="keyword" href="http://d.hatena.ne.jp/keyword/ssh">ssh</a>というのがありますが、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Windows">Windows</a>だとデフォルトで<a class="keyword" href="http://d.hatena.ne.jp/keyword/ssh">ssh</a>クライアントが入っておらず使えない。。</p>

<p>この<a class="keyword" href="http://d.hatena.ne.jp/keyword/vagrant">vagrant</a> <a class="keyword" href="http://d.hatena.ne.jp/keyword/ssh">ssh</a>を使えるようにするのは<a href="http://arakaji.hatenablog.com/entry/2015/06/04/111147">別記事</a>にまとめましたのでそちらを参考にして下さい。</p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: windows7でvagrant ssh コマンドが使えるようにする
BASENAME: 2015/06/04/111147
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 06/04/2015 11:11:47
IMAGE: https://qiita-image-store.s3.amazonaws.com/1260/26205/0be94023-ac3e-8073-9a28-2b3dae8a22d7.png
-----
BODY:
<h1>はじめに</h1>

<p><a href="http://arakaji.hatenablog.com/entry/2015/06/04/110512">windows7でvagrantを使う</a>の続きの記事です。</p>

<p>もし<a class="keyword" href="http://d.hatena.ne.jp/keyword/vagrant">vagrant</a>のインストールがまだであれば<a href="http://arakaji.hatenablog.com/entry/2015/06/04/110512">windows7でvagrantを使う</a>を試してみて下さい。</p>

<h1><a class="keyword" href="http://d.hatena.ne.jp/keyword/vagrant">vagrant</a> <a class="keyword" href="http://d.hatena.ne.jp/keyword/ssh">ssh</a>とは</h1>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/vagrant">vagrant</a> <a class="keyword" href="http://d.hatena.ne.jp/keyword/ssh">ssh</a>とは、<a class="keyword" href="http://d.hatena.ne.jp/keyword/vagrant">vagrant</a>で立ち上げた仮想環境に<a class="keyword" href="http://d.hatena.ne.jp/keyword/ssh">ssh</a>で簡単にログインできるコマンドです。しかし<a class="keyword" href="http://d.hatena.ne.jp/keyword/Windows">Windows</a>ではデフォルトで<a class="keyword" href="http://d.hatena.ne.jp/keyword/ssh">ssh</a>クライアントが入っていないため、このコマンドが使用出来ません。</p>

<p>このままでは辛いので、どうにかして<a class="keyword" href="http://d.hatena.ne.jp/keyword/windows">windows</a>でも<a class="keyword" href="http://d.hatena.ne.jp/keyword/vagrant">vagrant</a> <a class="keyword" href="http://d.hatena.ne.jp/keyword/ssh">ssh</a>が使えるようにします。</p>

<h1><a class="keyword" href="http://d.hatena.ne.jp/keyword/mingw">mingw</a>-getをインストールする</h1>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Windows">Windows</a>上で<a class="keyword" href="http://d.hatena.ne.jp/keyword/GNU/Linux">GNU/Linux</a>の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%DE%A5%F3%A5%C9%A5%E9%A5%A4%A5%F3">コマンドライン</a><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB">ツール</a>を使えるようにした<a href="http://www.mingw.org/">MinGW</a>というものがあります。
<a class="keyword" href="http://d.hatena.ne.jp/keyword/mingw">mingw</a>-getとは<a class="keyword" href="http://d.hatena.ne.jp/keyword/MinGW">MinGW</a>のパッケージ管理<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB">ツール</a>のようなもので、これを使って<a class="keyword" href="http://d.hatena.ne.jp/keyword/ssh">ssh</a>をインストールして使えるようにします。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/mingw">mingw</a>-getは<a href="http://sourceforge.net/projects/mingw/files/Installer/">ここ</a>から<a class="keyword" href="http://d.hatena.ne.jp/keyword/mingw">mingw</a>-get-setup.exeをダウンロードして、そのファイルを実行するとインストールが開始します。</p>

<p><img src="https://qiita-image-store.s3.amazonaws.com/1260/26205/0be94023-ac3e-8073-9a28-2b3dae8a22d7.png" alt="MinGW   Minimalist GNU for Windows   Browse  Installer at SourceForge.net.png" /></p>

<p>インストールの手順は、ここも説明に従って行えば問題ないです。</p>

<p>インストールが完了すると<a class="keyword" href="http://d.hatena.ne.jp/keyword/MinGW">MinGW</a> Install Managerが起動されます。</p>

<p><img src="https://qiita-image-store.s3.amazonaws.com/1260/26205/e0fb9743-5e26-6d62-d279-775bb5577f2c.png" alt="スクリーンショット 2015-06-02 18.03.41.png" /></p>

<h2><a class="keyword" href="http://d.hatena.ne.jp/keyword/MinGW">MinGW</a>用にPathを通す</h2>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/MinGW">MinGW</a>でインストールされるコマンドなども<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B4%C4%B6%AD%CA%D1%BF%F4">環境変数</a>Pathを通さないと実行できません。
なにも変更せずにインストールしていればC:\<a class="keyword" href="http://d.hatena.ne.jp/keyword/MinGW">MinGW</a>\binにコマンドをインストールされるのでこのパスをユーザー<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B4%C4%B6%AD%CA%D1%BF%F4">環境変数</a>Pathに設定してください。</p>

<h1><a class="keyword" href="http://d.hatena.ne.jp/keyword/MinGW">MinGW</a>を使って基本ソフトウェアをインストールする</h1>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/MinGW">MinGW</a>を使ったインストール方法は<a href="http://heroween.hateblo.jp/entry/2014/06/06/203440">このブログ</a>の詳しく乗っているので、このブログの「パッケージのインストール：<a class="keyword" href="http://d.hatena.ne.jp/keyword/GUI">GUI</a>編」を参考にしてください。</p>

<h1><a class="keyword" href="http://d.hatena.ne.jp/keyword/MinGW">MinGW</a>で<a class="keyword" href="http://d.hatena.ne.jp/keyword/ssh">ssh</a>クライアントをインストールする</h1>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/MinGW">MinGW</a> Install Managerを開いて右側にあるMSYSをクリックするとMSYSのパッケージがリストで表示されます。その中にmsys-opensshとmsys-opensslというパッケージがあるのでそれらにチェックをいれます。</p>

<p>その後、左上メニューのInstallation->Apply Changesをクリックするとインストールが開始されます。</p>

<h2>注意点</h2>

<p>MSYSのパッケージはデフォルトだとC:\<a class="keyword" href="http://d.hatena.ne.jp/keyword/MinGW">MinGW</a>\msys\1.0\binにインストールされます。ここにもPathを通さないとコマンドが実行できないので、ユーザー<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B4%C4%B6%AD%CA%D1%BF%F4">環境変数</a>PathにC:\<a class="keyword" href="http://d.hatena.ne.jp/keyword/MinGW">MinGW</a>\msys\1.0\binを追記してください。</p>

<h1><a class="keyword" href="http://d.hatena.ne.jp/keyword/vagrant">vagrant</a> <a class="keyword" href="http://d.hatena.ne.jp/keyword/ssh">ssh</a>を試す</h1>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/ssh">ssh</a>のインストールが完了しましたら、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%DE%A5%F3%A5%C9%A5%D7%A5%ED%A5%F3%A5%D7%A5%C8">コマンドプロンプト</a>を立ち上げ、Vagrantiflleがあるディレクトリに移動します。
そこで<a class="keyword" href="http://d.hatena.ne.jp/keyword/vagrant">vagrant</a> upで<a class="keyword" href="http://d.hatena.ne.jp/keyword/vagrant">vagrant</a>を起動し、<a class="keyword" href="http://d.hatena.ne.jp/keyword/vagrant">vagrant</a> <a class="keyword" href="http://d.hatena.ne.jp/keyword/ssh">ssh</a>コマンドを実行します。</p>

<p>そこでエラーが発生せずに仮想環境の中にログインできたら成功です。</p>

<p><img src="https://qiita-image-store.s3.amazonaws.com/1260/26205/284b2c66-22cd-8851-a7a9-c006e2fe4d09.png" alt="スクリーンショット 2015-06-02 18.44.17.png" /></p>

<h1>さいごに</h1>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/vagrant">vagrant</a> では<a class="keyword" href="http://d.hatena.ne.jp/keyword/rsync">rsync</a>コマンドも使うので<a class="keyword" href="http://d.hatena.ne.jp/keyword/ssh">ssh</a>と同じ要領で<a class="keyword" href="http://d.hatena.ne.jp/keyword/rsync">rsync</a>コマンドをインストールしておいた方がいいです。
ちなみに<a class="keyword" href="http://d.hatena.ne.jp/keyword/ssh">ssh</a>と同じようにMSYSにパッケージが入っています。</p>

<h1>参考URL</h1>

<ul>
<li><a href="http://heroween.hateblo.jp/entry/2014/06/06/203440">Windows7にmingw-getでMSYSのsshとrsyncをインストールする</a></li>
</ul>


-----
COMMENT:
AUTHOR: 名無しさん
IP: 202.229.251.133
DATE: 04/12/2017 19:51:21
なぜかぼくは

>MinGW Install Managerを開いて右側にあ
>るMSYSをクリックするとMSYSのパッケー
>ジがリストで表示されます

この部分がなかったので、 mingw install manager の mingw-base を選んだのと同じ欄にある msys-base も選択してインストールしたらうまくいきました
-----
--------
AUTHOR: arakaji-yuu
TITLE: 非エンジニアに説明する、Vagrantとはなにか
BASENAME: 2015/06/04/105756
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 06/04/2015 10:57:56
-----
BODY:
<h1>はじめに</h1>

<p>現在プロジェクトはエンジニア自分一人で開発していて開発環境に<a class="keyword" href="http://d.hatena.ne.jp/keyword/Vagrant">Vagrant</a>を使用しているのですが、この度<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DE%A1%BC%A5%AF%A5%A2%A5%C3%A5%D7">マークアップ</a>やデザイナーが参加してくれることになりました。</p>

<p>開発環境に<a class="keyword" href="http://d.hatena.ne.jp/keyword/Vagrant">Vagrant</a>を利用しているので<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DE%A1%BC%A5%AF%A5%A2%A5%C3%A5%D7">マークアップ</a>やデザイナーにも使ってもらうつもりなのですが、いままで彼らはXamppで開発していて<a class="keyword" href="http://d.hatena.ne.jp/keyword/Vagrant">Vagrant</a>は初めてなので、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Vagrant">Vagrant</a>とはなにか、なぜ<a class="keyword" href="http://d.hatena.ne.jp/keyword/Vagrant">Vagrant</a>を使うのかについて説明できるようにまとめておきたいと思う。</p>

<p>理想は、「とりあえずこのエントリー読んでみて」で伝わるように出来れば嬉しいです。</p>

<h1><a class="keyword" href="http://d.hatena.ne.jp/keyword/Vagrant">Vagrant</a>とはなにか</h1>

<h1>参考URL</h1>

<p><a href="https://www.vagrantup.com/">Vagrant公式サイト</a></p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: なぜ自分はプログラマーになったのか
BASENAME: 2015/06/01/233938
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 06/01/2015 23:39:38
-----
BODY:
<h1>はじめに</h1>

<h1><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DE%A1%BC">プログラマー</a>になろうと思ったきっかけ</h1>

<h1></h1>

-----
--------
AUTHOR: arakaji-yuu
TITLE: 生のHTMLを書くことが辛くなってきた。 
BASENAME: 2015/05/23/234649
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 05/23/2015 23:46:49
-----
BODY:
<p>自分はWebアプリケーションエンジニアで、 １年程前まではサーバーサイドを<a class="keyword" href="http://d.hatena.ne.jp/keyword/PHP">PHP</a>で書いていたのでその延長でHTMLを書くことには特に何も思うことはありませんでした。</p>

<p>ただこの一年ぐらいはサーバーサイドにRubyonRailsを採用して<a href="http://slim-lang.com/">Slim</a>というテンプレートエンジンを使っています。
SlimというのはHTMLをもっと簡易的にかける<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB">ツール</a>で、例えば以下のようなHTMLを</p>

<pre class="code lang-html" data-lang="html" data-unlink>
<span class="synComment">&lt;!DOCTYPE html&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">html</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">head</span><span class="synIdentifier">&gt;</span>
<span class="synPreProc">    </span><span class="synIdentifier">&lt;</span><span class="synStatement">meta</span><span class="synIdentifier"> </span><span class="synType">charset</span><span class="synIdentifier">=</span><span class="synConstant">&quot;utf-8&quot;</span><span class="synIdentifier"> /&gt;</span>
<span class="synPreProc">    </span><span class="synIdentifier">&lt;</span><span class="synStatement">title</span><span class="synIdentifier">&gt;</span>Sample File<span class="synIdentifier">&lt;/</span><span class="synStatement">title</span><span class="synIdentifier">&gt;</span>
<span class="synPreProc">  </span><span class="synIdentifier">&lt;/</span><span class="synStatement">head</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">body</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;sample&quot;</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;contents&quot;</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>Sample File<span class="synIdentifier">&lt;/</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">img</span><span class="synIdentifier"> </span><span class="synType">alt</span><span class="synIdentifier">=</span><span class="synConstant">&quot;yterajima&quot;</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;http://www.e2esound.com/images/yterajima.jpg&quot;</span><span class="synIdentifier"> /&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>テキストテキストテキスト<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>テキストテキストテキスト
        テキストテキストテキスト<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">body</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">html</span><span class="synIdentifier">&gt;</span>
</pre>


<p>以下のように簡易記法でかけます。</p>

<pre class="code lang-haml" data-lang="haml" data-unlink>doctype html
html
  head
    meta charset=<span class="synConstant">&quot;utf-8&quot;</span>
    title Sample File
  body.sample
    <span class="synSpecial">#</span><span class="synIdentifier">contents</span>
      h1 Sample File

      img src=<span class="synConstant">&quot;http://www.e2esound.com/images/yterajima.jpg&quot;</span> alt=<span class="synConstant">&quot;yterajima&quot;</span>

      p テキストテキストテキスト

      p
        | テキストテキストテキスト
          テキストテキストテキスト
</pre>


<p>もし興味があれば、slimの詳しい説明は<a href="http://slim-lang.com/">公式サイト</a>や<a href="http://qiita.com/yterajima/items/53fd0387279510ff082a">速習テンプレートSlim(HTML作成編)</a>を見ていただけるとよくわかるので参考にしてみてください。</p>

<p>一度Slimのようなテンプレートエンジンを使うと、書くコードが格段に減りますし、コードが減るので効率、可読性、メンテナンス性も格段に上がります。
その恩恵を受けると、生でHTMLが辛くなってくるんですよねーー。</p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: ActiveRecordに向きあおう！
BASENAME: 2015/05/09/131841
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 05/09/2015 12:46:23
-----
BODY:
<h1>概要</h1>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails</a>での開発を始めたばかりのとき、<a class="keyword" href="http://d.hatena.ne.jp/keyword/ActiveRecord">ActiveRecord</a>は単純に使う分には<a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a>が簡単でスムーズに入れるのですがちょっと凝ったことをやろうとすると「どうやるだっけ？」となることがよくあります。</p>

<p>なので、今回はそんな「どうやるんだっけ？」とか「これどういう意味なんだろう？」みたいな<a class="keyword" href="http://d.hatena.ne.jp/keyword/ActiveRecord">ActiveRecord</a>の使い方をまとめたいと思います。</p>

<h1>そもそも<a class="keyword" href="http://d.hatena.ne.jp/keyword/ActiveRecord">ActiveRecord</a>とはどういう意味?</h1>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails</a>でモデル層を構築するライブラリが<a class="keyword" href="http://d.hatena.ne.jp/keyword/ActiveRecord">ActiveRecord</a>という名前ですが、そもそも<a class="keyword" href="http://d.hatena.ne.jp/keyword/ActiveRecord">ActiveRecord</a>とは特定のライブラリの名前ではなく特定の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%B6%A5%A4%A5%F3%A5%D1%A5%BF%A1%BC%A5%F3">デザインパターン</a>の名前です。</p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: Page.js - クライアントルーティングライブラリ
BASENAME: 2015/05/09/130031
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 04/22/2015 10:31:45
CATEGORY: AbouTech
-----
BODY:
<h1>はじめに</h1>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Web%A5%B5%A1%BC%A5%D3%A5%B9">Webサービス</a>のフロントエンドでルーティングを行なうためのライブラリを探していて、どうやら<a href="http://visionmedia.github.io/page.js/">Page.js</a>が良さそうなので、まとめておきます。</p>

<h1>なぜルーティングライブラリを使うか</h1>

<p>そもそもなぜフロントエンドでルーティングライブラリを使うのか？</p>

<p>例えばあるページでのみ動作して欲しい処理があった場合、以下ような方法があると思います。
1. 必要な処理が記述されるJSをそのページでのみ読み込む
2. URLを見て動作する処理を分離する、もしくはコールバックを設置する</p>

<ol>
<li>の方法でも目的が果たせる場合が多いのですが、そうするとすべてのJSファイルを単一ファイルに圧縮して設置する場合や、SPAのように一度ユーザーがページを表示したらリロードを行わない場合には使えません。</li>
</ol>


<p>そのため最初は自前で2.の方法でdispatherを実装していたのですが、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C0%B5%B5%AC%C9%BD%B8%BD">正規表現</a>などが入って理解しづらくなってしまったのでもっと簡単に出来るルーティングのライブラリを探しました。</p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: 4月 - 7月期に何を行なうか?
BASENAME: 2015/04/14/211108
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 04/14/2015 21:11:08
-----
BODY:
<p>アラカキ: 師匠、自分は一流のエンジニアになって、素晴らしいサービスを開発し、大金持ちになるという目標があります！そのためになにをすればよいですか？</p>

<p>師匠: なるほどね〜、だいぶ大きな目標をもっているな笑 。そのために目標とプランを練らないといけないな。ちなみに君は仕事ではいまどんなプロジェクトをやっているんだい？</p>

<p>アラカキ: 6月中旬にリリース予定の</p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: フロントエンド開発にRailsアプリでもnodeのエコシステムを使うという選択
BASENAME: 2015/04/02/072228
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 04/02/2015 07:22:28
-----
BODY:
<h1>はじめに</h1>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails</a>ではデファルトでAsset Pipelineという機能により、SassやaltJs(<a class="keyword" href="http://d.hatena.ne.jp/keyword/CoffeeScript">CoffeeScript</a>やTypeScript)の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB">コンパイル</a>やファイルの結合、圧縮を行ってくれる機能があります。
なので通常はバックエンドを<a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails</a>で開発する場合はフロントエンドも<a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails</a>に沿って開発を行います。</p>

<p>最近自分がメイン開発者(というかほぼ一人?)として新<a class="keyword" href="http://d.hatena.ne.jp/keyword/Web%A5%B5%A1%BC%A5%D3%A5%B9">Webサービス</a>開発プロジェクトが始まり、バックエンドの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク</a>は<a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails</a>を使うことにしたのですが、様々な検討の結果フロントエンドは<a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails</a>のエコシステムではなく、nodeのエコシステムを使うことを選択しました。</p>

<p>振り返ったときにこの選択が正解だったのかどうかを確認するためにも、ここでなぜこの選択をおこなったのかをまとめておきたいと思います。</p>

<h1>依存性の管理にnpmを使いたい</h1>

<p>フロントエンド開発を生産的に行うに、当然様々なライブラリを扱います。</p>

<p>そのライブラリを管理するのに一番ベタな方法はライブラリのソースをダウンロードしてライブラリ用ディレクトリに設置することです。</p>

<p>そこから少し進化したのが、<a href="http://bower.io/">Bower</a>というパッケージ管理<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB">ツール</a>のbower.<a class="keyword" href="http://d.hatena.ne.jp/keyword/json">json</a>にアプリが依存しているライブラリを明記してインストールするようになりました。</p>

<p>ただ最近ではnodeが提供している標準のパッケージ管理システム npmを、そのままフロントエンド<a class="keyword" href="http://d.hatena.ne.jp/keyword/JavaScript">JavaScript</a>の依存性管理にも使えるようにする<a href="http://browserify.org/">browserify</a>という<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB">ツール</a>も使用されるようになっています。
このbrowserifyが優れもので、サーバサイドのnodeでライブラリを使用するときに行うrequire('module名')をフロントエンド<a class="keyword" href="http://d.hatena.ne.jp/keyword/JavaScript">JavaScript</a>の世界でも使えるようにしてくれます。</p>

<pre class="code" data-lang="" data-unlink>
var react = require(&#39;react&#39;)
</pre>


<p>あくまで私の観測範囲ですが、フロントエンドに関する記事やライブラリのREADMEなどを見ているとフロントエンド<a class="keyword" href="http://d.hatena.ne.jp/keyword/JavaScript">JavaScript</a>の世界での依存管理でもnpmを使うことが前提となっていく感じがしていて、それが出来ないがために何かを行うときに無駄にハマってしまう予感がしています。</p>

<h1>他チーム、他プロジェクトへノウハウの共有がしやすい</h1>

<p>フロントエンド開発は高度化、複雑化しており、上記にあげた依存性の管理の他にもSassやAltJSの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB">コンパイル</a>や圧縮、結合、ライブラリの選定や設計など様々な問題を解決しなければなりません。
これらを<a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails</a>エコシステムにのった方法で解決しても、その知識は他の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク</a>を利用したプロジェクトやチームと共有できません。</p>

<p>うちの会社で行われる開発で<a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails</a>を選択するのは私がメンバーに入るときぐらいで、他の場合は<a class="keyword" href="http://d.hatena.ne.jp/keyword/CakePHP">CakePHP</a>やほとんどバックエンドが必要ないWebサイトの制作が大多数を占めています。</p>

<p>自分が学んだ知識を他のチームとお互いに共有したり、また他のチームの開発に入った時に自分がスムーズにヘルプできるようにし、会社全体でのフロントエンド開発の生産性を高めるためにもフロントエンド開発ではnodeのエコシステムに乗るべきだと判断しました。</p>

<h1>おわりに</h1>

<p>今回のプロジェクトではサービスの企画立案から、開発に関わる技術選択、実際の開発まですべてに関わることができるのですが、あらためて「どの技術を選択するか」を考えることの難しさと面白さを感じました。</p>

<p>良い技術選択を行えば、開発者のモチベーションアップや生産性アップにもつながれば、その逆に陥ることもあります。</p>

<p>今回意識したのは「１年後の当たり前になっているか」ということで、1年後はいま以上にフロントエンド開発のnode前提は加速すると予測し、この選択を行いました。</p>

<p>この選択によって、このブログにフロントエンド界隈のポストが増えてくると思います^^*</p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: chefに疲れたあなたにはItamaeがおすすめ！
BASENAME: 2015/03/26/082247
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 03/26/2015 08:22:47
-----
BODY:
<h1>chef使うのめんどくさくないですか？</h1>

<p>私はいままでサーバーの設定を自動化するための<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB">ツール</a>にchefを使っていました。
最初chefを使い始めた時は、いままで手作業でやっていたことがコード化・自動化できるので「お、便利ー！chef最高！」という感じだったのですが、
だんだん使っていくうちにchefが高機能が故に自分の用途としては使うのが辛くなってきました。</p>

<h2>そもそも自分はchef soloしか使わない</h2>

<p>chef は基本的にはchef-server - chef-client という構成で、設定を自動で行いたいサーバーに対してchef-clientをインストールします。
そして対象のサーバーの設定をコード化したrecipeを保持するchef-serverとchef-clientが通信して対象サーバーにrecipeを適応します。</p>

<p>このchef-serverを立てずにchef-clientだけでサーバーの設定を自動化するchef-soloという機能があり、それは自分の手元のマシンから<a class="keyword" href="http://d.hatena.ne.jp/keyword/SSH">SSH</a>経由でchef-clientにrecipeを送信・適応させるのですが自分の場合はそもそもこれしか使っていません。</p>

<p>管理しているサーバーが何十台もあって常に稼働している場合はchef-serverがあって自動でrecipeを適応させる機能も価値があるかもしれないですが、自分の場合は管理対象のサーバーがそもそも多くないからです。</p>

<h2>覚えることが多過ぎる</h2>

<p>一つのサーバーの設定を管理するchefの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EC%A5%DD%A5%B8%A5%C8%A5%EA">レポジトリ</a>を作るためにchefだけでなくなく、コミュニティが作ったrecipeの依存管理をするBerkshelf、chef-soloを使うための<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%DE%A5%F3%A5%C9%A5%E9%A5%A4%A5%F3">コマンドライン</a><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB">ツール</a>knife-soloなど、なんだかんだで必要な<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB">ツール</a>を覚えるために結構な学習コストがかかります。</p>

<h2>最近はchef-soloではなく、chef-zeroだと言い出している</h2>

<p>自分はそもそもchef-soloしか使っていないのに、そのchef-soloが終わりchef-zeroを使って欲しいそうです。</p>

<p>詳しい内容は以下のブログを参照してください。</p>

<p><a href="https://www.getchef.com/blog/2014/06/24/from-solo-to-zero-migrating-to-chef-client-local-mode/">From Solo to Zero: Migrating to Chef Client Local Mode | Chef Blog</a></p>

<p>いまからまた新しいchef-zeroとかのプラクティスを学ぶのが辛いです。。。</p>

<h2>もっとシンプルな<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB">ツール</a>が欲しい！</h2>

<p>chefは大規模にサーバーを管理している人にとっては学習コストに見合うメリットがある<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB">ツール</a>なはずだけど 、自分にとって<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AA%A1%BC%A5%D0%A1%BC%A5%B9%A5%DA%A5%C3%A5%AF">オーバースペック</a>過ぎました。
もっと単純に、ホストマシンでコマンド実行したら対象サーバーにrecipeを適応するだけの、シンプルな<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB">ツール</a>が欲しいと思って調査し始めました。</p>

<h1><a href="https://github.com/itamae-kitchen/itamae">Itamae</a>はシンプルで使いやすい！</h1>

<p>Itamaeはchefのような<a class="keyword" href="http://d.hatena.ne.jp/keyword/DSL">DSL</a>で、 よりシンプルな機能だけを実装した<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB">ツール</a>です。</p>

<p>たとえば、以下のように<a class="keyword" href="http://d.hatena.ne.jp/keyword/httpd">httpd</a>をインストールするrecipeを作成します。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink>package <span class="synSpecial">'</span><span class="synConstant">httpd</span><span class="synSpecial">'</span> <span class="synStatement">do</span>
  action <span class="synConstant">:install</span>
<span class="synStatement">end</span>
</pre>


<p>このrecipeを対象サーバーに適応するには以下のコマンドを実行します。</p>

<pre class="code" data-lang="" data-unlink>$ itamae ssh -h 192.168.10.10 -p 22 -u user -i /path/to/private_key recipe.rb</pre>


<p>オプションが多いですが、やっていることは明白で-h で対象サーバーのホストを指定し、-pでポートを指定、-uで接続ユーザーを指定、-i で<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C8%EB%CC%A9%B8%B0">秘密鍵</a>を指定、最後に適応させるrecipeファイルを指定します。</p>

<p>chefのようにnodeによって値を変えたい場合は、以下のように-jオプションで利用する<a class="keyword" href="http://d.hatena.ne.jp/keyword/json">json</a>ファイルを指定すればいいだけです。</p>

<pre class="code" data-lang="" data-unlink>$ itamae ssh -j node.json -h 192.168.10.10 -p 22 -u user -i /path/to/private_key recipe.rb</pre>


<p>ちゃんと知りたい場合は<a class="keyword" href="http://d.hatena.ne.jp/keyword/Github">Github</a><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EC%A5%DD%A5%B8%A5%C8%A5%EA">レポジトリ</a>の<a href="https://github.com/itamae-kitchen/itamae/wiki">wiki</a>を見れば、推奨されるベストプラクティスから使い方までちゃんと記載されていますし、量も少ないのですぐに使えるレベルまで学習できます。</p>

<p>自分のようなchefに疲れた人にとって、itamaeはchefで学んだ知識もある程度活かせ、かつ簡単に使えるベストな<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB">ツール</a>です！</p>

<p>さらに嬉しいのはchefは対象サーバーに<a class="keyword" href="http://d.hatena.ne.jp/keyword/ruby">ruby</a> + chefをインストールしないといけないですが、itamaeはその必要もないのです。</p>

<p>もし他にもchefに疲れた人がいらっしゃれば、ぜひ<a href="https://github.com/itamae-kitchen/itamae">itamae</a>をオススメします。</p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: Vagrant、chef、 Dockerって最近よく聞くけどなにが違うの？ 
BASENAME: 2015/02/11/145520
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 02/11/2015 14:55:20
-----
BODY:
<h1>はじめに</h1>

<p> 先日うちの会社のアルバイトに来てくれている大学生さんに 「<a class="keyword" href="http://d.hatena.ne.jp/keyword/Vagrant">Vagrant</a>, chef, DockerってよくWebで記事を読むんですけど使っている文脈が似ていて、何が違っていてどう使い分けるのかよくわからないんですよね〜」という風に尋ねられました。</p>

<p>その時に彼にも口頭で説明はしたのですが、うまく説明出来たのか自分でも怪しかったので今回まとめてみたいと思います。</p>

<h1><a class="keyword" href="http://d.hatena.ne.jp/keyword/Vagrant">Vagrant</a>とは</h1>

<p> <a class="keyword" href="http://d.hatena.ne.jp/keyword/Vagrant">Vagrant</a>について、 <a class="keyword" href="http://d.hatena.ne.jp/keyword/Vagrant">Vagrant</a>日本語ドキュメントには以下のように説明されています。</p>

<blockquote><p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Vagrant">Vagrant</a>は、 あなたとあなたのチームの生産性/柔軟性を最大限にする手助けをするために、 簡単な環境設定/複製可能なマシン/<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B6%C8%B3%A6%C9%B8%BD%E0">業界標準</a>の技術で構築された１つの一貫したワークフローによって制御される可搬的な開発環境を提供します。</p>

<p>その恩恵を得る為に、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Vagrant">Vagrant</a>は先人の知見に基づいています。 マシン(開発環境のマシン)は、ViretualBox, <a class="keyword" href="http://d.hatena.ne.jp/keyword/VMWare">VMWare</a>, <a class="keyword" href="http://d.hatena.ne.jp/keyword/AWS">AWS</a>, そのほかのプロバイダにより提供されます。 そして、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B7%A5%A7%A5%EB%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8">シェルスクリプト</a>/Chef/Puppet といった<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B6%C8%B3%A6%C9%B8%BD%E0">業界標準</a>的に提供されている<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB">ツール</a>類は、 マシン上のソフトウェアを自動的にインストール/設定するために使用されます 。</p></blockquote>

<p>ざっくりいうと<a class="keyword" href="http://d.hatena.ne.jp/keyword/Vagrant">Vagrant</a>とは仮想環境の設定・操作用統一<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB">ツール</a>です。</p>

<p>いままで開発用の仮想環境を作成しようとすると仮想環境用<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB">ツール</a> (<a class="keyword" href="http://d.hatena.ne.jp/keyword/VirtualBox">VirtualBox</a>や<a class="keyword" href="http://d.hatena.ne.jp/keyword/VMWare">VMWare</a>など)を使い、OSのイメージをダウンロード・インストール、初期設定などをいろいろ行って初めて仮想環境が構築できます。</p>

<p>しかしそれをチームメンバーそれぞれが行うことでOSのバージョンの違い、仮想環境<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB">ツール</a>の違い、仮想環境<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB">ツール</a>の設定の違いなどが発生してしまい、みんなが同じ環境で開発を行うことが難しく手間がかかる作業でした。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Vagrant">Vagrant</a>を使う場合 、それらの仮想環境の設定がすべて<strong>Vagrantfile</strong>という設定ファイルに記述され、 仮想環境の操作も<strong><a class="keyword" href="http://d.hatena.ne.jp/keyword/vagrant">vagrant</a></strong>という<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%DE%A5%F3%A5%C9%A5%E9%A5%A4%A5%F3">コマンドライン</a><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB">ツール</a>経由で行います。</p>

<p>仮想環境の設定が<strong>Vagrantfile</strong>経由で行われるため、チームメンバーに同じ環境を構築してほしい場合はその<strong>Vagrantfile</strong>を使ってその人も同じように<a class="keyword" href="http://d.hatena.ne.jp/keyword/vagrant">vagrant</a>経由で仮想環境を起動すると同一の環境が簡単に手に入るということです。</p>

<p>他にも<a class="keyword" href="http://d.hatena.ne.jp/keyword/Vagrant">Vagrant</a>ではホストマシンとゲストマシン (<a class="keyword" href="http://d.hatena.ne.jp/keyword/Vagrant">Vagrant</a>で作成した仮想環境)の指定したディレクトリを同期する機能がデフォルトで簡単に利用できるため、いままで<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B2%BE%C1%DB%A5%DE%A5%B7%A5%F3">仮想マシン</a>で開発を行っていた ローカルでファイル編集  => 仮想環境にアップ  => 仮想環境内で実行　というフローが ローカルでファイル編集=> 仮想環境で実行  という風に簡略化できます。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Vagrant">Vagrant</a>はローカルマシンに構築する仮想環境の他にも<a class="keyword" href="http://d.hatena.ne.jp/keyword/AWS">AWS</a>のEC2を<a class="keyword" href="http://d.hatena.ne.jp/keyword/vagrant">vagrant</a>コマンドでコントロールすることも可能ですが、個人的には本番環境と開発環境を同じ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB">ツール</a>で簡単に操作できるのは少し怖いところもあるので、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Vagrant">Vagrant</a>はあくまで開発環境の構築&amp;操作<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB">ツール</a>として利用しています。</p>

<h1>chefとは</h1>

<p>chefについて、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%40IT">@IT</a>の記事では以下のように説明されています。</p>

<blockquote><p>「Chef」とは、システム構築を自動化するためのソフトウェア<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB">ツール</a>あるいは枠組み（<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク</a>）の一種。システムの各種設定を変更したり、アプリケーションや<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DF%A5%C9%A5%EB%A5%A6%A5%A7%A5%A2">ミドルウェア</a>、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8">コンポーネント</a>などのソフトウェアをインストールしたりする作業を自動化できる。<a class="keyword" href="http://d.hatena.ne.jp/keyword/Windows">Windows</a>や<a class="keyword" href="http://d.hatena.ne.jp/keyword/Linux">Linux</a>、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Mac%20OS%20X">Mac OS X</a>など<a class="keyword" href="http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4">複数</a>のプラットフォームに対応している。</p></blockquote>

<p>chefはざっくりいうとサーバー設定<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB">ツール</a>です。</p>

<p>例えば<a class="keyword" href="http://d.hatena.ne.jp/keyword/PHP">PHP</a>をつかったWebアプリケーションを動作させるためのサーバーを設定しよう思うとWebサーバーとして<a class="keyword" href="http://d.hatena.ne.jp/keyword/Apache">Apache</a>をインストールし、<a class="keyword" href="http://d.hatena.ne.jp/keyword/PHP">PHP</a>をインストールし、DBを使うなら<a class="keyword" href="http://d.hatena.ne.jp/keyword/MySQL">MySQL</a>などをインストールします。もちろんサーバーの構築はこれだけでは終わらず、セキュリティ用にネットワークの設定をいれたり、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB">ツール</a>をインストールしたり、インストールした<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB">ツール</a>群の設定などもそれぞれ行う必要があります。</p>

<p>サーバーの設定を行うのが一台だけならまだ良いのですが、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%BE%E9%C4%B9%B2%BD">冗長化</a>するために<a class="keyword" href="http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4">複数</a>台サーバーを立てる場合に すべて手作業で行うのは効率が悪いのでそれらの設定作業をプログラミングで自動化しようというのがchefの役割です。</p>

<p>他にもchefは冪等性(何回実行しても結果は同じ)という特徴をもっているため、すでに稼働しているサーバーに対して実行しても環境を壊すことなくchefで記述した環境に収束させます。</p>

<p>そのためchefのコードを見るだけでサーバーの現在の状態が把握できるドキュメントの役割も果たしてくれます。</p>

<h1>Dockerとは</h1>

<p>Dockerについて、またまた<a class="keyword" href="http://d.hatena.ne.jp/keyword/%40IT">@IT</a>さんの記事では以下のように説明しています。</p>

<blockquote><p>「Docker」とは、Docker社（旧dotCloud）が開発する<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AA%A1%BC%A5%D7%A5%F3%A5%BD%A1%BC%A5%B9">オープンソース</a>の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%C6%A5%CA%A1%BC">コンテナー</a>管理ソフトウェアの1つです。</p></blockquote>

<p>上記の説明で記載している通りDockerは<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%C6%A5%CA%A1%BC">コンテナー</a>管理の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB">ツール</a>であるため、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%C6%A5%CA%A1%BC">コンテナー</a>型仮想化技術と強く紐付いています。</p>

<p>仮想化にはホスト型、 ハイパーバイザー型、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%C6%A5%CA%A1%BC">コンテナー</a>型と幾つか種類があり、上記で説明した<a class="keyword" href="http://d.hatena.ne.jp/keyword/Vagrant">Vagrant</a>で使用している<a class="keyword" href="http://d.hatena.ne.jp/keyword/VirtualBox">VirtualBox</a>が行う仮想化はホスト型、<a class="keyword" href="http://d.hatena.ne.jp/keyword/AWS">AWS</a>の EC2やさくら<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%A6%A5%C9">クラウド</a>など<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%A6%A5%C9">クラウド</a>サービスなどで使われる仮想化はハイパーバイザー型の仮想化です。</p>

<p>それぞれの仮想化技術の詳細については長くなるため省略しますが、 <a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%C6%A5%CA%A1%BC">コンテナー</a>型と他の仮想化との違いはその軽さです。</p>

<p>他の仮想化技術は仮想的な「物理マシン」を作りだすというアプローチのため、物理マシンの上の仮想空間に独自の<a class="keyword" href="http://d.hatena.ne.jp/keyword/Linux">Linux</a><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AB%A1%BC%A5%CD%A5%EB">カーネル</a>やOSなどをインストールしますが、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%C6%A5%CA%A1%BC">コンテナー</a>型では物理マシンの<a class="keyword" href="http://d.hatena.ne.jp/keyword/Linux">Linux</a><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AB%A1%BC%A5%CD%A5%EB">カーネル</a>は共有して、別々のユーザー空間を作り出すというアプローチを取っています。</p>

<p>Dockerでは<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%C6%A5%CA%A1%BC">コンテナー</a>型で作られた仮想環境をDockerfileという設定<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB">ツール</a>を使って設定を入れ込んでいきます。
それによってそのDockerfileを使えば同じ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%C6%A5%CA%A1%BC">コンテナー</a>型の仮想環境が作成できます。</p>

<h1>それぞれの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB">ツール</a>の関係</h1>

<h2><a class="keyword" href="http://d.hatena.ne.jp/keyword/vagrant">vagrant</a> &amp; chef</h2>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/vagrant">vagrant</a>とchefはとくに一緒に語れることが多いので混同されやすいのですが、<a class="keyword" href="http://d.hatena.ne.jp/keyword/vagrant">vagrant</a>は仮想環境の操作・設定<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB">ツール</a>でchefはサーバー設定<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB">ツール</a>です。
よく使われるパターンだと<a class="keyword" href="http://d.hatena.ne.jp/keyword/vagrant">vagrant</a>で作った仮想環境をWebアプリケーションが動作できるようにするためにchefで設定を入れる、のような感じです。</p>

<p>「Vagrantfileでもサーバーの設定を入れる」と思ってしまうときがあるのですが、Vagrantfileではサーバーの設定を入れるために<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B7%A5%A7%A5%EB%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8">シェルスクリプト</a>を使おうがchefを使おうがどちらでも構いません。 Vagrantfileで行うのは「このコマンドを使ってサーバーの設定をおこなう」という入り口を提供してくれているだけで、その設定<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB">ツール</a>の選択肢のひとつとしてchefがあるという関係です。</p>

<h2><a class="keyword" href="http://d.hatena.ne.jp/keyword/vagrant">vagrant</a> &amp; Docker</h2>

<p>まったく関係ありません。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/vagrant">vagrant</a>は仮想ハイパーバイザー型やホスト型仮想化<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB">ツール</a>を通して仮想環境を操作するのに対して、Dockerは<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%C6%A5%CA%A1%BC">コンテナー</a>型の仮想環境を操作します。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E6%A1%BC%A5%B9%A5%B1%A1%BC%A5%B9">ユースケース</a>が似ているため混同されるかもしれないですが、お互い対象としている仮想化技術が違うため組み合わせて使うことはまずないと思われます。</p>

<h2>chef &amp; Docker</h2>

<p>組み合わせて使うことも可能ですが、あまりメリットがないかもしれません。</p>

<p>chefはサーバーを構築する際にその対象となる環境で<a class="keyword" href="http://d.hatena.ne.jp/keyword/ruby">ruby</a>とchefが実行できればサーバー設定を行うことが可能なので、Dockerで作った<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%C6%A5%CA%A1%BC">コンテナー</a>型仮想環境でも設定の自動化のために使用することは可能です。</p>

<p>ただDocker自体にDockerfileというサーバーの設定を記述して自動化する機能を提供しているため、それをchefに置き換える必要があまりありません(既存のchefの資産が生かせるというメリットはありますが・・)</p>

<p>さらにDockerで作成する<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%C6%A5%CA%A1%BC">コンテナー</a>型仮想化技術はプロセス内でその仮想環境が構築され、そのプロセスを消すと仮想環境自体もなくなるため基本的には毎回一からDockerfileを使って仮想環境を構築することになります。
chefのメリットのひとつに冪等性がありますが、それが有効なのはすでにchefによってサーバーの設定が入っているところに何度も実行しても環境が同じであることを保証したいからです。
Dockerのように毎回一から作成する環境の場合は何度も実行することがそもそもないので冪等性は不要になります。</p>

<p>なのでDockerを使うのであればサーバーの設定もchefを使わずDockerで完結させる方が適切でしょう。</p>

<h1>終わりに</h1>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Vagrant">Vagrant</a>, chef, Dockerがまだわからない人にざっくりとした説明ができるようにこの記事を書いてみました。</p>

<p>本当はDockerの使いどころなども必要なので書きたいと思ったのですが、体力が尽きたのとそんな記事はいくらでもあるのと、何よりまだ自分が仕事で使っていないという理由で書くのは省略しちゃいました >&lt;</p>

<p>Web開発の現場だとほとんど<a class="keyword" href="http://d.hatena.ne.jp/keyword/Vagrant">Vagrant</a>とchefに類似するサーバー設定<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB">ツール</a>(Puppet, Ansibleなど)は使うのはもうスタンダードになっていて、Dockerはまだこれからだが確実にスタンダードになる技術っていう感じだと思います。</p>

<p>Dockerを使う場合はアプリケーションの設計自体も変更が必要になる大きな変化なので、しっかりとキャッチアップしておきたいな。</p>

<h1>参考URL</h1>

<p><a href="http://lab.raqda.com/vagrant/why-vagrant/index.html">Vagrant&#x3092;&#x4F7F;&#x3046;&#x7406;&#x7531; | Vagrant&#x65E5;&#x672C;&#x8A9E;&#x30C9;&#x30AD;&#x30E5;&#x30E1;&#x30F3;&#x30C8;</a></p>

<p><a href="http://www.atmarkit.co.jp/ait/articles/1408/11/news113.html">Windows Insider&#x7528;&#x8A9E;&#x89E3;&#x8AAC;&#xFF1A;Windows&#xFF0F;Linux&#x3067;&#x4F7F;&#x3048;&#x308B;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x69CB;&#x7BC9;&#x30FB;&#x8A2D;&#x5B9A;&#x306E;&#x81EA;&#x52D5;&#x5316;&#x30C4;&#x30FC;&#x30EB;&#x300C;Chef&#x300D;&#x3068;&#x306F;&#xFF1F; - &#xFF20;IT</a></p>

<p><a href="http://www.atmarkit.co.jp/ait/articles/1405/16/news032.html">&#x3044;&#x307E;&#x3055;&#x3089;&#x805E;&#x3051;&#x306A;&#x3044;Docker&#x5165;&#x9580;&#xFF08;1&#xFF09;&#xFF1A;&#x30A2;&#x30D7;&#x30EA;&#x958B;&#x767A;&#x8005;&#x3082;&#x30A4;&#x30F3;&#x30D5;&#x30E9;&#x7BA1;&#x7406;&#x8005;&#x3082;&#x77E5;&#x3063;&#x3066;&#x304A;&#x304D;&#x305F;&#x3044;Docker&#x306E;&#x57FA;&#x790E;&#x77E5;&#x8B58; - &#xFF20;IT</a></p>

-----
COMMENT:
AUTHOR: root_jp
IP: 113.37.173.113
DATE: 08/24/2017 10:49:18
とても分かりやすい説明でした。
曖昧だった部分が分かった気がします。
ありがとうございます！
-----
--------
AUTHOR: arakaji-yuu
TITLE: kumadori というgemを公開しました。
BASENAME: 2015/02/07/134941
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 02/07/2015 13:49:41
-----
BODY:
<h1>はじめに</h1>

<p>仕事で<a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby</a>を使うようになってから5ヶ月程、前々から自分のgemをつくって公開したいと考えていました。</p>

<p>非常に小さい単機能のgemですが、今回はじめて自作gemを作って公開できたのでそのご報告をしたいと思います。</p>

<h1>kumadoriとはなにか？</h1>

<p><a href="https://github.com/Arakaki-Yuji/kumadori">kumadori</a>は<a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby</a>でデコレーターパターンをシンプルに実装するためのgemになります。</p>

<p>デコレーターパターンとはプログラミングの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%B6%A5%A4%A5%F3%A5%D1%A5%BF%A1%BC%A5%F3">デザインパターン</a>のひとつで、既存のオブジェクトにデコレーターオブジェクトをラップすることで柔軟にオブジェクトの機能拡張を行なうことが出来る手法です。</p>

<p>kumadoriという名前ですが、歌舞伎の化粧のことを隈取(くまどり)ということから命名しました。</p>

<p>個人的にソフトウェアの名前に日本語が使われているのが結構好きなので、デコレーターを表すなんか良い感じの日本語ないかな〜って考えた所、
デコレーター -> 装飾者 -> おしゃれする -> 化粧 -> 歌舞伎の化粧を「隈取」という無理な連想ゲームでkumadoriという名前にしました。</p>

<h1>使い方</h1>

<p>kumadoriはデコレーションの対象となる<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス</a>のClass名によって自動的に使用するDecoratorクラスを決定します。</p>

<p>例えばUserクラスの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス</a>をデコレーションするのはUserDecoratorクラス、Animalクラスの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス</a>のデコレーションを行なうのはAnimalDecoratorクラスのような感じになります。
そのため、使用するDecoratorクラスを予めKumadori::BaseDecoratorクラスを継承して定義して下さい。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス</a>をデコレーションするときはKumadori.decorate(instance)<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9">メソッド</a>を使います。</p>

<p>以下に参考コードを記載します。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink>
<span class="synComment">#</span>
<span class="synComment"># Basic ruby class.</span>
<span class="synComment">#</span>
<span class="synPreProc">class</span> <span class="synType">User</span>
  attr_accesstor <span class="synConstant">:first_name</span>, <span class="synConstant">:last_name</span>

  <span class="synPreProc">def</span> <span class="synIdentifier">initialize</span>(first_name, last_name)
    <span class="synConstant">self</span>.first_name = first_name
    <span class="synConstant">self</span>.last_name  = last_name
  <span class="synPreProc">end</span>
<span class="synPreProc">end</span>

<span class="synComment">#</span>
<span class="synComment"># Decorator class for User instance.</span>
<span class="synComment">#</span>
<span class="synPreProc">class</span> <span class="synType">UserDecorator</span> &lt; <span class="synType">Kumadori</span>::<span class="synType">BaseDecorator</span>
  <span class="synPreProc">def</span> <span class="synIdentifier">full_name</span>
    <span class="synSpecial">&quot;#{</span><span class="synConstant">self</span>.last_name<span class="synSpecial">}</span><span class="synConstant"> </span><span class="synSpecial">#{</span><span class="synConstant">self</span>.first_name<span class="synSpecial">}&quot;</span>
  <span class="synPreProc">end</span>
<span class="synPreProc">end</span>

user = <span class="synType">User</span>.new(<span class="synSpecial">'</span><span class="synConstant">Yuji</span><span class="synSpecial">'</span>, <span class="synSpecial">'</span><span class="synConstant">Arakaki</span><span class="synSpecial">'</span>)

<span class="synComment"># user instance decorated by UserDecorator</span>
decorated_user = <span class="synType">Kumadori</span>.decorate(user)

decorated_user.full_name <span class="synComment"># =&gt; &quot;Arakaki Yuji&quot;</span>
</pre>


<p>もしデコレーションする<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス</a>に該当するDecoratorクラスがない場合、Kumadori::BaseDecoratorクラスによってデコレーションされます。</p>

<p>そのため、もしどのオブジェクトにも共通して追加させたい<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9">メソッド</a>などがあれば、Kumadori::BaseDecoratorクラスをOverrideして定義してください。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink>
<span class="synPreProc">class</span> <span class="synType">Animal</span>
<span class="synPreProc">end</span>

<span class="synPreProc">module</span> <span class="synType">Kumadori</span>
  <span class="synPreProc">class</span> <span class="synType">BaseDecorator</span> &lt; ::<span class="synType">SimpleDelegator</span>
    <span class="synPreProc">def</span> <span class="synIdentifier">live?</span>
      <span class="synConstant">true</span>
    <span class="synPreProc">end</span>
  <span class="synPreProc">end</span>
<span class="synPreProc">end</span>

animal = <span class="synType">Animal</span>.new


<span class="synComment"># Because of AnimalDecorator class is not defiend,</span>
<span class="synComment"># it is decorated by Kumadori::BaseDecorator</span>
decorated_animal = <span class="synType">Kumadori</span>.decorate(animal)

decorated_animal.live? <span class="synComment"># =&gt; true</span>
</pre>


<p>配列などのCollection内に入っている各要素をすべてデコレーションしたい場合はKumadori.collection_decorate(collection)を使ってください。</p>

<p>Collection内に入っている要素をすべてデコレーションした新しいCollectionを返します。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink>members = []
members &lt;&lt; <span class="synType">User</span>.new(<span class="synSpecial">'</span><span class="synConstant">Kanoko</span><span class="synSpecial">'</span>, <span class="synSpecial">'</span><span class="synConstant">Higa</span><span class="synSpecial">'</span>)
members &lt;&lt; <span class="synType">User</span>.new(<span class="synSpecial">'</span><span class="synConstant">Ai</span><span class="synSpecial">'</span>, <span class="synSpecial">'</span><span class="synConstant">Kawasaki</span><span class="synSpecial">'</span>)
members &lt;&lt; <span class="synType">User</span>.new(<span class="synSpecial">'</span><span class="synConstant">Takeo</span><span class="synSpecial">'</span>, <span class="synSpecial">'</span><span class="synConstant">Kikuchi</span><span class="synSpecial">'</span>)

decorated_members = <span class="synType">Kumadori</span>.collection_decorate(members)

decorated_members.map{ |<span class="synIdentifier">user</span>| user.full_name} <span class="synComment"># =&gt; [&quot;Higa Kanoko&quot;, &quot;Kawasaki Ai&quot;, &quot;Kikuchi Takeo&quot;]</span>
</pre>


<h1>このGemの使いドコロ</h1>

<p>僕がこのGemを作ったのは、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails</a>でモデルに格納されているデータをフォーマットして表示する処理を定義するときに、表示に関する処理は<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3">ドメイン</a>ロジックではないのであまりモデル内には記載したくないが記述する良い場所がないのでDecoratorというレイヤーを作りたいと考えたからです。</p>

<p>Decoratorというレイヤーを入れることで、モデル記述していた表示に関する<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9">メソッド</a>が整理できるのでより見通しが良くなり、変更もDocoratorを変更すればモデル自体を変更せずに済むのでより柔軟性が高まります。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails</a>にDocoratorというレイヤーを導入するGemは<a href="https://github.com/amatsuda/active_decorator">active_decorator</a>や<a href="https://github.com/drapergem/draper">draper</a>という有名どころのgemもあるのですが、どちらも<a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails</a>の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3">プラグイン</a>になっているため<a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails</a>依存しない形式でデコレーターを簡単に使えるgemにすればすぐに実装出来るしより使いやすいと思ってkumadoriを作ってみました。(まあ、あとで調べるとそういうgemは山ほどあったのですが・・)</p>

<h1>おわりに</h1>

<p>超絶シンプルなgemですが、人生初の<a class="keyword" href="http://d.hatena.ne.jp/keyword/OSS">OSS</a>を公開したということでほんの少しテンションが上がっています^^</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/OSS">OSS</a>ということでコミットメッセージやREADMEも英語で書いたり、テストどれくらい書けば良いか考えたりして色々楽しかったです。</p>

<p>これからも小さいgemでも大きい<a class="keyword" href="http://d.hatena.ne.jp/keyword/Web%A5%B5%A1%BC%A5%D3%A5%B9">Webサービス</a>でも良いので色々開発して定期的にアウトプット出来るように頑張りますd^^</p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: kumadori というgemを公開しました！!
BASENAME: 2015/02/06/230907
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 02/06/2015 23:09:07
-----
BODY:
<h1>はじめに</h1>

<p>お仕事で<a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby</a>を使い始めて４ヶ月程になりましたが、前々から<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AA%A1%BC%A5%D7%A5%F3%A5%BD%A1%BC%A5%B9">オープンソース</a>のGemを作って公開したいと考えてました。</p>

<p>非常に小さい単機能ですが、<code>kumadori</code>というGemを初めて公開出来たのでご報告したいと思います(<em>^^</em>)</p>

<h1>kumadoriとは</h1>

<p>kumadoriは、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby</a>でデコレーターパターンを簡単に実装できるgemになります。</p>

<p>デコレーターパターンとはよく使われる<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%B6%A5%A4%A5%F3%A5%D1%A5%BF%A1%BC%A5%F3">デザインパターン</a>のひとつで、既存のオブジェクトをDecoratorオブジェクトでラップすることによって既存のオブジェクトに機能を柔軟に追加することが出来るようになります。</p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: MacBookProのメモリを増設
BASENAME: 2015/02/05/233648
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 02/05/2015 23:36:48
-----
BODY:
いま仕事でMacBookProを使っているのですが、メモリが8GBあっても仮想環境立ち上げて<a class="keyword" href="http://d.hatena.ne.jp/keyword/Emacs">Emacs</a>使ってSourceTree使ってブラウザ立ち上げてってやっているとメモリが足りなくってたびたびフリーズ時間がやってきます。<div><br></div><div>その待ち時間が面倒なので、今回メモリを16GBに増設することになりました(*^^*)</div><div><br></div><h3>メモリ増設開始！</h3><div><br></div><div><div><img class="hatena-fotolife" title="f:id:arakaji-yuu:20150205232608j:plain" src="http://cdn-ak.f.st-hatena.com/images/fotolife/a/arakaji-yuu/20150205/20150205232608.jpg" alt="f:id:arakaji-yuu:20150205232608j:plain"></div></div><div><br></div><div>この<a class="keyword" href="http://d.hatena.ne.jp/keyword/Mac">Mac</a> Book Proを・・・・</div><div><br></div><div><br></div><div><br></div><div>ぱかっ！！！</div><div><br></div><div><div><img class="hatena-fotolife" title="f:id:arakaji-yuu:20150205232734j:plain" src="http://cdn-ak.f.st-hatena.com/images/fotolife/a/arakaji-yuu/20150205/20150205232734.jpg" alt="f:id:arakaji-yuu:20150205232734j:plain"></div></div><div><br></div><div><br></div><div>そしてメモリを取り外して、入れ替えて・・・</div><div><br></div><div><br></div><div>こう！！</div><div><br></div><div><div><img class="hatena-fotolife" title="f:id:arakaji-yuu:20150205232923j:plain" src="http://cdn-ak.f.st-hatena.com/images/fotolife/a/arakaji-yuu/20150205/20150205232923.jpg" alt="f:id:arakaji-yuu:20150205232923j:plain"></div></div><div><br></div><div><br></div><div>緑のメモリに入れ替わったのがわかるでしょうか^^?</div><div><br></div><div><br></div><div>電源を入れ直して確認すると見事に16GBになっていました(*^^*)</div><div><br></div><div>これで開発環境がさらに快適になります。</div><div><br></div><div><br></div><div>メモリを投資していただいたうちの上司に感謝しながら、爆速で開発していけるように明日からも頑張ります！</div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div>
-----
--------
AUTHOR: arakaji-yuu
TITLE: フレームワークなくとも秩序は成り立つ ~ フロントエンドJavaScript ~
BASENAME: 2015/02/05/003209
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 02/05/2015 00:32:09
-----
BODY:
<h1>はじめに</h1>

<p>いま開発しているWebアプリケーションでフロントエンドのJSを書こうとしているときに、以前の開発でAngularJSを使用していた経験があることもあり、自然にどの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク</a>を採用しようかと色々物色しておりました。</p>

<p>AngularJSの他にもEmberやKnockout, Backbornなど調査してみたんですが、どの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク</a>も「SPA」(シングルページアプリケーション)を作ることを前提に作られているようでした。</p>

<p>自分が開発中のアプリケーションはSPAではないし、AngularJSを採用したプロジェクトの時もバックエンドで採用している<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク</a>との相性とかで結構苦労したのでどうしようかな〜と考えて、っていうかフロントエンドMV*<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク</a>いる？って所から考えなおしてみました。</p>

<h1>フロントエンドMV*<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク</a>を使いたい理由</h1>

<p>もちろんチームやプロダクトの性質によると思いますが、僕が考えた上では</p>

<ol>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D3%A5%B8%A5%CD%A5%B9%A5%ED%A5%B8%A5%C3%A5%AF">ビジネスロジック</a>とプレゼンテーションを分離したい。</li>
<li>コードに構造を持たせて使い回ししやすく、見通しよくしたい。</li>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク</a>やライブラリの力で効率化したい。</li>
</ol>


<p>のような感じかな〜と思いました。</p>

<p>適当にJSでゴリゴリ書いちゃうとどのファイルに何があるかがわからずに見通しが悪くなるし、JSはUIをいじることに使われる特性上デザインの変更に対して対応出来ないといけないので変更ができるだけ簡単に行えるようにしておかないといけない。
さらにあわよくばデータ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%F3%A5%C7%A5%A3%A5%F3%A5%B0">バインディング</a>やフィルタやらの力を借りて効率よく開発したいって感じです。</p>

<h1>忘れちゃならない<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A5%EC%A1%BC%A5%C9%A5%AA%A5%D5">トレードオフ</a></h1>

<p>ただ、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク</a>の採用にはもちろん良いことだけでなく、以下のような<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A5%EC%A1%BC%A5%C9%A5%AA%A5%D5">トレードオフ</a>も存在します。</p>

<ol>
<li>学習コスト</li>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク</a>への依存</li>
</ol>


<h2>学習コスト</h2>

<p>その<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク</a>を使いこなせるようになるとどんどん開発効率が上がっていきます。</p>

<p>ただその<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク</a>を使いこなすまでにはその<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク</a>独特の概念や<a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a>を学習するのにそれなりの時間がかかり、さらにそれを使いこなすためにも時間がかかります。</p>

<p>さらに<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク</a>を使うと必ずその<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク</a>独特の問題などぶつかることも多く、それを解決するのに余計な時間がかかってしまう可能性も考慮する必要があります。</p>

<h2><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク</a>への依存</h2>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク</a>はあらゆるアプリケーションに使えるわけではなく、その<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク</a>が想定している<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E6%A1%BC%A5%B9%A5%B1%A1%BC%A5%B9">ユースケース</a>があります。
その<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E6%A1%BC%A5%B9%A5%B1%A1%BC%A5%B9">ユースケース</a>に沿って使えば効率良く開発が行えますが、そこから外れたことをやろうとすると余計なHackが必要になってしまいます。</p>

<p>そのため<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク</a>の選定を間違えると余計なコストがかかったり、わざわざ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク</a>に合わせたアプリケーションになってしまうという恐れもあります。</p>

<h1>必要ないなら使わない方が良い</h1>

<p>今回私が行っているWebアプリケーション開発の状況は以下のような感じでした。</p>

<ul>
<li>このアプリケーション開発以外のプロジェクトもやってる</li>
<li>アプリケーションはSPAじゃない</li>
<li>インフラ、バックエンド、フロントエンド、ネイティブアプリまで全てを担当するためフロントエンドの専任エンジニアはいない</li>
</ul>


<p>ざっくり言うと、「やることはたくさんあるから<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク</a>の選定ミスで余計なコストを掛けたくない！」っていう状況です。</p>

<p>その状況のなかで考えたときに</p>

<ul>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク</a>の機能での効率化は今回の場合学習コスト + 相性の悪さで多分チャラになる</li>
<li>でも見境なくJS書いてカオスにもしたくない。</li>
<li>自分である程度JSの構造化をすればいいんじゃね?</li>
</ul>


<p>っていうことになりました。</p>

<h1>おれおれのフロントエンドJS設計</h1>

<p>フロントエンド<a class="keyword" href="http://d.hatena.ne.jp/keyword/JavaScript">JavaScript</a>で書くコードをざっくり以下の様に分離します。</p>

<ul>
<li>Model: <a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D3%A5%B8%A5%CD%A5%B9%A5%ED%A5%B8%A5%C3%A5%AF">ビジネスロジック</a>の管理</li>
<li>Template: HTMLの生成</li>
<li>ViewModel: イベントハンドリングやデータフロー</li>
</ul>


<p>ディレクトリ構造は以下のような感じになります。</p>

<pre class="code" data-lang="" data-unlink>
├── javascripts
│   ├── models
│   │   └── user.js
│   ├── templates
│   │   └── errors_message_template.js
│   │   └── day_options_template.js
│   └── viewmodels
│       ├── profile_viewmodel.js
│       └── top_viewmodel.js
</pre>


<h2>Model (<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D3%A5%B8%A5%CD%A5%B9%A5%ED%A5%B8%A5%C3%A5%AF">ビジネスロジック</a>)</h2>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/MVC">MVC</a><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク</a>でもモデルと呼ばれ 、アプリケーション特有のロジックを入れるレイヤーです。
たとえばユーザープロフィールの登録ページを実装する場合、Userというモデルオブジェクトを作り、そこにバリデーションの条件やバックエンドの<a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a>との通信などのコードを書きます。</p>

<p>ここにあるコードはデザインとの結びつきがなく、どのページでも使いまわせるようにしておきます。</p>

<p>参考コードとして下記のUserモデルをのせておきます。</p>

<pre class="code" data-lang="" data-unlink>
function User(name, email, job) {
   var self = this;
   self.name = name:
   self.email = email;
   self.job    = job

   self.nameIsBlank = function(){
      self.name.length === 0;
   }

}
</pre>


<h2>Template(HTMLの生成)</h2>

<p>入力フォームをチェックしてエラーメッセージを表示したり、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Ajax">Ajax</a>やユーザーのアクションに反応して変化するHTMLを生成するコードです。
例えば日付に関する入力フォームで年、月、日のセレクトボックスがある場合、年、月が変更されると日のセレクトボックスのoptionタグはその月にある日の数に合わせて変化しないといけません（8月なら31個、2月なら28個のように）。</p>

<p>それを実現するために年と月の値からoptionタグを必要な数だけ生成するコードを書きます。</p>

<p>ここは同じようなHTMLが必要な箇所があれば上手く使いまわせるように引数によって動的な値を管理します。</p>

<p>以下に年と月を引数に受け取って必要なoptionタグを生成するTemplateのコードを記載します。</p>

<pre class="code" data-lang="" data-unlink>/*
 * 引数のyearとmonthからその月の開始日と終了日までのoptionタグを生成する。
 * selectedDayに指定した日付のoptionタグにはselected=&#34;selected&#34;の属性を設定する。
 * 例:
 * &lt;option value=&#34;1&#34;&gt;1&lt;/option&gt;
 * &lt;option value=&#34;2&#34;&gt;2&lt;/option&gt;
 * &lt;option value=&#34;3&#34; selected=&#34;selected&#34;&gt;3&lt;/option&gt;
 * &lt;option value=&#34;4&#34;&gt;4&lt;/option&gt;
 * &lt;option value=&#34;5&#34;&gt;5&lt;/option&gt;
 * .
 * .
 * &lt;option value=&#34;31&#34;&gt;31&lt;/option&gt;
 *
 */
function DayOptionsTemplate(year, month, selectedDay){
    var self = this;
    var jsMonth = month - 1;
    var monthFirstDate = new Date(year, jsMonth, 1);
    var monthLastDate  = new Date(year, jsMonth + 1, 0);
    self.template = generateTemplate(monthFirstDate.getDate(),
                                     monthLastDate.getDate(),
                                     selectedDay);

    function generateTemplate(firstday, lastDay, selectedDay){

        function a_day_option_template(day, selected){
            var attr = &#39;&#39;;
            if (selected === true){
                attr += &#39; selected=&#34;selected&#34;&#39;;
            }
            var template = &#39;&lt;option value=&#34;&#39; + String(day) + &#39;&#34;&#39; + attr + &#39;&gt;&#39; +
                String(day) +
                &#39;&lt;/option&gt;&#39;;
            return template;
        }

        var template = &#39;&#39;;

        for(var i=firstday;
            i&lt;=lastDay;
            i++) {
            var selected = i === selectedDay ? true : false;
            template += a_day_option_template(i, selected);
        }
        return template;
    }
}

</pre>


<h2>ViewModel(イベントハンドリング・データフロー)</h2>

<p>HTMLの要素に対してイベントをつけたり、モデルの変更をキャッチした結果生成したHTMLを実際のDOMに差し込んだりする所です。</p>

<p>ここの部分が一番DOMに結びつきやすく、使い回しも効きにくいため、Webアプリケーションのページ毎に作成するイメージです。</p>

<p>DOMと結びついた面倒な部分をここに押し込めることで他のModelやTemplateの独立性を高めています。</p>

<p>以下にプロフィール登録ページのViewModelのサンプルコードを記載します。</p>

<pre class="code" data-lang="" data-unlink>
ProfileViewModel = function(){
  var self = this;
   
  $(document).ready(function(){
        
       // イベントハンドリング  
       $(&#39;form[name=&#34;profile&#34; button.submit]&#39;).click(function(){

          // データフロー
          // Formの値をモデルに与える
          var name = $(&#39;input[name=&#34;user[name]&#34;&#39;).val();
          var email = $(&#39;input[name=&#34;user[email]&#34;&#39;).val();
          var job     = $(&#39;input[name=&#34;user[job]&#34;&#39;).val();

          var user = new User(name, email, job);
          if (user.nameIsBlank === true)
             alert(&#39;名前を入力して下さい&#39;);
             return false
          end          
       });

       // イベントハンドリング
       $(&#39;select[name=&#39;month&#39;]&#39;).change(function(){
          // データフロー
          // 選択されている値を元にテンプレートを作成する
          var year    = $(&#39;select[name=&#39;year&#39;]&#39;).val();
          var month = $(&#39;select[name=&#39;month&#39;]&#39;).val();
          var day     = $(&#39;select[name=&#39;day&#39;]&#39;).val();
          var dayOptions = DayOptionsTemplate(year, month, day);

          // テンプレートの差し込み
          if ($(&#34;select[name=&#39;day&#39;]&#34;).children().length &gt; 0){
              $(&#34;select[name=&#39;day&#39;]&#34;).empty();
          }
          $(&#34;select[name=&#39;day&#39;]&#34;).prepend(dayOptions.template);
          
       })
  });

}
</pre>


<p>このViewModelを使いたいページで実行すれば、必要な処理がすべて用意されるという感じです。</p>

<p>ViewModelの実行はscriptタグで行っても良いですが、dispatcherを作ってURLで必要なVIewModelをセットすると
より見通しさらによくなります。</p>

<pre class="code" data-lang="" data-unlink>dispatcher(&#34;^/profile&#34;, function(){
    ProfileViewModel();
});

function dispatcher(path, func){
    dispatcher.path_func = dispatcher.path_func = dispatcher.path_func || []
    if (func) return dispatcher.path_func.push([path, func]);
    for(var i = 0, l = dispatcher.path_func.length; i&lt;l; ++i ){
        var func = dispatcher.path_func[i];
        var match = path.match(func[0]);
        match &amp;&amp; func[1](match)
    };
};

dispatcher(location.pathname);

</pre>


<h2>終わりに</h2>

<p>とりあえずJSがカオスにならずに秩序をもって構造化でき、ある程度使い回しが可能なコードが作れるような設計を、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク</a>なしで実現できるように取り組んでみました。</p>

<p>いままさに開発中のアプリケーションでは結構気持ちよくこの設計が使えていますが、まだまだ解決したい問題は多々あります。</p>

<p>たとえば分離したJSファイルの依存性を解決したり、Templateが純粋なJSなのでデザイナーが触りづらいなど色々あります。</p>

<p>その解決方法も目処は立っている(依存性解決はWebpackを使ったり、Templateもそれを解決してくれそうなライブラリがある)のですが、いまは自分達のプロジェクトでは回っているので問題が顕在化しそうになってから取り組めば良いかな〜という感じです。</p>

<p>必要なコストが払えるのであれば<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク</a>を導入するのも良いですが、 自分達のプロジェクトに最適化した設計を行なうことが出来るのであればその方が効率は上がるし、プログラミングをしていてもかなり楽しくなるのでおすすめします^^</p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: APIファーストでバックエンドとフロントエンドを別々に開発する時にハマるクロスドメインアクセス
BASENAME: 2014/12/26/011458
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 12/26/2014 01:14:58
-----
BODY:
<p>いま個人で開発を行っている<a class="keyword" href="http://d.hatena.ne.jp/keyword/Web%A5%B5%A1%BC%A5%D3%A5%B9">Webサービス</a>がありまして、そこではバックエンドをRubyonRails、フロントエンドを<a class="keyword" href="http://d.hatena.ne.jp/keyword/Clojure">Clojure</a> &amp; ClojureScriptで開発し、<a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a>でお互いやりとりするように設計しています。(その設計した理由は色々ありますが、単純に好きな2つの言語を使いたかったのが大きな理由の一つですw)</p>

<p>おそらくこれからのアプリケーション開発において、このようにフロントエンドとバックエンドをサーバーも言語も分けて設計・開発することが多くなると思いますので、最近ハマった問題をシェアしておきます。</p>

<h2>同一生成元ポリシー(Same Origin Policy)</h2>

<p>そのハマった問題というのが同一生成元ポリシーによる<a class="keyword" href="http://d.hatena.ne.jp/keyword/Ajax">Ajax</a>の規制です。</p>

<p>同一生成元ポリシーとは、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3">ドメイン</a>Aに配置されているHTMLファイルから別<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3">ドメイン</a>Bのサーバーの<a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a>に<a class="keyword" href="http://d.hatena.ne.jp/keyword/Ajax">Ajax</a>で通信することが出来ないという制約です。</p>

<p>この制約があることで、例えば開発中にフロントエンドを<a class="keyword" href="http://d.hatena.ne.jp/keyword/localhost">localhost</a>:8000で起動し、バックエンドを<a class="keyword" href="http://d.hatena.ne.jp/keyword/localhost">localhost</a>:8001で起動して<a class="keyword" href="http://d.hatena.ne.jp/keyword/Ajax">Ajax</a>で<a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a>通信しようとするとエラーが発生してしまいます。</p>

<p>では、フロントエンドから別サーバーの<a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a>と通信するにはどうすればいいのか・・</p>

<h2>CORS(Cross-Origin Resource Sharing)</h2>

<p>実はこういう希望に対処するためにCross-Origin Resource Sharingという、<a class="keyword" href="http://d.hatena.ne.jp/keyword/XMLHttpRequest">XMLHttpRequest</a>(<a class="keyword" href="http://d.hatena.ne.jp/keyword/Ajax">Ajax</a>のことです)でクロス<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3">ドメイン</a>アクセスを実現する仕様を<a class="keyword" href="http://d.hatena.ne.jp/keyword/W3C">W3C</a>勧告で各ブラウザが実装しています。</p>

<p>CORSではクロス<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3">ドメイン</a>アクセスを行うクライアント側とアクセスされるサーバー側の振る舞いが仕様で規定されています。</p>

<p>その概要はブラウザとサーバーがHTTPヘッダを使ってアクセス制御に関する情報をやりとりしてアクセスを行うものです。</p>

<p>CORSを実際に行う場合にクライアント側のJSで特別な制御を行う必要はあまりないのですが、サーバー側で以下のようなアクセス制限に関するルールを設定する必要があります。</p>

<ul>
<li>クロス<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3">ドメイン</a>アクセスを許可するWebページの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3">ドメイン</a></li>
<li>使用を許可するHTTP<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9">メソッド</a></li>
<li>使用を許可するHTTPヘッダ</li>
</ul>


<p>では、これからどのようにCORSを行っているかを説明していきます。</p>

<h3>CORSの動作 - クライアント側</h3>

<p>クライアント側がクロス<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3">ドメイン</a>アクセスを行うときに行う通信手段には2パターンあります。</p>

<ul>
<li>直接クロス<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3">ドメイン</a>のリソースへリクエストを送る</li>
<li>クロス<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3">ドメイン</a>アクセスが出来るか確認するリクエスト(preflightリクエスト)を送り、そのレスポンスを受けたあとに改めてリクエストを送信する。</li>
</ul>


<p>以下に記載する条件にすべて該当する場合はpreflightリクエストを送る必要がないと判断して、直接サーバーにリクエストを送信します。逆にいうと、この条件に合わなければ必ずpreflightリクエストを送るということです。(これらの判断はすべてブラウザが行ってくれるのでクライアント側で特別にコードを書く必要はありません。)</p>

<h4>preflightリクエストを送信しない条件</h4>

<ul>
<li>HTTP<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9">メソッド</a>がGET, POST, HEADのどれか</li>
<li>HTTPヘッダにAccept, Accept-Language, Content-Language, Content-Type以外のフィールドが含まれていない</li>
<li>Content-Typeの値がapplication/x-www-form-urlencoded, multipart/form-data, text/plainのいずれか</li>
</ul>


<p>上記の条件をみて頂けると気づくと思いますが、<a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a>でデータをやりとりするときは<a class="keyword" href="http://d.hatena.ne.jp/keyword/json">json</a>や<a class="keyword" href="http://d.hatena.ne.jp/keyword/xml">xml</a>をフォーマットとして使うことが多いので、大半はまず間違いなくpreflightリクエストが送られるということです。^^;</p>

<h3>CORSの動作 - サーバー側</h3>

<h4>Originのチェック</h4>

<p>サーバー側では、まず受け取ったリクエストがクロス<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3">ドメイン</a>から受け取ったリクエストか判断するためにリクエストヘッダに含まれる<strong>Origin</strong>フィールドの値が入っているかチェックします。</p>

<p>Originフィールドに値が入っていれば、その<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3">ドメイン</a>がCORSを許可した<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3">ドメイン</a>かをチェックして受け入れるか否かを判断します。</p>

<h4>preflightリクエストかどうかを判断する</h4>

<p>次にサーバーはこのリクエストが通常のリクエストかpreflightリクエストかを判断しないといけません。実際には以下の項目をチェックしてpreflightかどうかを判断します。</p>

<ul>
<li>HTTP<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9">メソッド</a>がOPTIONSであるか</li>
<li>リクエストヘッダに<a class="keyword" href="http://d.hatena.ne.jp/keyword/Access">Access</a>-Control-Request-Methodフィールドが付与されているか</li>
</ul>


<p>ちなみに、僕はクロス<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3">ドメイン</a>でエラーが発生したリクエストを調査しているときに、POSTで送ったはずのHTTP<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9">メソッド</a>がOPTIONSになっていて思わずライブラリのバグかなと中のコードを30分程探ってしまいました(- -;)</p>

<h4>アクセス許可<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9">メソッド</a>のチェック</h4>

<p>続いて、HTTP<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9">メソッド</a>がアクセスを許可しているものかどうかをチェックします。</p>

<p>preflightリクエストが来ていた場合、<strong><a class="keyword" href="http://d.hatena.ne.jp/keyword/Access">Access</a>-Control-Request-Method</strong>に本来送るはずのHTTP<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9">メソッド</a>がここに記載されているので、この中身もみてアクセスを許可するかどうかを判断します。</p>

<h4>レスポンスヘッダの作成</h4>

<h5><a class="keyword" href="http://d.hatena.ne.jp/keyword/Access">Access</a>-Control-Allow-Origin</h5>

<p>CORSが成立して、リクエストに対してレスポンスを返す時にレスポンスヘッダの<strong><a class="keyword" href="http://d.hatena.ne.jp/keyword/Access">Access</a>-Control-Allow-Origin</strong>フィールドにクロス<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3">ドメイン</a>アクセスが許可される<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3">ドメイン</a>名を付加します。</p>

<p>もし<a class="keyword" href="http://d.hatena.ne.jp/keyword/Access">Access</a>-Control-Allow-Originのフィールドがない場合はブラウザはクロス<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3">ドメイン</a>アクセスに失敗したと判断してエラーを発生させます。</p>

<p>リクエストがpreflightリクエストだった場合は他にもレスポンスヘッダを追加します。</p>

<h5><a class="keyword" href="http://d.hatena.ne.jp/keyword/Access">Access</a>-Control-Allow-Methods</h5>

<p>preflight後の実際のリクエストで利用を許可するHTTP<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E1%A5%BD%A5%C3%A5%C9">メソッド</a>の情報を付加します。</p>

<h5><a class="keyword" href="http://d.hatena.ne.jp/keyword/Access">Access</a>-Control-Allow-Headers</h5>

<p>preflights後の実際のリクエストで利用を許可するリクエストヘッダの情報を付加します。</p>

<h5><a class="keyword" href="http://d.hatena.ne.jp/keyword/Access">Access</a>-Control-Max-Age</h5>

<p>preflightの結果をキャッシュする時間を付加します。毎回毎回クロス<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3">ドメイン</a>アクセスを行うたびにpreflightリクエストを送ると送受信コストが無駄にかかってしまうため、こちらで指定した時間はその結果をキャッシュしブラウザ側はpreflightリクエストを送らずに直接リクエストを送信します。単位は秒で指定します。</p>

<h2>理屈は分かった。で、どうすればいいんだ！？</h2>

<p>上の説明でCORSを行う仕組みはなんとなく把握できたと思うのですが、じゃあ具体的にどういう対応すればいいのでしょうか？</p>

<p>自分の場合はバックエンド側にはRubyonRailsを使っており、幸いCORS対応を行うためのgemで<a href="https://github.com/cyu/rack-cors">rack-cors</a>というのがすでにあるのでそちらを使いました。</p>

<p>rack-corsのREADMEを見れば良いのですが、Gemfileにrack-corsを追記してbundle installしたあとに、config/application.rbに以下のように記載します。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synPreProc">module</span> <span class="synType">YourApp</span>
  <span class="synPreProc">class</span> <span class="synType">Application</span> &lt; <span class="synType">Rails</span>::<span class="synType">Application</span>

    <span class="synComment"># ...</span>

    config.middleware.insert_before <span class="synConstant">0</span>, <span class="synSpecial">&quot;</span><span class="synConstant">Rack::Cors</span><span class="synSpecial">&quot;</span> <span class="synStatement">do</span>
      allow <span class="synStatement">do</span>
        origins <span class="synSpecial">'</span><span class="synConstant">your_app_domain</span><span class="synSpecial">'</span>
        resource <span class="synSpecial">'</span><span class="synConstant">*</span><span class="synSpecial">'</span>, <span class="synConstant">:headers</span> =&gt; <span class="synConstant">:any</span>, <span class="synConstant">:methods</span> =&gt; [<span class="synConstant">:get</span>, <span class="synConstant">:post</span>, <span class="synConstant">:put</span>, <span class="synConstant">:delete</span>, <span class="synConstant">:options</span>]
      <span class="synStatement">end</span>
    <span class="synStatement">end</span>

  <span class="synPreProc">end</span>
<span class="synPreProc">end</span>
</pre>


-----
--------
AUTHOR: arakaji-yuu
TITLE: fb-friends-photo-viewerというwebアプリを作った。
BASENAME: 2012/12/05/004359
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 12/05/2012 00:43:59
-----
BODY:
<p>fb-friends-photo-viewerというwebアプリを<a class="keyword" href="http://d.hatena.ne.jp/keyword/ruby">ruby</a>の<a class="keyword" href="http://d.hatena.ne.jp/keyword/sinatra">sinatra</a>という<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク</a>を使って開発しました。</p><p>　このアプリを使うと<a class="keyword" href="http://d.hatena.ne.jp/keyword/Facebook">Facebook</a>での友達がいままでアップロードしたすべての写真をかんたんに見るができます。<br />
　ユーザーが使った時に見たことのない写真にすぐに出会えて新鮮な気持ちで使えるように、写真はアップロードが新しい順にソートされて表示されます。<br />
　ターゲットが<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%DE%A1%BC%A5%C8%A5%D5%A5%A9%A5%F3">スマートフォン</a>利用者の若い女性なので、<a class="keyword" href="http://d.hatena.ne.jp/keyword/jquery">jquery</a>-mobileという技術を使ってUIをスマホ最適化させています。</p><p>使っている主な技術は</p>

<ul>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/ruby">ruby</a></li>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/sinatra">sinatra</a></li>
<li>koala</li>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/jquery">jquery</a>-mobile</li>
<li>thread</li>
</ul><p>になります。</p><p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9">ソースコード</a>はgithubに公開しているので、興味ある方はぜひ読んでみてください。</p>

-----
--------
AUTHOR: arakaji-yuu
TITLE: 自己紹介です。はじめまして、arakajiです。
BASENAME: 2012/12/03/194714
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 12/03/2012 19:47:14
-----
BODY:
<p>ブログ開設しました。arakajiです。</p>
<p>私は現在24歳で、沖縄在住のアマチュア<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DE">プログラマ</a>ーです。プログラミングをはじめて約10ヶ月になり、触っている言語は<a class="keyword" href="http://d.hatena.ne.jp/keyword/Python">Python</a>と<a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby</a>なんですがメインで<a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby</a>を使ってます。</p>
<p>アルゴリズムを知るために<a class="keyword" href="http://d.hatena.ne.jp/keyword/Java">Java</a>や<a class="keyword" href="http://d.hatena.ne.jp/keyword/JavaScript">JavaScript</a>のコードはたまに読むんだけど、<a class="keyword" href="http://d.hatena.ne.jp/keyword/ruby">ruby</a>, <a class="keyword" href="http://d.hatena.ne.jp/keyword/python">python</a>で</p>
<p>入ってるから色んな宣言が多くてびっくりしたね！でも、近いうちそういう言語も覚えないといけないかなー。</p>
<p>使っているOSは<a class="keyword" href="http://d.hatena.ne.jp/keyword/Linux">Linux</a>の<a class="keyword" href="http://d.hatena.ne.jp/keyword/Ubuntu">Ubuntu</a>です。最初の半年以上は<a class="keyword" href="http://d.hatena.ne.jp/keyword/windows7">windows7</a>でやってたんだけど、<a class="keyword" href="http://d.hatena.ne.jp/keyword/ruby">ruby</a>で色々やろうとすると引っかかる引っかかる（TーT）それで一念発起して恐る恐る<a class="keyword" href="http://d.hatena.ne.jp/keyword/Ubuntu">Ubuntu</a>を入れてみたら・・・・なんということでしょう！</p>
<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/ruby">ruby</a>の扱いがぐっ！！と楽になるではありませんか。</p>
<p>gemも簡単にインストールできるし、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%CA%B8%BB%FA%A5%B3%A1%BC%A5%C9">文字コード</a>での苦労もなくなるし。<a class="keyword" href="http://d.hatena.ne.jp/keyword/ruby">ruby</a>でプログラミングするならやっぱ<a class="keyword" href="http://d.hatena.ne.jp/keyword/Linux">Linux</a>！っていうネットの意見を聞いて正解でした。ただいつかMacも使ってみて、なぜ<a class="keyword" href="http://d.hatena.ne.jp/keyword/Apple">Apple</a>ファンがあんなに熱狂的なのか感じたいっていう希望もあります。</p>
<p>&nbsp;</p>
<p>さて、このブログですが、基本プログラミングや覚えた技術について書くつもりです。</p>
<p>でも、他にも書きたいことがあったら書くつもりです。</p>
<p>良い<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DE">プログラマ</a>ーはブログをしている人が多いということで始めたので、自分のために書くのがメイン！それプラス、ここでの発信がすこしでも素晴らしきハッカー文化に貢献できたら幸いです。</p>
<p>なので、出来る範囲で更新していくので気軽に見にきてくださいねv^_^</p>
<p>&nbsp;</p>
<p>P.S</p>
<p>いまプロ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DE">プログラマ</a>ーになろうと就活中なので、興味をもって頂けたら連絡頂けると嬉しいです。</p>
<p>興味をもって頂けなくても、求人に応募してくるかもしれないですし、なにかの機会にお会いことがあれば、よろしくおねがいします。</p>
-----
--------
